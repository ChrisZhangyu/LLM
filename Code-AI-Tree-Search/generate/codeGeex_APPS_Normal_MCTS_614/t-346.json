{"codes": ["\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\nprices = list(map(int, sys.stdin.readline().split()))\nauction = list(map(int, sys.stdin.readline().split()))\n\ndef get_price(i):\n    if i in auction:\n        return prices[i - 1]\n    else:\n        return 0\n\ndef get_points(i):\n    if i in auction:\n        return prices[i - 1]\n    else:\n        return prices[i - 1] + get_points(i - 1)\n\ndef get_max_points(i):\n    if i in auction:\n        return get_price(i)\n    else:\n        return max(get_max_points(i - 1), get_points(i - 1))\n\nprint(get_max_points(n))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\"\"\"", "import sys\n\nn, m = map(int, sys.stdin.readline().split())\nprices = list(map(int, sys.stdin.readline().split()))\nauction_questions = list(map(int, sys.stdin.readline().split()))\n\ndef calc_max_points(prices, auction_questions):\n    points = 0\n    for i in range(len(auction_questions)):\n        auction_price = prices[auction_questions[i] - 1]\n        if auction_price > points:\n            points += auction_price\n        else:\n            points -= auction_price\n    return points\n\nprint(calc_max_points(prices, auction_questions))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\n\"\"\"", "\n\n\"\"\"", "\"\"\"\n\n\nclass Question:\n    def __init__(self, price, is_auction=False):\n        self.price = price\n        self.is_auction = is_auction\n\n\nclass Player:\n    def __init__(self, name, points):\n        self.name = name\n        self.points = points\n        self.last_answer = None\n\n    def answer(self, question):\n        if question.is_auction:\n            if self.points > question.price:\n                self.points -= question.price\n                self.last_answer = question.price\n            else:\n                self.last_answer = None\n        else:\n            self.points += question.price\n            self.last_answer = question.price\n\n\nclass Game:\n    def __init__(self, questions, auction_questions, players):\n        self.questions = questions\n        self.auction_questions = auction_questions\n        self.players = players\n\n    def play(self):\n        for question in self.questions:\n            for player in self.players:\n                if player.last_answer:\n                    continue\n                if question.is_auction:\n                    if question.price in self.auction_questions:\n                        self.auction_questions.remove(question.price)\n                        player.answer(question)\n                        break\n                else:\n                    player.answer(question)\n                    break\n\n    def get_max_points(self):\n        max_points = 0\n        ", "\n\"\"\"\n\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\na = list(map(int, sys.stdin.readline().split()))\nb = list(map(int, sys.stdin.readline().split()))\n\n\ndef get_max_points(a, b, n, m):\n    points = 0\n    for i in range(m):\n        points += a[b[i] - 1]\n    for i in range(m, n):\n        if a[b[i - m] - 1] > points:\n            points += a[b[i] - 1]\n        else:\n            points -= a[b[i - m] - 1]\n    return points\n\n\nprint(get_max_points(a, b, n, m))", "\n\n-----Input-----\n\nThe first line contains two space-separated integers n and m (1 \u2264 n, m \u2264 100;\u00a0m \u2264 min(n, 30)) \u2014 the total number of questions and the number of auction questions, correspondingly. The second line contains n space-separated integers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 10^7) \u2014 the prices of the questions. The third line contains m distinct integers b_{i} (1 \u2264 b_{i} \u2264 n) \u2014 the numbers of auction questions. Assume that the questions are numbered from 1 to n.\n\n\n-----Output-----\n\nIn the single line, print the answer to the problem \u2014 the maximum points the R2 company can get if it plays optimally well. It is guaranteed that the answer fits into the integer 64-bit signed type.\n\n\n-----Examples-----\nInput\n4 1\n1 3 7 5\n3\n\nOutput\n18\n\nInput\n3 2\n10 3 8\n2 3\n\nOutput\n40\n\nInput\n2 2\n100 200\n1 2\n\nOutput\n400\nUse Standard Input format"], "rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "train rewards": [0.07142857142857142, 0.0, 0.0, 0.07142857142857142, 0.0, 0.0, 0.0, 0.0, 0.0], "time": [22.894227743148804, 43.779239892959595, 64.47079086303711, 85.57308912277222, 97.42232656478882, 109.25015807151794, 129.64845395088196, 141.73711490631104, 162.37535977363586], "sample times": 9}