{"codes": ["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import sys\n\nn, l = map(int, sys.stdin.readline().split())\na = list(map(int, sys.stdin.readline().split()))\nb = list(map(int, sys.stdin.readline().split()))\n\nif a == b:\n    print(\"YES\")\nelse:\n    print(\"NO\")", "#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\nint main()\n{\n    int n, l;\n    cin >> n >> l;\n    vector<int> kefa(n), sasha(n);\n    for (int i = 0; i < n; i++)\n    {\n        cin >> kefa[i];\n    }\n    for (int i = 0; i < n; i++)\n    {\n        cin >> sasha[i];\n    }\n    sort(kefa.begin(), kefa.end());\n    sort(sasha.begin(), sasha.end());\n    for (int i = 0; i < n; i++)\n    {\n        if (kefa[i] != sasha[i])\n        {\n            cout << \"NO\" << endl;\n            return 0;\n        }\n    }\n    cout << \"YES\" << endl;\n    return 0;\n}", "\nimport sys\n\nn, l = map(int, sys.stdin.readline().split())\n\nkefa = list(map(int, sys.stdin.readline().split()))\nsasha = list(map(int, sys.stdin.readline().split()))\n\nfor i in range(n):\n    if kefa[i] != sasha[i]:\n        print(\"NO\")\n        sys.exit()\n\nprint(\"YES\")", "\ndef main():\n    n, l = map(int, input().split())\n    kefa = list(map(int, input().split()))\n    sasha = list(map(int, input().split()))\n    for i in range(n):\n        if kefa[i] != sasha[i]:\n            print(\"NO\")\n            return\n    print(\"YES\")\n\n\nif __name__ == \"__main__\":\n    main()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import math\n\nn, l = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\nif a == b:\n    print(\"YES\")\nelse:\n    print(\"NO\")", "\ndef check(a, b):\n    for i in range(len(a)):\n        if a[i] != b[i]:\n            return False\n    return True\n\nn, l = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nif check(a, b):\n    print(\"YES\")\nelse:\n    print(\"NO\")", "\ndef is_same_track(n, l, kefa_start, sasha_start, kefa_barriers, sasha_barriers):\n    if kefa_start > sasha_start:\n        kefa_start, sasha_start = sasha_start, kefa_start\n        kefa_barriers, sasha_barriers = sasha_barriers, kefa_barriers\n\n    for i in range(n):\n        if kefa_barriers[i] != sasha_barriers[i]:\n            return False\n\n    return True\n\n\nif __name__ == '__main__':\n    n, l = map(int, input().split())\n    kefa_start = list(map(int, input().split()))\n    sasha_start = list(map(int, input().split()))\n    kefa_barriers = list(map(int, input().split()))\n    sasha_barriers = list(map(int, input().split()))\n\n    if is_same_track(n, l, kefa_start, sasha_start, kefa_barriers, sasha_barriers):\n        print('YES')\n    else:\n        print('NO')"], "rewards": [0.0, 0.34328358208955223, 0.0, 0.34328358208955223, 0.0, 0.34328358208955223, 0.34328358208955223, 0.0], "train rewards": [0.0, 0.16417910447761194, 0.0, 0.16417910447761194, 0.0, 0.16417910447761194, 0.16417910447761194, 0.0], "time": [16.822331428527832, 34.81985545158386, 49.33038401603699, 67.0778956413269, 85.16529750823975, 91.89690899848938, 100.11582326889038, 118.09250807762146], "sample times": 8}