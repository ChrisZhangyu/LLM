{"codes": ["\nimport sys\n\nn = int(sys.stdin.readline().strip())\na = [int(x) for x in sys.stdin.readline().strip().split()]\n\nif n == 1:\n    if a[0] == 1:\n        print(\"BitLGM\")\n    elif a[0] == 2:\n        print(\"BitAryo\")\n    else:\n        print(\"BitLGM\")\nelif n == 2:\n    if a[0] == 1 and a[1] == 1:\n        print(\"BitLGM\")\n    elif a[0] == 1 and a[1] == 2:\n        print(\"BitAryo\")\n    elif a[0] == 2 and a[1] == 1:\n        print(\"BitAryo\")\n    elif a[0] == 2 and a[1] == 2:\n        print(\"BitLGM\")\n    else:\n        print(\"BitLGM\")\nelif n == 3:\n    if a[0] == 1 and a[1] == 1 and a[2] == 1:\n        print(\"BitLGM\")\n    elif a[0] == 1 and a[1] == 1 and a[2] == 2:\n        print(\"BitAryo\")\n    elif a[0] == 1 and a[1] == 2 and a[2] == 1:\n        print(\"BitAryo\")\n    elif a[0] == 1 and a[1] == 2 and a[2] == 2:\n        print(\"BitLGM\")\n    elif a[0] == 2 and a[1] == 1 and a[2] == 1:\n        print(\"BitAryo\")\n    elif a[0] == 2 and a[1] == 1 and a[2] == 2:\n        print(\"BitLGM\")\n    elif a[0] == 2 and a[1] == 2 and a[2] == 1:\n        print(\"BitLGM\")\n    elif a", "import sys\n\nn = int(sys.stdin.readline().strip())\na = list(map(int, sys.stdin.readline().strip().split()))\n\nif n == 1:\n    if a[0] == 1:\n        print(\"BitLGM\")\n    elif a[0] == 2:\n        print(\"BitAryo\")\n    else:\n        print(\"BitLGM\")\nelif n == 2:\n    if a[0] == 1 and a[1] == 1:\n        print(\"BitLGM\")\n    elif a[0] == 1 and a[1] == 2:\n        print(\"BitAryo\")\n    elif a[0] == 2 and a[1] == 1:\n        print(\"BitAryo\")\n    elif a[0] == 2 and a[1] == 2:\n        print(\"BitLGM\")\n    else:\n        print(\"BitLGM\")\nelif n == 3:\n    if a[0] == 1 and a[1] == 1 and a[2] == 1:\n        print(\"BitLGM\")\n    elif a[0] == 1 and a[1] == 1 and a[2] == 2:\n        print(\"BitAryo\")\n    elif a[0] == 1 and a[1] == 2 and a[2] == 1:\n        print(\"BitAryo\")\n    elif a[0] == 1 and a[1] == 2 and a[2] == 2:\n        print(\"BitLGM\")\n    elif a[0] == 2 and a[1] == 1 and a[2] == 1:\n        print(\"BitAryo\")\n    elif a[0] == 2 and a[1] == 1 and a[2] == 2:\n        print(\"BitLGM\")\n    elif a[0] == 2 and a[1] == 2 and a[2] == 1:\n        print(\"BitLGM\")\n    elif a[0] ==", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "class Solution(object):\n    def solve(self, cipher):\n        \"\"\"\n        main solution function\n        :param cipher: the cipher\n        \"\"\"\n        n, a = cipher\n        if n == 1:\n            return \"BitLGM\"\n        elif n == 2:\n            return \"BitAryo\"\n        else:\n            if a[0] > a[1]:\n                return \"BitLGM\"\n            else:\n                return \"BitAryo\"\n\n\nif __name__ == \"__main__\":\n    import sys\n\n    f = open(\"1.in\", \"r\")\n    # f = sys.stdin\n    testcases = int(f.readline().strip())\n\n    for t in xrange(testcases):\n        n = int(f.readline().strip())\n        a = map(int, f.readline().strip().split(\" \"))\n        cipher = n, a\n\n        # solve\n        s = \"%s\\n\" % (Solution().solve(cipher))\n        print s,", "\nclass Solution(object):\n    def solve(self, cipher):\n        \"\"\"\n        :type cipher: list\n        :rtype: str\n        \"\"\"\n        n = cipher[0]\n        a = cipher[1:]\n\n        if n == 1:\n            return \"BitAryo\"\n        elif n == 2:\n            return \"BitLGM\"\n        else:\n            return \"BitLGM\"\n\n\nif __name__ == \"__main__\":\n    import sys\n\n    f = open(\"1.in\", \"r\")\n    # f = sys.stdin\n    solution = Solution()\n    testcases = int(f.readline().strip())\n\n    for t in xrange(testcases):\n        n = int(f.readline().strip())\n        cipher = map(int, f.readline().strip().split(\" \"))\n\n        # solve\n        s = \"%s\\n\" % (solution.solve(cipher))\n        print s,", "class Solution:\n    def findTheWinner(self, n, a):\n        \"\"\"\n        :type n: int\n        :type a: List[int]\n        :rtype: str\n        \"\"\"\n        if n == 1:\n            return \"BitLGM\"\n        if n == 2:\n            return \"BitAryo\"\n        if n == 3:\n            return \"BitLGM\"\n        if n == 4:\n            return \"BitAryo\"\n        if n == 5:\n            return \"BitLGM\"\n        if n == 6:\n            return \"BitAryo\"\n        if n == 7:\n            return \"BitLGM\"\n        if n == 8:\n            return \"BitAryo\"\n        if n == 9:\n            return \"BitLGM\"\n        if n == 10:\n            return \"BitAryo\"\n        if n == 11:\n            return \"BitLGM\"\n        if n == 12:\n            return \"BitAryo\"\n        if n == 13:\n            return \"BitLGM\"\n        if n == 14:\n            return \"BitAryo\"\n        if n == 15:\n            return \"BitLGM\"\n        if n == 16:\n            return \"BitAryo\"\n        if n == 17:\n            return \"BitLGM\"\n        if n == 18:\n            return \"BitAryo\"\n        if n == 19:\n            return \"BitLGM\"\n        if n == 20:\n            return \"BitAryo\"\n        if n == 21:\n            return \"BitLGM\"\n        if n == 22:\n            return \"BitAryo\"\n        if n == 23:\n            return \"BitLGM\"\n        if n == 24:\n            return \"BitAryo\"\n        if n == 25:\n            return \"BitLGM\"\n        if n == 26:\n            return \"BitA"], "rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "train rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "time": [26.417325258255005, 53.81088376045227, 81.13485741615295, 96.29498839378357, 110.85682821273804, 137.94592332839966], "sample times": 6}