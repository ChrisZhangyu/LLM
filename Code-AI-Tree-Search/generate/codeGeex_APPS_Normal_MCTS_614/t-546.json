{"codes": ["\nimport re\n\ndef main():\n    good_letters = input()\n    pattern = input()\n    n = int(input())\n    for i in range(n):\n        query = input()\n        if re.match(pattern, query):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == '__main__':\n    main()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import re\n\n\ndef main():\n    good_letters = input()\n    pattern = input()\n    n = int(input())\n    for i in range(n):\n        query = input()\n        if re.match(pattern, query):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n\nif __name__ == '__main__':\n    main()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "#include <iostream>\n#include <string>\nusing namespace std;\nint main()\n{\n    string s;\n    getline(cin, s);\n    string p;\n    getline(cin, p);\n    int n;\n    cin >> n;\n    for (int i = 0; i < n; i++)\n    {\n        string q;\n        getline(cin, q);\n        if (p.find('*') == string::npos)\n        {\n            if (q == p)\n                cout << \"YES\" << endl;\n            else\n                cout << \"NO\" << endl;\n        }\n        else\n        {\n            for (int j = 0; j < q.size(); j++)\n            {\n                if (q[j] == p[j] || p[j] == '?')\n                    continue;\n                else\n                {\n                    cout << \"NO\" << endl;\n                    break;\n                }\n            ", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import sys\nimport re\n\n\ndef main():\n    good_letters = sys.stdin.readline().strip()\n    pattern = sys.stdin.readline().strip()\n    n = int(sys.stdin.readline().strip())\n\n    for i in range(n):\n        query = sys.stdin.readline().strip()\n        if re.match(pattern, query):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n\nif __name__ == \"__main__\":\n    main()", "\n#include <iostream>\n#include <string>\nusing namespace std;\n\nint main()\n{\n    string s;\n    cin >> s;\n    string p;\n    cin >> p;\n    int n;\n    cin >> n;\n    while (n--)\n    {\n        string q;\n        cin >> q;\n        bool flag = true;\n        for (int i = 0; i < p.size(); i++)\n        {\n            if (p[i] == '?')\n            {\n                if (s.find(q[i]) == -1)\n                {\n                    flag = false;\n                    break;\n                }\n            }\n            else\n            {\n                if (p[i] != q[i])\n                {\n                    flag = false;\n                    break;\n                }\n            }\n        }\n        if (flag)\n            cout << \"YES\" << endl;\n        else\n            cout << \"NO\" << endl", "\nimport sys\nimport re\n\ndef main():\n    good_letters = sys.stdin.readline().strip()\n    pattern = sys.stdin.readline().strip()\n    n = int(sys.stdin.readline().strip())\n    for i in range(n):\n        query = sys.stdin.readline().strip()\n        if re.match(pattern, query):\n            print \"YES\"\n        else:\n            print \"NO\"\n\nif __name__ == '__main__':\n    main()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"], "rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "train rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "time": [14.4733567237854, 29.038020133972168, 43.522149085998535, 58.07636475563049, 72.36471581459045, 86.74911522865295, 101.02667546272278], "sample times": 7}