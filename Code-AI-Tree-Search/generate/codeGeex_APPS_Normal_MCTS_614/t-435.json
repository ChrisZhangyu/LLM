{"codes": ["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import sys\n\nn, k = map(int, sys.stdin.readline().split())\ns = sys.stdin.readline().strip()\n\nans = 0\nfor i in range(n):\n    count = 1\n    for j in range(i + 1, n):\n        if s[j] == s[i]:\n            count += 1\n        else:\n            ans = max(ans, count)\n            count = 1\n    ans = max(ans, count)\n\nprint(ans)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "def max_beauty(s, k):\n    n = len(s)\n    if n <= k:\n        return n\n    \n    beauty = [0] * (n + 1)\n    \n    for i in range(1, n + 1):\n        beauty[i] = beauty[i - 1]\n        if s[i - 1] == 'a':\n            beauty[i] = max(beauty[i], beauty[i - 1] + 1)\n        elif s[i - 1] == 'b':\n            beauty[i] = max(beauty[i], beauty[i - 1] + 1)\n    \n    for i in range(n - 1, 0, -1):\n        if s[i - 1] == 'a':\n            beauty[i] = max(beauty[i], beauty[i + 1] + 1)\n        elif s[i - 1] == 'b':\n            beauty[i] = max(beauty[i], beauty[i + 1] + 1)\n    \n    for i in range(1, n + 1):\n        if s[i - 1] == 'a':\n            beauty[i] = max(beauty[i], beauty[i - 1] + 1)\n        elif s[i - 1] == 'b':\n            beauty[i] = max(beauty[i], beauty[i - 1] + 1)\n    \n    return max(beauty[1:])\n\nprint(max_beauty(input(), int(input())))", "\ndef max_beauty(s, k):\n    n = len(s)\n    if n <= k:\n        return n\n    \n    beauty = [0] * (n + 1)\n    beauty[0] = 0\n    beauty[1] = 1 if s[0] == 'a' else 0\n    \n    for i in range(2, n + 1):\n        if s[i - 1] == 'a':\n            beauty[i] = max(beauty[i - 1], beauty[i - 2] + 1)\n        else:\n            beauty[i] = max(beauty[i - 1], beauty[i - 2] - 1)\n    \n    for i in range(k + 1, n + 1):\n        if s[i - 1] == 'a':\n            beauty[i] = max(beauty[i - 1], beauty[i - 2] + 1)\n        else:\n            beauty[i] = max(beauty[i - 1], beauty[i - 2] - 1)\n    \n    return beauty[n]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\nimport sys\n\nn, k = map(int, sys.stdin.readline().split())\ns = sys.stdin.readline().strip()\n\nans = 0\nfor i in range(len(s)):\n    cnt = 1\n    for j in range(i + 1, len(s)):\n        if s[j] == s[i]:\n            cnt += 1\n        else:\n            break\n    ans = max(ans, cnt)\n\nfor i in range(len(s) - 1):\n    if s[i] != s[i + 1]:\n        k -= 1\n    if k < 0:\n        break\n    if s[i] == s[i + 1]:\n        ans = max(ans, k + 2)\n    else:\n        ans = max(ans, k + 1)\n\nprint(ans)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\ndef beauty(s):\n    if len(s) <= 1:\n        return len(s)\n    if s[0] == s[1]:\n        return 2 + beauty(s[2:])\n    if s[1] == s[2]:\n        return 3 + beauty(s[3:])\n    else:\n        return max(beauty(s[1:]), beauty(s[2:]))\n\ns = input()\nprint(beauty(s))\n\"\"\"\n\n\ndef beauty(s):\n    if len(s) <= 1:\n        return len(s)\n    if s[0] == s[1]:\n        return 2 + beauty(s[2:])\n    if s[1] == s[2]:\n        return 3 + beauty(s[3:])\n    else:\n        return max(beauty(s[1:]), beauty(s[2:]))\n\n\ns = input()\nprint(beauty(s))", "def beauty(s):\n    if len(s) <= 1:\n        return len(s)\n    if s[0] == s[1]:\n        return 2 + beauty(s[2:])\n    if s[1] == s[2]:\n        return 3 + beauty(s[3:])\n    if s[0] == s[2]:\n        return 3 + beauty(s[3:])\n    if s[0] == s[3]:\n        return 4 + beauty(s[4:])\n    if s[1] == s[3]:\n        return 4 + beauty(s[4:])\n    if s[0] == s[4]:\n        return 5 + beauty(s[5:])\n    if s[1] == s[4]:\n        return 5 + beauty(s[5:])\n    if s[2] == s[4]:\n        return 5 + beauty(s[5:])\n    if s[0] == s[5]:\n        return 6 + beauty(s[6:])\n    if s[1] == s[5]:\n        return 6 + beauty(s[6:])\n    if s[2] == s[5]:\n        return 6 + beauty(s[6:])\n    if s[3] == s[5]:\n        return 6 + beauty(s[6:])\n    if s[0] == s[6]:\n        return 7 + beauty(s[7:])\n    if s[1] == s[6]:\n        return 7 + beauty(s[7:])\n    if s[2] == s[6]:\n        return 7 + beauty(s[7:])\n    if s[3] == s[6]:\n        return 7 + beauty(s[7:])\n    if s[4] == s[6]:\n        return 7 + beauty(s[7:])\n    if s[0] == s[7]:\n        return 8 + beauty(s[8:])\n    if s[1] == s[7]:\n        return 8 + beauty(s[8:])\n    if s[2] == s[7]:\n        return 8 + beauty(s[8:])\n    if s[3] == s[7]:\n        return 8 + beauty(s[8:])\n    if s[4] == s[7]:\n        return 8 + beauty(s[8:])\n    if s[5] == s[7]:\n        return 8 + beauty(s[8:])\n    if s[0] == s[8]:\n        return 9 + beauty(s[9:])\n    if s[1] == s[8]:\n        return 9 + beauty(s[9:])\n    if s[2] == s[8]:\n        return 9 + beauty(s[9:])\n    if s[3] == s[8]:\n        return 9 + beauty(s[9:])\n    if s[", "\n\ndef max_beauty(s, k):\n    n = len(s)\n    if n <= k:\n        return n\n    \n    beauty = [0] * (n + 1)\n    beauty[0] = 0\n    beauty[1] = 1 if s[0] == 'a' else 0\n    \n    for i in range(2, n + 1):\n        if s[i - 1] == 'a':\n            beauty[i] = max(beauty[i - 1], beauty[i - 2] + 1)\n        else:\n            beauty[i] = max(beauty[i - 1], beauty[i - 2] - 1)\n    \n    for i in range(k + 1, n + 1):\n        if s[i - 1] == 'a':\n            beauty[i] = max(beauty[i - 1], beauty[i - 2] + 1)\n        else:\n            beauty[i] = max(beauty[i - 1], beauty[i - 2] - 1)\n    \n    return beauty[n]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"], "rewards": [0.0, 0.24, 0.0, 0.0, 0.52, 0.0, 0.0, 0.0], "train rewards": [0.0, 0.32, 0.0, 0.0, 0.28, 0.0, 0.0, 0.0], "time": [37.730894804000854, 75.51593565940857, 100.19289779663086, 138.00689339637756, 175.11456656455994, 188.56622838974, 225.80868983268738, 263.03068685531616], "sample times": 8}