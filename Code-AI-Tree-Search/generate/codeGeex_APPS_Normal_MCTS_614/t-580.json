{"codes": ["\nimport sys\n\nn, m, s, t = map(int, sys.stdin.readline().split())\n\nroads = []\n\nfor i in range(m):\n    roads.append(list(map(int, sys.stdin.readline().split())))\n\nroads.sort(key = lambda x: x[2])\n\n\ndef", "import sys\n\nn, m, s, t = map(int, sys.stdin.readline().split())\nroads = []\nfor i in range(m):\n    a, b, l = map(int, sys.stdin.readline().split())\n    roads.append((a, b, l))\n\n\ndef find_path(s, t):", "class Solution(object):\n    def repairRoads(self, n, m, s, t):\n        \"\"\"\n        :type n: int\n        :type m: int\n        :type s: int\n        :type t: int\n        :rtype: List[str]\n        \"\"\"", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```", "\nclass Edge:\n    def __init__(self, u, v, w):\n        self.u = u\n        self.v = v\n        self.w = w\n\n\nclass Graph:\n    def __init__(self):\n        self.edges = []\n\n    def addEdge(self, u, v, w):\n        self.edges.append", "class Solution:\n    def repairRoads(self, n, m, s, t, roads):\n        \"\"\"\n        :type n: int\n        :type m: int\n        :type s: int\n        :type t: int\n        :type roads: List[List[int]]\n        :rtype: List[str]\n        \"\"\"\n        graph = collections", "\nclass Solution(object):\n    def repairRoads(self, n, m, s, t, roads):\n        \"\"\"\n        :type n: int\n        :type m: int\n        :type s: int\n        :type t: int\n        :type roads: List[List[int]]\n        :rtype: List[str]\n        \"\"\"\n        ", "import math\nn,m,s,t=map(int,input().split())\nd=[[0]*(n+1) for i in range(n+1)]\nfor i in range(m):\n    a,b,c=map(int,input().split())\n    d[a][b]=c\nfor i in range(1,n+1", "class Edge:\n    def __init__(self, u, v, w):\n        self.source = u\n        self.sink = v\n        self.capacity = w\n\nclass FlowNetwork:\n    def __init__(self, n):\n        self.adj = [[] for _ in range(n)]\n        self.flow = [[] for _ in range"], "rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "train rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "time": [7.003842353820801, 13.73943543434143, 20.519756317138672, 25.063082933425903, 31.77209186553955, 38.44133687019348, 45.15054249763489, 51.73817563056946, 58.43304395675659], "sample times": 9}