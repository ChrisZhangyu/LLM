{"codes": ["\nimport sys\n\nm = int(sys.stdin.readline().strip())\nc = list(map(int, sys.stdin.readline().strip().split()))\nx, y = map(int, sys.stdin.readline().strip().split())\n\n\ndef check(x, y, m, c):\n    for i in range(1, m + 1):\n        if c[i - 1] < x:\n            return False\n        if c[i - 1] >= x and c[i - 1] <= y:\n            continue\n        if c[i - 1] > y:\n            return False\n    return True\n\n\nfor i in range(1, m + 1):\n    if check(x, y, m, c):\n        print(i)\n        sys.exit(0)\nprint(0)", "import sys\n\nm = int(sys.stdin.readline().strip())\nc = list(map(int, sys.stdin.readline().strip().split()))\nx, y = map(int, sys.stdin.readline().strip().split())\n\n\ndef check_passing_rate(passing_rate, x, y, c):\n    beginners = 0\n    intermediates = 0\n    for i in c:\n        if i < passing_rate:\n            beginners += 1\n        else:\n            intermediates += 1\n    if x <= beginners <= y and x <= intermediates <= y:\n        return True\n    else:\n        return False\n\n\nfor i in range(1, m + 1):\n    if check_passing_rate(i, x, y, c):\n        print(i)\n        break", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "#include<bits/stdc++.h>\nusing namespace std;\nint main()\n{\n\tint m,c[101],x,y;\n\tcin>>m;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tcin>>c[i];\n\t}\n\tcin>>x>>y;\n\tsort(c+1,c+m+1);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tif(c[i]>0)\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t\tif(i==m)\n\t\t{\n\t\t\tcout<<0<<endl;\n\t\t\treturn 0;\n\t\t}\n\t}\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tif(c[i]>0)\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t\tif(i==m)\n\t\t{\n\t\t\tcout<<0<<endl;\n\t\t\treturn 0;\n\t\t}\n\t}\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tif(c[i]>0)\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t\tif(i==m)\n\t\t{\n\t\t\tcout<<0<<endl;\n\t\t\treturn 0;\n\t\t}\n\t}\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tif(c[i]>0)\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t\tif(i==m)\n\t\t{\n\t\t\tcout<<0<<endl;\n\t\t\treturn 0;\n\t\t}\n\t}\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tif(c[i]>0)\n", "\ndef main():\n    m = int(input())\n    c = list(map(int, input().split()))\n    x = int(input())\n    y = int(input())\n    for i in range(1, m + 1):\n        if c[i - 1] == 0:\n            c[i - 1] = m + 1\n    c.sort()\n    if c[m - 1] < x or c[0] > y:\n        print(0)\n    else:\n        for i in range(1, m + 1):\n            if c[i - 1] < x:\n                c[i - 1] = x\n            if c[i - 1] > y:\n                c[i - 1] = y\n        for i in range(1, m + 1):\n            print(c[i - 1], end=\" \")\n\n\nif __name__ == \"__main__\":\n    main()", "import math\n\nn = int(input())\na = list(map(int, input().split()))\nx, y = list(map(int, input().split()))\n\nif sum(a) < x or sum(a) > y:\n    print(0)\nelse:\n    for i in range(1, n+1):\n        if sum(a[:i]) >= x and sum(a[:i]) <= y:\n            print(i)\n            break", "\ndef get_passing_rate():\n    m = int(input())\n    c = list(map(int, input().split()))\n    x, y = list(map(int, input().split()))\n\n    if sum(c) == 0:\n        return 0\n\n    c.sort(reverse=True)\n\n    for i in range(1, m + 1):\n        if sum(c[:i]) >= x and sum(c[:i]) <= y:\n            return i\n\n    return 0\n\nprint(get_passing_rate())\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"], "rewards": [0.5517241379310345, 0.0, 0.0, 0.0, 0.0, 0.41379310344827586, 0.3103448275862069], "train rewards": [0.10344827586206896, 0.0, 0.0, 0.0, 0.0, 0.10344827586206896, 0.06896551724137931], "time": [11.60844087600708, 24.305474519729614, 49.56597924232483, 75.17689943313599, 100.0066933631897, 107.43809413909912, 132.75355529785156], "sample times": 7}