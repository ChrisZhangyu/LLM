{"codes": ["\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\nfriends = set()\nfor i in range(m):\n    a, b = map(int, sys.stdin.readline().split())\n    friends.add((a, b))\n    friends.add((b, a))\n\nfor i in range(1, n + 1):\n    for j in range(i + 1, n + 1):\n        if (i, j) not in friends:\n            continue\n        for k in range(j + 1, n + 1):\n            if (i, k) not in friends:\n                continue\n            if (j, k) not in friends:\n                continue\n            if (i, j) not in friends:\n                continue\n            if (i, k) not in friends:\n                continue\n            if (j, i) not in friends:\n                continue\n            if (j, k) not in friends:\n                continue\n            if (k, i) not in friends:\n                continue\n            if (k, j) not in friends:\n                continue\n            if (k, i) not in friends:\n                continue\n            if (k, j) not in friends:\n                continue\n            if (i, j) not in friends:\n                continue\n            if (i, k) not in friends:\n                continue\n            if (j, i) not in friends:\n                continue\n            if (j, k) not in friends:\n                continue\n            if (k, i) not in friends:\n                continue\n            if (k, j) not in friends:\n                continue\n            if (i, j) not in friends:\n                continue\n            if", "class Solution(object):\n    def checkFriendship(self, n, m, edges):\n        \"\"\"\n        :type n: int\n        :type m: int\n        :type edges: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        graph = [[] for _ in range(n)]\n        for u, v in edges:\n            graph[u - 1].append(v - 1)\n            graph[v - 1].append(u - 1)\n        for i in range(n):\n            for j in range(i + 1, n):\n                if j not in graph[i]:\n                    continue\n                for k in range(j + 1, n):\n                    if k not in graph[i] or k not in graph[j]:\n                        continue\n                    if k not in graph[i] and k not in graph[j]:\n                        continue\n                    return False\n        return True\n```", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import sys\n\nn, m = map(int, sys.stdin.readline().split())\nfriends = set()\nfor i in range(m):\n    a, b = map(int, sys.stdin.readline().split())\n    friends.add((a, b))\n    friends.add((b, a))\n\nfor i in range(1, n + 1):\n    for j in range(i + 1, n + 1):\n        if (i, j) not in friends:\n            continue\n        for k in range(j + 1, n + 1):\n            if (i, k) not in friends:\n                continue\n            if (j, k) not in friends:\n                continue\n            if (i, j) not in friends:\n                continue\n            if (i, k) not in friends:\n                continue\n            if (j, i) not in friends:\n                continue\n            if (j, k) not in friends:\n                continue\n            if (k, i) not in friends:\n                continue\n            if (k, j) not in friends:\n                continue\n            if (k, i) not in friends:\n                continue\n            if (k, j) not in friends:\n                continue\n            if (i, j) not in friends:\n                continue\n            if (i, k) not in friends:\n                continue\n            if (j, i) not in friends:\n                continue\n            if (j, k) not in friends:\n                continue\n            if (k, i) not in friends:\n                continue\n            if (k, j) not in friends:\n                continue\n            if (i, j) not in friends:\n                continue\n            if (", "\nclass Solution(object):\n    def checkFriendship(self, n, m, a, b):\n        \"\"\"\n        :type n: int\n        :type m: int\n        :type a: List[int]\n        :type b: List[int]\n        :rtype: bool\n        \"\"\"\n        if n < 3 or m < 0 or m > n * (n - 1) / 2:\n            return False\n        if m == 0:\n            return True\n        graph = {}\n        for i in range(m):\n            if a[i] not in graph:\n                graph[a[i]] = []\n            if b[i] not in graph:\n                graph[b[i]] = []\n            graph[a[i]].append(b[i])\n            graph[b[i]].append(a[i])\n        for i in range(1, n + 1):\n            if i not in graph:\n                continue\n            for j in range(i + 1, n + 1):\n                if j not in graph:\n                    continue\n                if j in graph[i] and i in graph[j]:\n                    return True\n        return False", "class Solution:\n    def checkFriendship(self, n: int, m: int, a: List[int], b: List[int]) -> bool:\n        g = [[] for _ in range(n)]\n        for i in range(m):\n            g[a[i] - 1].append(b[i] - 1)\n            g[b[i] - 1].append(a[i] - 1)\n        for i in range(n):\n            for j in range(i + 1, n):\n                if j not in g[i]:\n                    continue\n                for k in range(j + 1, n):\n                    if k not in g[i] or k not in g[j]:\n                        continue\n                    if k not in g[i] and k not in g[j]:\n                        continue\n                    return False\n        return True\n```"], "rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "train rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "time": [21.49849557876587, 41.7361741065979, 64.12598538398743, 86.45508003234863, 108.81832551956177, 130.55441570281982], "sample times": 6}