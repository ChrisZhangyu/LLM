{"codes": ["\nclass Solution(object):\n    def solve(self, cipher):\n        \"\"\"\n        :type cipher: str\n        :rtype: str\n        \"\"\"\n        n = len(cipher)\n        cipher = list(cipher)\n        for i in xrange(n):\n            if cipher[i] == \"?\":\n                for j in xrange(i + 1, n):\n                    if cipher[j] == \")\":\n                        cipher[j] = \"(\"\n                        break\n                    elif cipher[j] == \"(\":\n                        cipher[j] = \")\"\n                        break\n                else:\n                    return \":(\"\n        return \"\".join(cipher)\n\n\nif __name__ == \"__main__\":\n    import sys\n\n    f = open(\"1.in\", \"r\")\n    # f = sys.stdin\n    solution = Solution()\n    testcases = int(f.readline().strip())\n\n    for t in xrange(testcases):\n        cipher = f.readline().strip()\n\n        # solve\n        s = \"%s\\n\" % (solution.solve(cipher))\n        print s,", "import sys\n\ns = sys.stdin.readline().strip()\ns = list(s)\n\nfor i in range(len(s)):\n    if s[i] == '?':\n        if s[i-1] == '(':\n            s[i] = ')'\n        else:\n            s[i] = '('\n\ns = ''.join(s)\n\nif eval(s) == 0:\n    print(':(')\nelse:\n    print(s)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "class Solution(object):\n    def solve(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        s = list(s)\n        for i in range(len(s)):\n            if s[i] == '?':\n                s[i] = ')' if s[i - 1] == '(' else '('\n        return ''.join(s)\n```", "\nimport sys\n\nn = int(sys.stdin.readline().strip())\ns = sys.stdin.readline().strip()\n\ndef check(s):\n    stack = []\n    for i in range(len(s)):\n        if s[i] == '(':\n            stack.append(s[i])\n        elif s[i] == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n\nfor i in range(n):\n    if s[i] == '?':\n        if check(s[:i] + '(' + s[i+1:]):\n            s = s[:i] + '(' + s[i+1:]\n        elif check(s[:i] + ')' + s[i+1:]):\n            s = s[:i] + ')' + s[i+1:]\n        else:\n            s = s[:i] + '(' + s[i+1:]\n\nif check(s):\n    print(s)\nelse:\n    print(':(')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```", "\nimport sys\n\ns = sys.stdin.readline().strip()\nif '?' not in s:\n    print ':('\nelse:\n    for i in range(len(s)):\n        if s[i] == '?':\n            s = s[:i] + '(' + s[i + 1:]\n            break\n    for i in range(len(s) - 1, -1, -1):\n        if s[i] == '?':\n            s = s[:i] + ')' + s[i + 1:]\n            break\n    print s"], "rewards": [0.0, 0.0, 0.0, 0.8095238095238095, 0.0, 0.0], "train rewards": [0.0, 0.0, 0.0, 0.6666666666666666, 0.0, 0.0], "time": [18.29538893699646, 41.587629556655884, 48.98854970932007, 72.11954855918884, 76.08477807044983, 85.28592801094055], "sample times": 6}