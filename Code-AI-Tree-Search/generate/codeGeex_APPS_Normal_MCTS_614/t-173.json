{"codes": ["\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\n\nhorizontal = list(sys.stdin.readline().strip())\nvertical = list(sys.stdin.readline().strip())\n\n\ndef check(horizontal, vertical):\n    for i in range(n):\n        if horizontal[i] == '>' and horizontal[i + 1] == '<':\n            return False\n        if horizontal[i] == '<' and horizontal[i + 1] == '>':\n            return False\n    for i in range(m):\n        if vertical[i] == '^' and vertical[i + 1] == 'v':\n            return False\n        if vertical[i] == 'v' and vertical[i + 1] == '^':\n            return False\n    return True\n\n\nif check(horizontal, vertical):\n    print(\"YES\")\nelse:\n    print(\"NO\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import sys\n\nn, m = map(int, sys.stdin.readline().split())\n\nhorizontal = sys.stdin.readline().strip()\nvertical = sys.stdin.readline().strip()\n\n\ndef check(horizontal, vertical):\n    for i in range(n):\n        if horizontal[i] == '>' and horizontal[i + 1] == '<':\n            return False\n        if horizontal[i] == '<' and horizontal[i + 1] == '>':\n            return False\n    for i in range(m):\n        if vertical[i] == '^' and vertical[i + 1] == 'v':\n            return False\n        if vertical[i] == 'v' and vertical[i + 1] == '^':\n            return False\n    return True\n\n\nif check(horizontal, vertical):\n    print(\"YES\")\nelse:\n    print(\"NO\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "class Solution(object):\n    def traffic(self, n, m, h, v):\n        \"\"\"\n        :type n: int\n        :type m: int\n        :type h: str\n        :type v: str\n        :rtype: bool\n        \"\"\"", "\ndef main():\n    n, m = [int(x) for x in input().split()]\n    horizontal = [x for x in input()]\n    vertical = [x for x in input()]\n    for i in range(n):\n        if horizontal[i] == '>':\n            horizontal[i] = 1\n        else:\n            horizontal[i] = -1\n    for i in range(m):\n        if vertical[i] == '^':\n            vertical[i] = 1\n        else:\n            vertical[i] = -1\n    for i in range(n):\n        for j in range(m):\n            if horizontal[i] == 1 and vertical[j] == 1:\n                horizontal[i] = 0\n                vertical[j] = 0\n    for i in range(n):\n        for j in range(m):\n            if horizontal[i] == -1 and vertical[j] == -1:\n                horizontal[i] = 0\n                vertical[j] = 0\n    for i in range(n):\n        for j in range(m):\n            if horizontal[i] == 1 and vertical[j] == -1:\n                horizontal[i] = 0\n                vertical[j] = 0\n    for i in range(n):\n        for j in range(m):\n            if horizontal[i] == -1 and vertical[j] == 1:\n                horizontal[i] = 0\n                vertical[j] = 0\n    for i in range(n):\n        if horizontal[i] == 1:\n            horizontal[i] = 0\n    for i in range(m):\n        if vertical[i] == 1:\n            vertical[i] = 0\n    for i in range(n):\n        if horizontal[i] == -1:\n            horizontal[i] = 0\n    for i in range(m):\n        if vertical[i] == -1:\n            vertical[i] = 0\n    for i in range(n):\n        if horizontal[i] == 0:\n            horizontal[i] = 1\n    for i in range(m):\n        if vertical[i] == 0:\n            vertical[i] = 1"], "rewards": [0.6585365853658537, 0.0, 0.6585365853658537, 0.0, 0.0], "train rewards": [0.45, 0.0, 0.45, 0.0, 0.0], "time": [30.497806310653687, 61.64034342765808, 92.6518280506134, 107.51652216911316, 138.6797366142273], "sample times": 5}