{"codes": ["\nimport sys\n\nn = int(sys.stdin.readline().strip())\na = list(map(int, sys.stdin.readline().strip().split()))\n\ndef check(x):\n    if x == 0:\n        return True\n    elif x == 1:\n        return False\n    else:\n        return check(x - 1) and check(x - 2)\n\nif check(a[n - 1]):\n    print(\"YES\")\n    for i in range(n - 1, 0, -1):\n        if a[i] == 0:\n            print(\"0\")\n        elif a[i] == 1:\n            print(\"1\")\n        else:\n            print(\"(\")\n            check(a[i - 1])\n            print(\"->\")\n            check(a[i - 2])\n            print(\"", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "#include<bits/stdc++.h>\nusing namespace std;\nint main()\n{\n\tint n;\n\tcin>>n;\n\tint a[n+1];\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tcin>>a[i];\n\t}\n\tif(a[1]==0)\n\t{\n\t\tcout<<\"NO\";\n\t\treturn 0;\n\t}\n\tif(a[1]==1)\n\t{\n\t\tcout<<\"YES\"<<endl<<\"1\";\n\t\treturn 0;\n\t}\n\tfor(int i=2;i<=n;i++)\n\t{\n\t\tif(a[i]==0)\n\t\t{\n\t\t\tcout<<\"NO\";\n\t\t\treturn 0;\n\t\t}\n\t\tif(a[", "import sys\n\nn = int(sys.stdin.readline().strip())\n\na = list(map(int, sys.stdin.readline().strip().split()))\n\n\ndef is_correct(expression):\n    if expression == '0' or expression == '1':\n        return True\n    if expression[0] == '(' and expression[-1] == ')':\n        return is_correct(expression[1:-1])\n    if expression[0] == '-' and expression[1] == '>':\n        return is_correct(expression[2:])\n    if expression[0] == '>' and expression[1] == '-':\n        return is_correct(expression[2:])\n    return False\n\n\ndef get_result(expression):\n    if expression == '0':\n        return 0\n    if expression == '1':\n        return", "\n#include<bits/stdc++.h>\nusing namespace std;\nint main()\n{\n\tint n;\n\tcin>>n;\n\tint a[n+1];\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tcin>>a[i];\n\t}\n\tif(a[1]==0)\n\t{\n\t\tcout<<\"NO\";\n\t\treturn 0;\n\t}\n\tif(a[1]==1)\n\t{\n\t\tcout<<\"YES\"<<endl<<\"1\";\n\t\treturn 0;\n\t}\n\tfor(int i=2;i<=n;i++)\n\t{\n\t\tif(a[i]==0)\n\t\t{\n\t\t\tcout<<\"NO\";\n\t\t\treturn 0;\n\t\t}\n\t\tif(a", "\n\ndef is_correct(expr):\n    if expr == '0' or expr == '1':\n        return True\n    if expr[0] == '(' and expr[-1] == ')' and is_correct(expr[1:-1]):\n        return True\n    if expr[0] == '0' and expr[-1] == '>' and is_correct(expr[1:-1]):\n        return True\n    if expr[0] == '1' and expr[-1] == '>' and is_correct(expr[1:-1]):\n        return True\n    return False\n\n\ndef is_valid(expr):\n    stack = []\n    for char in expr:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return", "#include <bits/stdc++.h>\nusing namespace std;\nint main()\n{\n    int n;\n    cin >> n;\n    int a[n];\n    for (int i = 0; i < n; i++)\n    {\n        cin >> a[i];\n    }\n    if (a[0] == 1)\n    {\n        cout << \"NO\";\n        return 0;\n    }\n    if (n == 1)\n    {\n        cout << \"YES\" << endl << a[0];\n        return 0;\n    }\n    if (n == 2)\n    {\n        cout << \"YES\" << endl << \"(\" << a[0] << \"->\" << a[1] << \")\";\n        return 0;\n    }\n    for (int i = 0; i < n; i++)", "\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint main()\n{\n\tint n;\n\tcin>>n;\n\tint a[n+1];\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tcin>>a[i];\n\t}\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tif(a[i]==0)\n\t\t{\n\t\t\tcout<<\"NO\"<<endl;\n\t\t\treturn 0;\n\t\t}\n\t}\n\tcout<<\"YES\"<<endl;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tif(i==1)\n\t\t{\n\t\t\tcout<<a[i];\n\t\t}\n\t\telse\n\t\t{"], "rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "train rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "time": [12.413958311080933, 25.90732455253601, 39.314656019210815, 52.860960960388184, 67.12234401702881, 80.74712753295898, 94.62337946891785, 108.35810995101929], "sample times": 8}