{"codes": ["\nimport sys\n\nm = [int(x) for x in sys.stdin.readline().split()]\nw = [int(x) for x in sys.stdin.readline().split()]\nh_s, h_u = [int(x) for x in sys.stdin.readline().split()]\n\nscore = 0\nfor i in range(5):\n    score += max(0.3 * m[i], (1 - m[i] / 250) * m[i] - 50 * w[i])\nscore += 100 * h_s\nscore -= 50 * h_u\nprint(int(score))", "import sys\n\nm1, m2, m3, m4, m5 = map(int, sys.stdin.readline().split())\nw1, w2, w3, w4, w5 = map(int, sys.stdin.readline().split())\nhs, hu = map(int, sys.stdin.readline().split())\n\nscore = 0\n\nscore += max(0.3 * 500, (1 - m1 / 250) * 500 - 50 * w1)\nscore += max(0.3 * 1000, (1 - m2 / 250) * 1000 - 50 * w2)\nscore += max(0.3 * 1500, (1 - m3 / 250) * 1500 - 50 * w3)\nscore +=", "def main():\n    m1, m2, m3, m4, m5 = map(int, input().split())\n    w1, w2, w3, w4, w5 = map(int, input().split())\n    hs, hu = map(int, input().split())\n\n    score = 0\n    score += max(0.3 * 500, (1 - m1 / 250) * 500 - 50 * w1)\n    score += max(0.3 * 1000, (1 - m2 / 250) * 1000 - 50 * w2)\n    score += max(0.3 * 1500, (1 - m3 / 250) * 1500 - 50 * w3)\n    score += max(0.3 * 2000", "\ndef main():\n    m1, m2, m3, m4, m5 = list(map(int, input().split()))\n    w1, w2, w3, w4, w5 = list(map(int, input().split()))\n    hs, hu = list(map(int, input().split()))\n    score = 0\n    score += max(0.3 * 500, (1 - m1 / 250) * 500 - 50 * w1)\n    score += max(0.3 * 1000, (1 - m2 / 250) * 1000 - 50 * w2)\n    score += max(0.3 * 1500, (1 - m3 / 250) * 1500 - 50 * w3)\n    score += max(0.3", "import math\n\nm = list(map(int, input().split()))\nw = list(map(int, input().split()))\nh_s, h_u = map(int, input().split())\n\nscore = 0\n\nfor i in range(5):\n    score += max(0.3 * m[i], (1 - m[i] / 250) * m[i] - 50 * w[i])\n\nscore += 100 * h_s\nscore -= 50 * h_u\n\nprint(int(score))", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"], "rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "train rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "time": [13.542228698730469, 26.751922607421875, 39.74090886116028, 52.97839617729187, 65.96149230003357, 79.4118766784668], "sample times": 6}