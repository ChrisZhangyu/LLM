{"codes": ["\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\n\npoints = []\n\nfor i in range(n + 1):\n    for j in range(m + 1):\n        points.append((i, j))\n\nmax_length = 0\n\nfor i in range(len(points)):\n    for j in range(i + 1, len(points)):\n        for k in range(j + 1, len(points)):\n            for l in range(k + 1, len(points)):\n                length = abs(points[i][0] - points[j][0]) + abs(points[i][1] - points[j][1])\n                length += abs(points[i][0] - points[k][0]) + abs(points[i][1] - points[k][1])\n                length += abs(points[i][0] - points[l][0]) + abs(points[i][1] - points[l][1])\n                length += abs(points[j][0] - points[k][0]) + abs(points[j][1] - points[k][1])\n                length += abs(points[j][0] - points[l][0]) + abs(points[j][1] - points[l][1])\n                length += abs(points[k][0] - points[l][0]) + abs(points[k][1] - points[l][1])\n                if length > max_length:\n                    max_length = length\n                    print(points[i][0], points[i][1], points[j][0], points[j][1], points[k][0],\n                          points[k][1], points[l][0], points[l][1])\n                    # print(points[i], points[j], points[k], points[l])\n                    # print(abs(points[i][0] - points[j][0]) + abs(points[i][1] - points[j][1]))\n                    # print(abs(points[i][0] - points[k][0]) + abs(points[i][1] - points[k][1]))\n                    # print(abs(points[i][0] - points[l][0]) + abs(points[i][1] - points[l][1]))\n                    # print(abs(points[j][0] - points[k][0]) + abs(points[j][1] - points[k][1]))\n                    # print(abs(points[j][0] - points[l][0]) + abs(points[j][1] - points[l][1]))\n                    # print(abs(points[k][0] - points[l][0]) + abs(points[k][1] - points[l][1]))", "import sys\n\nn, m = [int(i) for i in sys.stdin.readline().split()]\npoints = []\nfor i in range(n + 1):\n    for j in range(m + 1):\n        points.append((i, j))\n\nmax_length = 0\nfor i in range(len(points)):\n    for j in range(i + 1, len(points)):\n        for k in range(j + 1, len(points)):\n            for l in range(k + 1, len(points)):\n                length = abs(points[i][0] - points[j][0]) + abs(points[i][1] - points[j][1])\n                length += abs(points[i][0] - points[k][0]) + abs(points[i][1] - points[k][1])\n                length += abs(points[i][0] - points[l][0]) + abs(points[i][1] - points[l][1])\n                length += abs(points[j][0] - points[k][0]) + abs(points[j][1] - points[k][1])\n                length += abs(points[j][0] - points[l][0]) + abs(points[j][1] - points[l][1])\n                length += abs(points[k][0] - points[l][0]) + abs(points[k][1] - points[l][1])\n                if length > max_length:\n                    max_length = length\n                    print(points[i][0], points[i][1], points[j][0], points[j][1], points[k][0],\n                          points[k][1], points[l][0], points[l][1])\n                    # print(points[i], points[j], points[k], points[l])\n                    # print(abs(points[i][0] - points[j][0]) + abs(points[i][1] - points[j][1]))\n                    # print(abs(points[i][0] - points[k][0]) + abs(points[i][1] - points[k][1]))\n                    # print(abs(points[i][0] - points[l][0]) + abs(points[i][1] - points[l][1]))\n                    # print(abs(points[j][0] - points[k][0]) + abs(points[j][1] - points[k][1]))\n                    # print(abs(points[j][0] - points[l][0]) + abs(points[j][1] - points[l][1]))\n                    # print(abs(points[k][0] - points[l][0]) + abs(points[k][1] - points[l][1]))", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "0 0\n1 0\n0 1\n1 1\n\"\"\"\n\n\ndef main():\n    n, m = map(int, input().split())\n    points = []\n    for i in range(n + 1):\n        for j in range(m + 1):\n            points.append((i, j))\n    points.sort(key=lambda x: x[0] * x[0] + x[1] * x[1])\n    print(points)\n\n\nif __name__ == \"__main__\":\n    main()", "import math\n\nn, m = [int(i) for i in input().split()]\npoints = []\n\nfor i in range(n + 1):\n    for j in range(m + 1):\n        points.append((i, j))\n\npoints.sort(key=lambda x: math.sqrt(x[0] * x[0] + x[1] * x[1]))\n\nprint(points[0])\nprint(points[1])\nprint(points[2])\nprint(points[3])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\ndef main():\n    n, m = [int(x) for x in input().split()]\n    points = []\n    for i in range(n + 1):\n        for j in range(m + 1):\n            points.append((i, j))\n    points.sort(key=lambda x: x[0] * x[0] + x[1] * x[1], reverse=True)\n    print(points[0][0], points[0][1], points[1][0], points[1][1])\n    print(points[1][0], points[1][1], points[2][0], points[2][1])\n    print(points[2][0], points[2][1], points[3][0], points[3][1])\n    print(points[3][0], points[3][1], points[0][0], points[0][1])\n\n\nif __name__ == '__main__':\n    main()\n\n\"\"\"\n\n\ndef main():\n    n, m = [int(x) for x in input().split()]\n    points = []\n    for i in range(n + 1):\n        for j in range(m + 1):\n            points.append((i, j))\n    points.sort(key=lambda x: x[0] * x[0] + x[1] * x[1], reverse=True)\n    print(points[0][0], points[0][1], points[1][0], points[1][1])\n    print(points[1][0], points[1][1], points[2][0], points[2][1])\n    print(points[2][0], points[2][1], points[3][0], points[3][1])\n    print(points[3][0], points[3][1], points[0][0], points[0][1])\n\n\nif __name__ == \"__main__\":\n    main()", "\nimport math\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\n\n\ndef get_distance(p1, p2):\n    return math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2)\n\n\npoints = []\nfor i in range(n + 1):\n    for j in range(m + 1):\n        points.append((i, j))\n\nmax_distance = 0\nfor i in range(len(points)):\n    for j in range(i + 1, len(points)):\n        for k in range(j + 1, len(points)):\n            for l in range(k + 1, len(points)):\n                d1 = get_distance(points[i], points[j])\n                d2 = get_distance(points[j], points[k])\n                d3 = get_distance(points[k], points[l])\n                d4 = get_distance(points[l], points[i])\n                if d1 + d2 + d3 + d4 > max_distance:\n                    max_distance = d1 + d2 + d3 + d4\n                    p1 = points[i]\n                    p2 = points[j]\n                    p3 = points[k]\n                    p4 = points[l]\n\nprint(p1[0], p1[1])\nprint(p2[0], p2[1])\nprint(p3[0], p3[1])\nprint(p4[0], p4[1])"], "rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "train rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "time": [34.67027425765991, 79.8765058517456, 125.43265080451965, 134.48785519599915, 170.49632716178894, 201.38842868804932, 224.04829025268555], "sample times": 7}