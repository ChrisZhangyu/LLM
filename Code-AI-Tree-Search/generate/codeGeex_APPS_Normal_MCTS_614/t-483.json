{"codes": ["\nimport sys\n\nn = int(sys.stdin.readline().strip())\ndirection = sys.stdin.readline().strip()\ncoordinates = sys.stdin.readline().strip().split()\ncoordinates = [int(x) for x in coordinates]\ncoordinates = sorted(coordinates)\n\ndef collision(coordinates):\n    for i in range(len(coordinates) - 1):\n        if coordinates[i] == coordinates[i + 1]:\n            return coordinates[i]\n    return -1\n\nif collision(coordinates) == -1:\n    print(-1)\nelse:\n    for i in range(len(coordinates) - 1):\n        if direction[i] == direction[i + 1]:\n            if direction[i] == \"L\":\n                if coordinates[i] > coordinates[i + 1]:\n                    print(coordinates[i] - coordinates[i + 1])\n                else:\n                    print(coordinates[i + 1] - coordinates[i])\n            else:\n                if coordinates[i] > coordinates[i + 1]:\n                    print(coordinates[i + 1] - coordinates[i])\n                else:\n                    print(coordinates[i] - coordinates[i + 1])\n        else:\n            if direction[i] == \"L\":\n                if coordinates[i] > coordinates[i + 1]:\n                    print(coordinates[i] - coordinates[i + 1])\n                else:\n                    print(coordinates[i + 1] - coordinates[i])\n            else:\n                if", "import sys\n\nn = int(sys.stdin.readline().strip())\ndirection = sys.stdin.readline().strip()\ncoordinates = sys.stdin.readline().strip().split()\ncoordinates = [int(x) for x in coordinates]\ncoordinates = sorted(coordinates)\n\ncollision_time = sys.maxsize\n\nfor i in range(n):\n    for j in range(i + 1, n):\n        if direction[i] == direction[j]:\n            continue\n        if coordinates[i] > coordinates[j]:\n            coordinates[i], coordinates[j] = coordinates[j], coordinates[i]\n            direction[i], direction[j] = direction[j], direction[i]\n\n        if (coordinates[j] - coordinates[i]) % 2 == 0:\n            collision_time = min(collision_time, (coordinates[j] - coordinates[i]) // 2)\n\nif collision_time == sys.maxsize:\n    print(-1)\nelse:\n    print(collision_time)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import math\n\nn = int(input())\ndirection = list(input())\nx = list(map(int, input().split()))\n\nx.sort()\n\nif x[0] != 0:\n    print(-1)\nelse:\n    for i in range(n - 1):\n        if x[i + 1] - x[i] < 0:\n            print(-1)\n            break\n        elif x[i + 1] - x[i] == 0:\n            if direction[i] == direction[i + 1]:\n                print(-1)\n                break\n            else:\n                print(math.ceil((x[i + 1] - x[i]) / 1000000))\n                break\n        else:\n            print(math.ceil((x[i + 1] - x[i]) / 1000000))\n            break", "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nint main()\n{\n    int n;\n    cin >> n;\n    vector<int> v(n);\n    for (int i = 0; i < n; i++)\n    {\n        char c;\n        cin >> c;\n        if (c == 'L')\n        {\n            v[i] = -1;\n        }\n        else\n        {\n            v[i] = 1;\n        }\n    }\n\n    vector<int> x(n);\n    for (int i = 0; i < n; i++)\n    {\n        cin >> x[i];\n    }\n\n    sort(x.begin(), x.end());\n    sort(v.begin(), v.end());\n\n    int ans = -1;\n    for (int i = 0; i < n - 1; i++)\n    {\n        if (v[i] == 0)\n        {\n            continue;\n        }\n\n        if (v[i] * v[i + 1] < 0)\n        {\n            ans = max(ans, x[i + 1] - x[i]);\n        }\n    }\n\n    cout << ans << endl;\n\n    return 0;\n}", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import sys\nimport math\n\nn = int(sys.stdin.readline().strip())\ndirection = sys.stdin.readline().strip()\nx = sys.stdin.readline().strip().split()\nx = [int(i) for i in x]\nx.insert(0, 0)\nx.append(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "import sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    directions = sys.stdin.readline().strip()\n    coordinates = sys.stdin.readline().strip().split()\n    coordinates = [int(x) for x in coordinates]\n    coordinates = sorted(coordinates)\n    print(coordinates)\n\n\nif __name__ == '__main__':\n    main()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"], "rewards": [0.0, 0.9166666666666666, 0.125, 0.0, 0.0, 0.0, 0.0], "train rewards": [0.0, 0.6086956521739131, 0.08695652173913043, 0.0, 0.0, 0.0, 0.0], "time": [21.753589630126953, 43.220299243927, 58.07660627365112, 76.85201215744019, 98.45390605926514, 119.79563736915588, 141.2644784450531], "sample times": 7}