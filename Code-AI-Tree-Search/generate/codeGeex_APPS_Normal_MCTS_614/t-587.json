{"codes": ["import sys\n\nN, K = map(int, sys.stdin.readline().split())\n\nsushi = []\nfor i in range(N):\n    t, d = map(int, sys.stdin.readline().split())\n    sushi.append((t, d))\n\nsushi.sort(key=lambda x: x[1], reverse=True)\n\nsatisfaction = 0\nfor i in range(K):\n    satisfaction += sushi[i][1]\n    if i < K - 1:\n        satisfaction += sushi[i + 1][0] * sushi[i + 1][0]\n\nprint(satisfaction)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\nimport sys\n\nn, k = map(int, sys.stdin.readline().split())\nsushi = []\n\nfor i in range(n):\n    sushi.append(list(map(int, sys.stdin.readline().split())))\n\nsushi.sort(key=lambda x: x[1], reverse=True)\n\nsatisfaction = 0\n\nfor i in range(k):\n    satisfaction += sushi[i][1]\n\nfor i in range(k, n):\n    satisfaction += sushi[i][1] * sushi[i][1]\n\nprint(satisfaction)", "#!/usr/bin/env python3\n\nimport sys\n\nN, K = map(int, sys.stdin.readline().split())\n\nsushi = []\nfor _ in range(N):\n    sushi.append(list(map(int, sys.stdin.readline().split())))\n\nsushi.sort(key=lambda x: x[1], reverse=True)\n\nsatisfaction = 0\n\nfor i in range(K):\n    satisfaction += sushi[i][1]\n    sushi[i][1] = 0\n\nfor i in range(K, N):\n    satisfaction += sushi[i][1] * sushi[i][1]\n\nprint(satisfaction)", "\n\"\"\"", "import sys\n\nn, k = map(int, sys.stdin.readline().split())\n\nsushi = []\nfor i in range(n):\n    sushi.append(list(map(int, sys.stdin.readline().split())))\n\nsushi.sort(key=lambda x: x[1], reverse=True)\n\nsatisfaction = 0\nfor i in range(k):\n    satisfaction += sushi[i][1]\n    sushi[i][1] = 0\n\nfor i in range(k, n):\n    satisfaction += sushi[i][1] * sushi[i][1]\n    sushi[i][1] = 0\n\nfor i in range(n):\n    if sushi[i][0] != 0:\n        satisfaction += sushi[i][0] * sushi[i][0]\n        sushi[i][0] = 0\n\nprint(satisfaction)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import sys\n\ndef main():\n    n, k = [int(x) for x in sys.stdin.readline().split()]\n    toppings = []\n    for i in range(n):\n        toppings.append([int(x) for x in sys.stdin.readline().split()])\n    toppings.sort(key=lambda x: x[1], reverse=True)\n    toppings = toppings[:k]\n    toppings.sort(key=lambda x: x[0])\n    satisfaction = 0\n    for i in range(len(toppings)):\n        satisfaction += toppings[i][1]\n        satisfaction += toppings[i][1] * toppings[i][1]\n    print(satisfaction)\n\nif __name__ == '__main__':\n    main()\n\"\"\"\n\n\ndef test_sushi():\n    solution = Solution()\n    assert solution.maxSatisfaction(5, 3, [[1, 9], [1, 7], [2, 6], [2, 5], [3, 1]]) == 26", "import math\n\nn, k = [int(x) for x in input().split()]\nsushi = []\n\nfor i in range(n):\n    sushi.append([int(x) for x in input().split()])\n\nsushi.sort(key=lambda x: x[1], reverse=True)\n\nsatisfaction = 0\n\nfor i in range(k):\n    satisfaction += sushi[i][1]\n    if i == 0:\n        satisfaction += sushi[i][0] * sushi[i][0]\n    else:\n        satisfaction += sushi[i][0] * sushi[i-1][0]\n\nprint(satisfaction)"], "rewards": [0.047619047619047616, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "train rewards": [0.35, 0.0, 0.0, 0.0, 0.05, 0.0, 0.0, 0.45], "time": [33.13543200492859, 46.25464725494385, 59.71602249145508, 69.61874341964722, 103.11826395988464, 138.0787959098816, 156.285888671875, 176.01761484146118], "sample times": 8}