{"codes": ["\nimport sys\n\nn, a, b = map(int, sys.stdin.readline().split())\n\ncreatures = []\n\nfor i in range(n):\n    hp, dmg = map(int, sys.stdin.readline().split())\n    creatures.append((hp, dmg))\n\ncreatures.sort(key=lambda x: x[1], reverse=True)\n\ndp = [0] * n\ndp[0] = creatures[0][1]\n\nfor i in range(1, n):\n    dp[i] = max(dp[i - 1] * 2, creatures[i][1])\n\nfor i in range(a):\n    for j in range(n):\n        dp[j] = max(dp[j - 1] * 2, dp[j] + creatures[j][0])\n\nfor i in range(b):\n    for j in range(n):\n        dp[j] = max(dp[j - 1] + creatures[j][0], dp[j])\n\nprint(dp[n - 1])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import sys\n\nn, a, b = map(int, sys.stdin.readline().split())\ncreatures = []\nfor i in range(n):\n    hp, dmg = map(int, sys.stdin.readline().split())\n    creatures.append((hp, dmg))\n\n\ndef max_damage(creatures, a, b):\n    max_damage = 0\n    for i in range(len(creatures)):\n        hp, dmg = creatures[i]\n        if a > 0:\n            creatures[i] = (hp * 2, dmg)\n            a -= 1\n        if b > 0:\n            creatures[i] = (hp, dmg * hp)\n            b -= 1\n        max_damage += dmg\n    return max_damage\n\n\nprint(max_damage(creatures, a, b))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "class Creature:\n    def __init__(self, hp, dmg):\n        self.hp = hp\n        self.dmg = dmg\n\n    def __lt__(self, other):\n        return self.dmg < other.dmg\n\n    def __eq__(self, other):\n        return self.dmg == other.dmg\n\n    def __gt__(self, other):\n        return self.dmg > other.dmg\n\n    def __le__(self, other):\n        return self.dmg <= other.dmg\n\n    def __ge__(self, other):\n        return self.dmg >= other.dmg\n\n    def __ne__(self, other):\n        return self.dmg != other.dmg\n\n    def __str__(self):\n        return str(self.hp) + \" \" + str(self.dmg)\n\n    def __repr__(self):\n        return str(self.hp) + \" \" + str(self.dmg)\n\n    def __add__(self, other):\n        return Creature(self.hp + other.hp, self.dmg + other.dmg)\n\n    def __sub__(self, other):\n        return Creature(self.hp - other.hp, self.dmg - other.dmg)\n\n    def __mul__(self, other):\n        return Creature(self.hp * other.hp, self.dmg * other.dmg)\n\n    def __truediv__(self, other):\n        return Creature(self.hp / other.hp, self.dmg / other.dmg)\n\n    def __floordiv__(self, other):\n        return Creature(self.hp // other.hp, self.dmg // other.dmg)\n\n    def __mod__(self, other):\n        return", "import math\n\nn, a, b = map(int, input().split())\n\ncreatures = []\n\nfor i in range(n):\n    hp, dmg = map(int, input().split())\n    creatures.append([hp, dmg])\n\ncreatures.sort(key=lambda x: x[1], reverse=True)\n\nmax_dmg = 0\n\nfor i in range(n):\n    hp, dmg = creatures[i]\n\n    if a > 0:\n        hp *= 2\n        a -= 1\n\n    if b > 0:\n        dmg = hp\n        b -= 1\n\n    max_dmg += dmg\n\nprint(max_dmg)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\ndef max_damage(n, a, b):\n    creatures = []\n    for i in range(n):\n        hp, dmg = map(int, input().split())\n        creatures.append((hp, dmg))\n    \n    creatures.sort(key=lambda x: x[1], reverse=True)\n    \n    doubles, assigns = 0, 0\n    damage = 0\n    for hp, dmg in creatures:\n        if doubles < a and hp * 2 > damage:\n            damage += hp * 2\n            doubles += 1\n        elif assigns < b and hp > dmg:\n            damage += hp\n            assigns += 1\n        else:\n            break\n    \n    print(damage)\n    \nmax_damage(int(input()), int(input()), int(input()))\n\"\"\"\n\n\ndef max_damage(n, a, b):\n    creatures = []\n    for i in range(n):\n        hp, dmg = map(int, input().split())\n        creatures.append((hp, dmg))\n\n    creatures.sort(key=lambda x: x[1], reverse=True)\n\n    doubles, assigns = 0, 0\n    damage = 0\n    for hp, dmg in creatures:\n        if doubles < a and hp * 2 > damage:\n            damage += hp * 2\n            doubles += 1\n        elif assigns < b and hp > dmg:\n            damage += hp\n            assigns += 1\n        else:\n            break\n\n    print(damage)", "import sys\n\ndef read_int():\n    return int(sys.stdin.readline())\n\ndef read_ints():\n    return map(int, sys.stdin.readline().split())\n\nn, a, b = read_ints()\ncreatures = []\nfor i in range(n):\n    hp, dmg = read_ints()\n    creatures.append((hp, dmg))\n\nmax_damage = 0\nfor i in range(len(creatures)):\n    hp, dmg = creatures[i]\n    if a > 0:\n        hp *= 2\n        a -= 1\n    if b > 0:\n        dmg += hp\n        b -= 1\n    max_damage = max(max_damage, dmg)\n\nprint(max_damage)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"], "rewards": [0.0, 0.17391304347826086, 0.0, 0.0, 0.30434782608695654, 0.0, 0.0], "train rewards": [0.043478260869565216, 0.43478260869565216, 0.0, 0.0, 0.43478260869565216, 0.0, 0.17391304347826086], "time": [22.662794828414917, 47.537622928619385, 71.10920739173889, 94.71659064292908, 118.55078315734863, 140.86439442634583, 164.44536876678467], "sample times": 7}