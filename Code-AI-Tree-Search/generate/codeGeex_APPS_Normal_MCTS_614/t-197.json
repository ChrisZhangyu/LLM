{"codes": ["\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nconst int mod=998244353;\nconst int maxn=55;\nint n,l[maxn],r[maxn];\nint gcd(int a,int b)\n{\n\treturn b?gcd(b,a%b):a;\n}\nint main()\n{\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++)\n\t\tscanf(\"%d%d\",&l[i],&r[i]);\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=i+1;j<=n;j++)\n\t\t\tif(l[i]>l[j])\n\t\t\t\tswap(l[i],l[j]);\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=i+1;j<=n;j++)\n\t\t\tif(r[i]<r[j])\n\t\t\t\tswap(r[i],r[j]);\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int j=i+1;j<=n;j++)\n\t\t\tif(l[i]>l[j])\n\t\t\t\tswap(l[i],l[j]);\n\tfor(int i=1;i<=n;i++)\n\t\t", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```", "import fractions\n\nn = int(input())\nl = []\nr = []\nfor i in range(n):\n    l.append(int(input()))\nfor i in range(n):\n    r.append(int(input()))\n\nx = 1\ny = 1\nfor i in range(n):\n    x *= r[i] - l[i] + 1\n    y *= r[i] - l[i] + 1\n    y *= r[i] - l[i] + 1\n    y *= r[i] - l[i] + 1\n    y *= r[i] - l[i] + 1\n    y *= r[i] - l[i] + 1\n    y *= r[i] - l[i] + 1\n    y *= r[i] - l[i] + 1\n    y *= r[i] - l[i] + 1\n    y *= r[i] - l[i] + 1\n    y *= r[i] - l[i] + 1\n    y *= r[i] - l[i] + 1\n    y *= r[i] - l[i] + 1\n    y *= r[i] - l[i] + 1\n    y *= r[i] - l[i] + 1\n    y *= r[i] - l[i] + 1\n    y *= r[i] - l[i] + 1", "\nimport fractions\n\nn = int(raw_input())\nl = []\nr = []\nfor i in range(n):\n    l.append(int(raw_input()))\nfor i in range(n):\n    r.append(int(raw_input()))\n\nl = sorted(l)\nr = sorted(r)\n\nans = 1\nfor i in range(n):\n    ans = ans * (r[i] - l[i] + 1) % 998244353\n\nprint(fractions.Fraction(ans).limit_denominator(998244353).numerator)", "#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nconst int mod=998244353;\nconst int maxn=55;\nint n,l[maxn],r[maxn];\nint gcd(int a,int b)\n{\n    if(b==0) return a;\n    return gcd(b,a%b);\n}\nint main()\n{\n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;i++)\n        scanf(\"%d%d\",&l[i],&r[i]);\n    for(int i=1;i<=n;i++)\n        for(int j=i+1;j<=n;j++)\n            if(l[i]>l[j])\n                swap(l[i],l[j]),swap(r[i],r[j]);\n    ll ans=1;\n    for(int i=1;i<=n;i++)\n        ans=ans*(r[i]-l[i]+1)%mod;\n    int g=gcd(ans,mod);\n    ans/=g;\n    mod/=g;\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n```", "import sys\n\nn = int(sys.stdin.readline().strip())\nl, r = [], []\nfor i in range(n):\n    l.append(int(sys.stdin.readline().strip().split()[0]))\n    r.append(int(sys.stdin.readline().strip().split()[1]))\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\ndef lcm(a, b):\n    return (a * b) // gcd(a, b)\n\nlcm = lcm(l[0], r[0])\nfor i in range(1, n):\n    lcm = lcm * l[i] // gcd(lcm, l[i])\n    lcm = lcm * r[i] // gcd(lcm, r[i])\nlcm = lcm * 998244353 // gcd(lcm, 998244353)\n\nprint(lcm)", "\nimport sys\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\nn = int(sys.stdin.readline())\nl, r = [], []\nfor i in range(n):\n    l.append(int(sys.stdin.readline().split()[0]))\n    r.append(int(sys.stdin.readline().split()[1]))\n\nx = lcm(l[0], r[0])\nfor i in range(1, n):\n    x = lcm(x, l[i])\n    x = lcm(x, r[i])\n\ny = 1\nfor i in range(n):\n    y = lcm(y, l[i])\n    y = lcm(y, r[i])\n\nans = 1\nfor i in range(n):\n    ans = lcm(ans, l[i])\n    ans = lcm(ans, r[i])\n\nprint((x * ans) % 998244353)", "import math\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\ndef lcm(a, b):\n    return a * b / gcd(a, b)\n\nn = int(input())\nl = []\nr = []\n\nfor i in range(n):\n    l.append(int(input()))\n\nfor i in range(n):\n    r.append(int(input()))\n\nans = 1\n\nfor i in range(n):\n    ans = lcm(ans, r[i] - l[i] + 1)\n\nans = math.pow(ans, -1) % 998244353\n\nprint(int(ans * 998244353))"], "rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "train rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "time": [21.776684045791626, 26.621556043624878, 48.97847008705139, 62.09949469566345, 81.56407475471497, 102.38822627067566, 122.8463442325592, 137.87347722053528], "sample times": 8}