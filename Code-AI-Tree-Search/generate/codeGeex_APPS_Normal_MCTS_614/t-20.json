{"codes": ["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import sys\n\nh, m = map(int, sys.stdin.readline().split(':'))\n\ndef is_palindrome(s):\n    return s == s[::-1]\n\ndef is_palindrome_time(h, m):\n    return is_palindrome(f'{h:02d}{m:02d}') or is_palindrome(f'{h:02d}:{m:02d}')\n\ndef min_sleep(h, m):\n    if is_palindrome_time(h, m):\n        return 0\n\n    if is_palindrome_time(h, m + 1):\n        return 1\n\n    if is_palindrome_time(h, m + 2):\n        return 2\n\n    if is_palindrome_time(h, m + 3):\n        return 3\n\n    if is_palindrome_time(h, m + 4):\n        return 4\n\n    if is_palindrome_time(h, m + 5):\n        return 5\n\n    if is_palindrome_time(h, m + 6):\n        return 6\n\n    if is_palindrome_time(h, m + 7):\n        return 7\n\n    if is_palindrome_time(h, m + 8):\n        return 8\n\n    if is_palindrome_time(h, m + 9):\n        return 9\n\n    if is_palindrome_time(h, m + 10):\n        return 10\n\n    if is_palindrome_time(h, m + 11):\n        return 11\n\n    if is_palindrome_time(h, m + 12):\n        return 12\n\n    if is_palindrome_time(h, m + 13):\n        return 13\n\n    if is_palindrome_time(h, m + 14):\n        return 14\n\n    if is_palindrome_time(h, m + 15):\n        return 15\n\n    if is_palindrome_time(h, m + 16):\n        return 16\n\n    ", "\nimport sys\n\ndef is_palindrome(s):\n    return s == s[::-1]\n\nh, m = map(int, sys.stdin.readline().split(':'))\n\nif is_palindrome(str(h) + ':' + str(m)):\n    print(0)\nelse:\n    while not is_palindrome(str(h) + ':' + str(m)):\n        m -= 1\n        if m == -1:\n            h -= 1\n            m = 59\n        if h == 0:\n            h = 23\n    print(m + 1)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "def is_palindrome(s):\n    return s == s[::-1]\n\ndef get_minutes(s):\n    return int(s[:2]) * 60 + int(s[3:])\n\ndef get_palindrome_minutes(s):\n    minutes = get_minutes(s)\n    while not is_palindrome(str(minutes)):\n        minutes += 1\n    return minutes\n\ns = input()\nprint(get_palindrome_minutes(s))\n\"\"\"\n\n\ndef is_palindrome(s):\n    return s == s[::-1]\n\n\ndef get_minutes(s):\n    return int(s[:2]) * 60 + int(s[3:])\n\n\ndef get_palindrome_minutes(s):\n    minutes = get_minutes(s)\n    while not is_palindrome(str(minutes)):\n        minutes += 1\n    return minutes\n\n\ns = input()\nprint(get_palindrome_minutes(s))", "\ndef is_palindrome(s):\n    if s == s[::-1]:\n        return True\n    else:\n        return False\n\ndef get_minutes(h, m):\n    if h < 10:\n        h = '0' + str(h)\n    else:\n        h = str(h)\n    if m < 10:\n        m = '0' + str(m)\n    else:\n        m = str(m)\n    time = h + ':' + m\n    if is_palindrome(time):\n        return 0\n    else:\n        minutes = 60 - int(m)\n        if minutes < 10:\n            minutes = '0' + str(minutes)\n        else:\n            minutes = str(minutes)\n        time = h + ':' + minutes\n        if is_palindrome(time):\n            return 60 - int(m)\n        else:\n            minutes = 60 - int(m) - 1\n            if minutes < 10:\n                minutes = '0' + str(minutes)\n            else:\n                minutes = str(minutes)\n            time = h + ':' + minutes\n            if is_palindrome(time):\n                return 60 - int(m) - 1\n            else:\n                minutes = 60 - int(m) - 2\n                if minutes < 10:\n                    minutes = '0' + str(minutes)\n                else:\n                    minutes = str(minutes)\n                time = h + ':' + minutes\n                if is_palindrome(time):\n                    return 60 - int(m) - 2\n                else:\n                    minutes = 60 - int(m) - 3\n                    if minutes < 10:\n                        minutes = '0' + str(minutes)\n                    else:\n                        minutes = str(minutes)\n                    time = h + ':' + minutes\n                    if is_palindrome(time):\n                        return 60 - int(m) - 3\n                    else:\n                        minutes = 60 - int(m) - 4\n                        if minutes < 10:", "\ndef palindrome():\n    hh, mm = input().split(\":\")\n    hh = int(hh)\n    mm = int(mm)\n    if hh < 10:\n        hh = \"0\" + str(hh)\n    else:\n        hh = str(hh)\n    if mm < 10:\n        mm = \"0\" + str(mm)\n    else:\n        mm = str(mm)\n    hhmm = hh + \":\" + mm\n    if hhmm == hhmm[::-1]:\n        return 0\n    else:\n        if hhmm[0] == \"0\":\n            hhmm = hhmm[1:]\n        if hhmm[-1] == \"0\":\n            hhmm = hhmm[:-1]\n        if hhmm[0] == \"0\":\n            hhmm = hhmm[1:]\n        if hhmm[-1] == \"0\":\n            hhmm = hhmm[:-1]\n        hh, mm = hhmm.split(\":\")\n        hh = int(hh)\n        mm = int(mm)\n        if hh < 10:\n            hh = \"0\" + str(hh)\n        else:\n            hh = str(hh)\n        if mm < 10:\n            mm = \"0\" + str(mm)\n        else:\n            mm = str(mm)\n        hhmm = hh + \":\" + mm\n        if hhmm == hhmm[::-1]:\n            return 0\n        else:\n            if hhmm[0] == \"0\":\n                hhmm = hhmm[1:]\n            if hhmm[-1] == \"0\":\n                hhmm = hhmm[:-1]\n            if hhmm[0] == \"0\":\n                hhmm = hhmm[1:]\n            if hhmm[-1] == \"0\":\n                hhmm = hhmm[:-1]\n            hh, mm = hhmm.split(\":\")\n            hh = int(hh)\n            mm = int(mm)\n            if hh < 10:\n                hh = \"0\" + str(hh)\n            else:\n                hh = str(hh)\n            if mm < 10", "\nimport math\nimport os\nimport random\nimport re\nimport sys\n\ndef time_is_a_palindrome(h, m):\n    h = str(h)\n    m = str(m)\n    if h == h[::-1] and m == m[::-1]:\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    hms = input().split(\":\")\n\n    h = int(hms[0])\n\n    m = int(hms[1])\n\n    result = time_is_a_palindrome(h, m)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import math\nimport os\nimport random\nimport re\nimport sys\n\ndef time_is_a_palindrome(h, m):\n    h = str(h)\n    m = str(m)\n    if h == h[::-1] and m == m[::-1]:\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    hms = input().split(\":\")\n\n    h = int(hms[0])\n\n    m = int(hms[1])\n\n    result = time_is_a_palindrome(h, m)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\n\ndef is_palindrome(s):\n    return s == s[::-1]\n\n\ndef get_minutes(hh, mm):\n    return (hh * 60 + mm) % 100\n\n\nif __name__ == '__main__':\n    hh, mm = map(int, input().split(':'))\n    minutes = get_minutes(hh, mm)\n\n    if is_palindrome(str(minutes)):\n        print(0)\n    else:\n        print(100 - minutes % 100 + 1)\n\n\"\"\"\n\n\ndef is_palindrome(s):\n    return s == s[::-1]\n\n\ndef get_minutes(hh, mm):\n    return (hh * 60 + mm) % 100\n\n\nif __name__ == \"__main__\":\n    hh, mm = map(int, input().split(\":\"))\n    minutes = get_minutes(hh, mm)\n\n    if is_palindrome(str(minutes)):\n        print(0)\n    else:\n        print(100 - minutes % 100 + 1)", "\nimport re\n\ndef is_palindrome(s):\n    return s == s[::-1]\n\ndef get_palindrome(h, m):\n    h = str(h)\n    m = str(m)\n    if len(h) == 1:\n        h = '0' + h\n    if len(m) == 1:\n        m = '0' + m\n    return h + ':' + m\n\ndef get_minutes(h, m):\n    if is_palindrome(get_palindrome(h, m)):\n        return 0\n    else:\n        return 60 - int(m)\n\ndef main():\n    h, m = map(int, input().split(':'))\n    print(get_minutes(h, m))\n\nif __name__ == '__main__':\n    main()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"], "rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "train rewards": [0.0, 0.0, 0.1375, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "time": [28.40932846069336, 58.296478033065796, 88.69439625740051, 104.18007683753967, 133.51492142677307, 163.07696270942688, 192.13162398338318, 221.64338040351868, 238.24687480926514, 267.7993800640106], "sample times": 10}