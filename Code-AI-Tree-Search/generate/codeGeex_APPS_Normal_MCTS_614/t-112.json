{"codes": ["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import sys\n\nn = int(sys.stdin.readline().strip())\ncubes = []\nfor i in range(n):\n    cubes.append(list(map(int, sys.stdin.readline().strip().split())))\n\nmax_num = 0\nfor i in range(1, 10):\n    for j in range(1, 10):\n        for k in range(1, 10):\n            for l in range(1, 10):\n                for m in range(1, 10):\n                    for n in range(1, 10):\n                        for o in range(1, 10):\n                            for p in range(1, 10):\n                                if i != j and i != k and i != l and i != m and i != n and i != o and i != p:\n                                    if j != k and j != l and j != m and j != n and j != o and j != p:\n                                        if k != l and k != m and k != n and k != o and k != p:\n                                            if l != m and l != n and l != o and l != p:\n                                                if m != n and m != o and m != p:\n                                                    if n != o and n != p:\n                                                        if o != p:\n                                                            num = cubes[0][i] * 1000000 + cubes[1][j] * 100000 + cubes[2][k] * 10000 + cubes[3][l] * 1000 + cubes[4][m] * 100 + cubes[5][n] * 10 + cubes[6][o] * 1 + cubes[7][p]\n                                                            if num > max_num:\n                                                                max_num = num\n\nif max_num == 0:\n    print(0)\nelse:\n    print(max_num)", "def read_input():\n    n = int(input())\n    cubes = []\n    for i in range(n):\n        cubes.append(list(map(int, input().split())))\n    return cubes\n\n\ndef check_cubes(cubes):\n    for i in range(len(cubes)):\n        for j in range(len(cubes[i])):\n            if cubes[i][j] == 6 and cubes[i][(j + 1) % 6] == 9:\n                return False\n            if cubes[i][j] == 9 and cubes[i][(j + 1) % 6] == 6:\n                return False\n    return True\n\n\ndef check_number(number, cubes):\n    for i in range(len(cubes)):\n        for j in range(len(cubes[i])):\n            if cubes[i][j] == 6 and cubes[i][(j + 1) % 6] == 9:\n                return False\n            if cubes[i][j] == 9 and cubes[i][(j + 1) % 6] == 6:\n                return False\n    for i in range(len(number)):\n        if number[i] == 6 and number[(i + 1) % len(number)] == 9:\n            return False\n        if number[i] == 9 and number[(i + 1) % len(number)] == 6:\n            return False\n    return True\n\n\ndef find_max_number(cubes):\n    if not check_cubes(cubes):\n        return 0\n    number = []\n    for i in range(len(cubes)):\n        for j in range(len(cubes[i])):\n            number.append(cubes[i][j])\n    number.sort()\n    for i in range(len(number)):\n        if number[i] == 6 and number[(i + 1) % len(number)] == 9:\n            return 0\n        if number[i] == 9 and number[(i + 1) % len(number)] == 6:\n            return 0\n    for i in range(len(number)):\n        if number[i] == 6", "\nimport sys\n\nn = int(sys.stdin.readline())\n\ncubes = []\n\nfor i in range(n):\n    cubes.append(list(map(int, sys.stdin.readline().split())))\n\ncubes = sorted(cubes, key=lambda x: x[0], reverse=True)\n\nfor i in range(1, 10):\n    for j in range(1, 10):\n        for k in range(1, 10):\n            for l in range(1, 10):\n                for m in range(1, 10):\n                    for n in range(1, 10):\n                        for o in range(1, 10):\n                            for p in range(1, 10):\n                                for q in range(1, 10):\n                                    for r in range(1, 10):\n                                        for s in range(1, 10):\n                                            for t in range(1, 10):\n                                                for u in range(1, 10):\n                                                    for v in range(1, 10):\n                                                        for w in range(1, 10):\n                                                            for x in range(1, 10):\n                                                                for y in range(1, 10):\n                                                                    for z in range(1, 10):\n                                                                        for a in range(1, 10):\n                                                                            for b in range(1, 10):\n                                                                                for c in range(1, 10):\n                                                                                    for d in range(1, 10):\n                                                                                        for e in range(1, 10):\n                                                                                            for f in range(1, 10):\n                                                                                                for g in range(1, 10):\n                                                                                                    for h in range(1, 10):\n                                                                                                        for i in range(1, 10):\n                                                                                                            for j in range(1, 10):\n                                                                                                                for k in range(1, 10):\n                                                                                                                    for", "\ndef read_input():\n    n = int(input())\n    cubes = []\n    for i in range(n):\n        cubes.append(list(map(int, input().split())))\n    return cubes\n\n\ndef check_cubes(cubes):\n    for i in range(len(cubes)):\n        for j in range(len(cubes[i])):\n            if cubes[i][j] == 6 and cubes[i][(j + 1) % 6] == 9:\n                return False\n            if cubes[i][j] == 9 and cubes[i][(j + 1) % 6] == 6:\n                return False\n    return True\n\n\ndef check_number(number, cubes):\n    for i in range(len(cubes)):\n        for j in range(len(cubes[i])):\n            if cubes[i][j] == 6 and cubes[i][(j + 1) % 6] == 9:\n                return False\n            if cubes[i][j] == 9 and cubes[i][(j + 1) % 6] == 6:\n                return False\n    for i in range(len(number)):\n        if number[i] == 6 and number[(i + 1) % len(number)] == 9:\n            return False\n        if number[i] == 9 and number[(i + 1) % len(number)] == 6:\n            return False\n    return True\n\n\ndef find_max_number(cubes):\n    if not check_cubes(cubes):\n        return 0\n    number = []\n    for i in range(len(cubes)):\n        for j in range(len(cubes[i])):\n            number.append(cubes[i][j])\n    number.sort()\n    for i in range(len(number)):\n        if number[i] == 6 and number[(i + 1) % len(number)] == 9:\n            return 0\n        if number[i] == 9 and number[(i + 1) % len(number)] == 6:\n            return 0\n    for i in range(len(number)):\n        if number[i] == ", "def max_number(cubes):\n    cubes = sorted(cubes)\n    max_number = 0\n    for i in range(1, len(cubes) + 1):\n        max_number += cubes[i - 1] * 10 ** (len(cubes) - i)\n    return max_number\n\n\nif __name__ == '__main__':\n    n = int(input())\n    cubes = []\n    for _ in range(n):\n        cubes.append(list(map(int, input().split())))\n    print(max_number(cubes))\n\n\"\"\"\n\n\ndef max_number(cubes):\n    cubes = sorted(cubes)\n    max_number = 0\n    for i in range(1, len(cubes) + 1):\n        max_number += cubes[i - 1] * 10 ** (len(cubes) - i)\n    return max_number\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    cubes = []\n    for _ in range(n):\n        cubes.append(list(map(int, input().split())))\n    print(max_number(cubes))", "\n\ndef read_input():\n    n = int(input())\n    cubes = []\n    for i in range(n):\n        cubes.append(list(map(int, input().split())))\n    return cubes\n\n\ndef check_cubes(cubes):\n    for i in range(len(cubes)):\n        for j in range(len(cubes[i])):\n            if cubes[i][j] == 6 and cubes[i][(j + 1) % 6] == 9:\n                return False\n            if cubes[i][j] == 9 and cubes[i][(j + 1) % 6] == 6:\n                return False\n    return True\n\n\ndef check_number(number, cubes):\n    for i in range(len(cubes)):\n        for j in range(len(cubes[i])):\n            if cubes[i][j] == 6 and cubes[i][(j + 1) % 6] == 9:\n                return False\n            if cubes[i][j] == 9 and cubes[i][(j + 1) % 6] == 6:\n                return False\n    for i in range(len(number)):\n        if number[i] == 6 and number[(i + 1) % 6] == 9:\n            return False\n        if number[i] == 9 and number[(i + 1) % 6] == 6:\n            return False\n    return True\n\n\ndef get_max_number(cubes):\n    if not check_cubes(cubes):\n        return 0\n    max_number = []\n    for i in range(len(cubes)):\n        for j in range(len(cubes[i])):\n            max_number.append(cubes[i][j])\n    for i in range(len(max_number)):\n        if max_number[i] == 6 and max_number[(i + 1) % 6] == 9:\n            return 0\n        if max_number[i] == 9 and max_number[(i + 1) % 6] == 6:\n            return 0\n    for i in range(len(max_number)):\n        "], "rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "train rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "time": [31.73224401473999, 63.82369899749756, 102.74979877471924, 134.59236931800842, 166.4563889503479, 186.38029599189758, 218.26373147964478], "sample times": 7}