{"codes": ["\nimport math\nimport os\nimport random\nimport re\nimport sys\n\nif __name__ == '__main__':\n    n = int(input())\n\n    arr = list(map(int, input().rstrip().split()))\n\n    primes = []\n\n    for i in range(2, 1000001):\n        is_prime = True\n        for j in range(2, int(math.sqrt(i)) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n\n        if is_prime:\n            primes.append(i)\n\n    # print(primes)\n\n    def is_simple(arr):\n        for i in range(len(arr) - 1):\n            for j in range(i + 1, len(arr)):\n                if arr[i] + arr[j] in primes:\n                    return True\n\n        return False\n\n    max_size = 0\n    max_size_arr = []\n\n    for i in range(1, len(arr) + 1):\n        for j in itertools.combinations(arr, i):\n            if is_simple(j) and len(j) > max_size:\n                max_size = len(j)\n                max_size_arr = j\n\n    print(max_size)\n    print(' '.join(map(str, max_size_arr)))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import math\nimport os\nimport random\nimport re\nimport sys\n\nif __name__ == '__main__':\n    n = int(input())\n\n    arr = list(map(int, input().rstrip().split()))\n\n    primes = []\n\n    for i in range(2, 1000001):\n        is_prime = True\n        for j in range(2, int(math.sqrt(i)) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n\n        if is_prime:\n            primes.append(i)\n\n    # print(primes)\n\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] in primes:\n                print(arr[i], arr[j])", "#include <iostream>\n#include <cmath>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <string>\n#include <algorithm>\n#include <vector>\n#include <map>\n#include <set>\n#include <list>\n#include <queue>\n#include <stack>\n#include <bitset>\n#include <deque>\n#include <ctime>\n#include <climits>\n#include <cctype>\n#include <cassert>\n#include <complex>\n#include <iomanip>\n#include <ciso646>\n#include <cstdarg>\n#include <unistd.h>\n#include <fcntl.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <sys/time.h>\n#include <sys/errno.h>\n#include <sys/fcntl.h>\n#include <sys/ioctl.h>\n#include <sys/mman.h>\n#include <sys/resource.h>\n#include <sys/signal.h>\n#include <sys/timeb.h>\n#include <sys/time.h>\n#include <sys/types.h>\n#include <sys/uio.h>\n#include <sys/un.h>\n#include <sys/param.h>\n#include <sys/mount.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <netinet/tcp.h>\n#include <netinet/in_systm.h>\n#include <netinet/ip.h>\n#include <netinet/ip6.h>\n#include <netinet/icmp.h>\n#include <netinet/igmp.h>\n#include <netinet/tcp.h>\n#include <netinet/udp.h>\n#include <netinet/ip.h>\n#include <netinet/ip_icmp.h>\n#include <netinet/ip_udp.h>\n#include <netinet/ip_tcp.h>\n#include <netinet/ip6.h>\n#include <netinet/ip6_icmp.h>\n#include <netinet/ip6_udp.h>\n#include <net", "\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\nif __name__ == '__main__':\n    n = int(input())\n\n    arr = list(map(int, input().rstrip().split()))\n\n    primes = []\n\n    for i in range(2, 1000001):\n        isPrime = True\n        for j in range(2, int(math.sqrt(i)) + 1):\n            if i % j == 0:\n                isPrime = False\n                break\n\n        if isPrime:\n            primes.append(i)\n\n    # print(primes)\n\n    def isSimple(arr):\n        for i in range(len(arr) - 1):\n            for j in range(i + 1, len(arr)):\n                if arr[i] + arr[j] not in primes:\n                    return False\n\n        return True\n\n    maxSize = 0\n    maxArr = []\n\n    for i in range(1, len(arr) + 1):\n        for j in itertools.combinations(arr, i):\n            if isSimple(j):\n                if len(j) > maxSize:\n                    maxSize = len(j)\n                    maxArr = j\n\n    print(maxSize)\n    print(' '.join(map(str, maxArr)))\n\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\nif __name__ == '__main__':\n    n = int(input())\n\n    arr = list(map(int, input().rstrip().split()))\n\n    primes = []\n\n    for i in range(2, 1000001):\n        isPrime = True\n        for j in range(2, int(math.sqrt(i)) + 1):\n            if i % j == 0:\n                isPrime = False\n                break\n\n        if isPrime:\n            primes.append(i)\n\n    # print(primes)\n\n    def isSimple(arr):\n        for i in range(len(arr) - 1):\n            for j in range(i + 1, len(arr)):\n                if arr[i] + arr[j] not in primes:\n                    return False\n\n        return True\n\n    maxSize = 0\n    maxArr = []\n\n    for", "\n#!/usr/bin/python\n\nimport sys\n\nn = int(sys.stdin.readline())\na = map(int, sys.stdin.readline().split())\n\n\ndef is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef is_simple(a):\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            if not is_prime(a[i] + a[j]):\n                return False\n    return True\n\n\ndef find_simple(a):\n    for i in range(len(a), 0, -1):\n        if is_simple(a[:i]):\n            return a[:i]\n\n\nprint len(find_simple(a))\nprint \" \".join(map(str, find_simple(a)))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "#!/usr/bin/env python3\n\nimport sys\n\nn = int(sys.stdin.readline().strip())\na = list(map(int, sys.stdin.readline().strip().split()))\n\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef is_simple(a):\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            if a[i] + a[j] <= 1000000:\n                if not is_prime(a[i] + a[j]):\n                    return False\n            else:\n                return False\n    return True\n\n\nans = 0\nfor i in range(1, n + 1):\n    if is_simple(a[:i]):\n        if i > ans:\n            ans = i\n\nprint(ans)\nprint(\" \".join(map(str, a[:ans])))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"], "rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.48], "train rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5833333333333334], "time": [30.89872121810913, 44.44248676300049, 75.23454427719116, 105.98449683189392, 137.01829361915588, 167.78637385368347, 198.7276439666748], "sample times": 7}