{"codes": ["\nimport sys\n\nn, m, s, d = [int(x) for x in sys.stdin.readline().split()]\nobstacles = [int(x) for x in sys.stdin.readline().split()]\nobstacles.append(m)\nobstacles = sorted(obstacles)\n\ndef can_jump(obstacles, s, d):\n    for i in range(len(obstacles) - 1):\n        if obstacles[i + 1] - obstacles[i] < s:\n            return False\n        elif obstacles[i + 1] - obstacles[i] >= s and obstacles[i + 1] - obstacles[i] <= d:\n            continue\n        elif obstacles[i + 1] - obstacles[i] > d:\n            return can_jump(obstacles[i + 1:], s, d)\n    return True\n\nif not can_jump(obstacles, s, d):\n    print(\"IMPOSSIBLE\")\nelse:\n    print(\"RUN {}\".format(obstacles[0]))\n    for i in range(1, len(obstacles) - 1):\n        if obstacles[i] - obstacles[i - 1] >= s:\n            print(\"RUN {}\".format(obstacles[i] - obstacles[i - 1]))\n        else:\n            print(\"JUM", "import sys\n\nn, m, s, d = map(int, sys.stdin.readline().split())\nobstacles = list(map(int, sys.stdin.readline().split()))\nobstacles.append(m)\nobstacles.insert(0, 0)\nobstacles = list(set(obstacles))\nobstacles = sorted(obstacles)\nobstacles.remove(0)\nobstacles.remove(m)\nobstacles.insert(0, 0)\nobstacles.append(m)\nobstacles = list(set(obstacles))\nobstacles = sorted(obstacles)\nobstacles.remove(0)\nobstacles.remove(m)\nobstacles.insert(0, 0)\nobstacles.append(m)\nobstacles = list(set(obstacles))\nobstacles = sorted(obstacles)\nobstacles.remove(0)\nobstacles.remove(m)\nobstacles.insert(0, 0)\nobstacles.append(m)\nobstacles = list(set(obstacles))\nobstacles = sorted(obstacles)\nobstacles.remove(0)\nobstacles.remove(m)\nobstacles.insert(0, 0)\nobstacles.append(m)\nobstacles = list(", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "def solution(n, m, s, d, a):\n    if n == 0:\n        if m == 0:\n            return \"RUN 0\"\n        else:\n            return \"IMPOSSIBLE\"\n    if n == 1:\n        if m == a[0]:\n            return \"RUN 0\"\n        elif m > a[0]:\n            return \"RUN \" + str(m - a[0])\n        else:\n            return \"IMPOSSIBLE\"\n    if n == 2:\n        if m == a[0] + a[1]:\n            return \"RUN 0\"\n        elif m > a[0] + a[1]:\n            return \"RUN \" + str(m - a[0] - a[1])\n        else:\n            return \"IMPOSSIBLE\"\n    if n == 3:\n        if m == a[0] + a[1] + a[2]:\n            return \"RUN 0\"\n        elif m > a[0] + a[1] + a[2]:\n            return \"RUN \" + str(m - a[0] - a[1] - a[2])\n        else:\n            return \"IMPOSSIBLE\"\n    if n == 4:\n        if m == a[0] + a[1] + a[2] + a[3]:\n            return \"RUN ", "\ndef main():\n    n, m, s, d = map(int, input().split())\n    obstacles = list(map(int, input().split()))\n    obstacles.append(0)\n    obstacles.append(m)\n    obstacles.sort()\n    print(obstacles)\n\n\nif __name__ == '__main__':\n    main()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\n\ndef main():\n    n, m, s, d = map(int, input().split())\n    obstacles = list(map(int, input().split()))\n    obstacles.append(m)\n    obstacles.insert(0, 0)\n    obstacles.sort()\n    print(obstacles)\n\n\nif __name__ == \"__main__\":\n    main()", "import math\nimport sys\n\nn, m, s, d = map(int, sys.stdin.readline().split())\nobstacles = list(map(int, sys.stdin.readline().split()))\nobstacles.append(m)\nobstacles.insert(0, 0)\nobstacles = sorted(obstacles)\n\ndef jump(start, finish, s, d):\n    if start == finish:\n        return \"RUN \" + str(start)\n    if start > finish:\n        return \"IMPOSSIBLE\"\n    if start + s >= finish:\n        return \"RUN \" + str(finish - start)\n    if start + s + d >= finish:\n        return \"RUN \" + str(finish - start - s) + \"\\nJUMP \" + str(d)\n    for i in range(1, len(obstacles)):\n        if obstacles[i] - obstacles[i - 1] >= s + d:\n            return \"RUN \" + str(obstacles[i] - obstacles[i - 1] - s) + \"\\nJUMP \" + str(d) + \"\\nRUN \" + str(obstacles[i] - obstacles[i - 1])\n    return \"IMPOSSIBLE\"\n\nprint(jump(0, m, s, d))", "import sys\n\ndef main():\n    n, m, s, d = map(int, sys.stdin.readline().split())\n    obstacles = list(map(int, sys.stdin.readline().split()))\n    obstacles.append(m)\n    obstacles.insert(0, 0)\n    obstacles = sorted(obstacles)\n\n    if obstacles[1] - obstacles[0] < s:\n        print(\"IMPOSSIBLE\")\n        return\n\n    for i in range(1, len(obstacles) - 1):\n        if obstacles[i] - obstacles[i - 1] < d:\n            print(\"IMPOSSIBLE\")\n            return\n\n    for i in range(1, len(obstacles) - 1):\n        if obstacles[i] - obstacles[i - 1] >= d:\n            if obstacles[i] - obstacles[i - 1] >= s:\n                print(\"RUN\", obstacles[i] - obstacles[i - 1] - s)\n            else:\n                print(\"JUMP\", obstacles[i] - obstacles[i - 1] - d)\n\n\nif __name__ == \"__main__\":\n    main()", "import sys\nimport math\n\nn, m, s, d = map(int, sys.stdin.readline().split())\nobstacles = map(int, sys.stdin.readline().split())\nobstacles = list(obstacles)\nobstacles.append(m)\nobstacles = list(set(obstacles))\nobstacles = sorted(obstacles)\nobstacles = list(obstacles)\n\n\ndef check_obstacles(obstacles):\n    for i in range(len(obstacles) - 1):\n        if obstacles[i + 1] - obstacles[i] < s:\n            return False\n    return True\n\n\nif not check_obstacles(obstacles):\n    print(\"IMPOSSIBLE\")\n    sys.exit(0)\n\nif obstacles[0] != 0:\n    print(\"IMPOSSIBLE\")\n    sys.exit(0)\n\nif obstacles[-1] != m:\n    print(\"IMPOSSIBLE\")\n    sys.exit(0)\n\nif obstacles[-1] - obstacles[0] < s + d:\n    print(\"IMPOSSIBLE\")\n    sys.exit(0)\n\nif obstacles[-1] - obstacles[0] == s + d:\n    print(\"RUN %d\" % (obstacles[-1] - obstacles[0]))\n    sys.exit(0"], "rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.4166666666666667, 0.0, 0.0], "train rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2857142857142857, 0.0, 0.0], "time": [17.9058198928833, 36.91117310523987, 55.71613907814026, 74.57463192939758, 93.34026312828064, 100.5859944820404, 119.50386548042297, 138.14846348762512, 156.50258827209473], "sample times": 9}