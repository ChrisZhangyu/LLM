{"codes": ["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "class Solution(object):\n    def __init__(self):\n        self.mod = 1000000007\n        self.n = 0\n        self.x = 0\n        self.pos = 0\n\n    def read_input(self):\n        self.n, self.x, self.pos = map(int, input().split())\n\n    def solve(self):\n        self.read_input()\n        result = 0\n        for i in range(self.n):\n            if i < self.pos:\n                result += self.n - i\n            elif i > self.pos:\n                result -= self.n - i\n        return result % self.mod\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.solve())", "import sys\n\nn, x, pos = [int(i) for i in sys.stdin.readline().split()]\ncount = 0\nfor i in range(1, n + 1):\n    for j in range(1, n + 1):\n        for k in range(1, n + 1):\n            for l in range(1, n + 1):\n                if i != j and i != k and i != l and j != k and j != l and k != l:\n                    a = [i, j, k, l]\n                    if a[pos] == x:\n                        count += 1\nprint(count % 1000000007)", "\nimport sys\n\nn, x, pos = [int(i) for i in sys.stdin.readline().split()]\ncount = 0\nfor i in range(1, n + 1):\n    if i == x:\n        if pos == 0:\n            count += 1\n        else:\n            count += 2\n    else:\n        if pos == 0:\n            count += 2\n        else:\n            count += 1\nprint(count % 1000000007)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\ndef binary_search(a, x):\n    left = 0\n    right = len(a)\n    while left < right:\n        middle = (left + right) // 2\n        if a[middle] <= x:\n            left = middle + 1\n        else:\n            right = middle\n    if left > 0 and a[left - 1] == x:\n        return True\n    else:\n        return False\n\nn, x, pos = list(map(int, input().split()))\na = list(map(int, input().split()))\ncount = 0\nfor i in range(len(a)):\n    if binary_search(a[i:], x):\n        count += 1\nprint(count % (10 ** 9 + 7))", "class Solution:\n    def numberOfArrays(self, n: int, x: int, pos: int) -> int:\n        if n == 0:\n            return 0\n        if n == 1:\n            if x == 1:\n                return 1\n            else:\n                return 0\n        if n == 2:\n            if x == 1:\n                return 2\n            elif x == 2:\n                return 1\n            else:\n                return 0\n        if n == 3:\n            if x == 1:\n                return 4\n            elif x == 2:\n                return 3\n            elif x == 3:\n                return 2\n            else:\n                return 0\n        if n == 4:\n            if x == 1:\n                return 8\n            elif x == 2:\n                return 7\n            elif x == 3:\n                return 6\n            elif x == 4:\n                return 5\n            elif x == 5:\n                return 4\n            elif x == 6:\n                return 3\n            elif x == 7:\n                return 2\n            elif x == 8:\n                return 1\n            else:\n                return 0\n        if n == 5:\n            if x == 1:\n                return 16\n            elif x == 2:\n                return 15\n            elif x == 3:\n                return 14\n            elif x == 4:\n                return 13\n            "], "rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "train rewards": [0.0, 0.0, 0.125, 0.025, 0.0, 0.0], "time": [4.680248022079468, 18.190027713775635, 35.3644335269928, 57.31379675865173, 78.58297562599182, 99.94223380088806], "sample times": 6}