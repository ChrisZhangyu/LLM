{"codes": ["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import numpy as np\n\n\ndef check_win(board):\n    for i in range(10):\n        if board[i][0] == board[i][1] == board[i][2] == board[i][3] == board[i][4] == 'X':\n            return True\n        if board[0][i] == board[1][i] == board[2][i] == board[3][i] == board[4][i] == 'X':\n            return True\n    if board[0][0] == board[1][1] == board[2][2] == board[3][3] == board[4][4] == 'X':\n        return True\n    if board[4][0] == board[3][1] == board[2][2] == board[1][3] == board[0][4] == 'X':\n        return True\n    return False\n\n\nif __name__ == '__main__':\n    board = []\n    for _ in range(10):\n        board.append(input())\n    board = np.array(board)\n    if check_win(board):\n        print('YES')\n    else:\n        print('NO')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "def check(x,y):\n    if x<0 or y<0 or x>=10 or y>=10:\n        return False\n    if board[x][y]=='.':\n        return False\n    if board[x][y]=='X':\n        return True\n    else:\n        return False\n\ndef win(x,y):\n    if check(x,y+4) and check(x,y+3) and check(x,y+2) and check(x,y+1) and check(x,y):\n        return True\n    if check(x+4,y) and check(x+3,y) and check(x+2,y) and check(x+1,y) and check(x,y):\n        return True\n    if check(x+4,y+4) and check(x+3,y+3) and check(x+2,y+2) and check(x+1,y+1) and check(x,y):\n        return True\n    if check(x+4,y-4) and check(x+3,y-3) and check(x+2,y-2) and check(x+1,y-1) and check(x,y):\n        return True\n    if check(x-4,y-4) and check(x-3,y-3) and check(x-2,y-2) and check(x-1,y-1) and check(x,y):\n        return True\n    if check(x-4,y) and check(x-3,y) and check(x-2,y) and check(x-1,y) and check(x,y):\n        return True\n    if check(x-4,y+4) and check(x-3,y+3) and check(x-2,y+2) and check(x-1,y+1) and check(x,y):\n        return True\n    if check(x-4,y-4) and check(x-3,y-3) and check(x-2,y-2) and check(x-1,y-1) and check(x,y):\n        return True\n    if check(x+4,y-4) and check(x+3,y-3) and check(x+2,y-2) and check(x+1,y-1) and check(x,y):\n        return True\n    if check(x+4,y+4) and check(x+3,y+3) and check(x+2,y+2) and check(x+1,y+1) and check(x,y):\n        return True\n    if check(x-4,", "\nimport numpy as np\n\n\ndef check_win(board):\n    for i in range(10):\n        if board[i][0] == board[i][1] == board[i][2] == board[i][3] == board[i][4] == 'X':\n            return True\n        if board[0][i] == board[1][i] == board[2][i] == board[3][i] == board[4][i] == 'X':\n            return True\n    if board[0][0] == board[1][1] == board[2][2] == board[3][3] == board[4][4] == 'X':\n        return True\n    if board[4][0] == board[3][1] == board[2][2] == board[1][3] == board[0][4] == 'X':\n        return True\n    return False\n\n\nif __name__ == '__main__':\n    board = []\n    for _ in range(10):\n        board.append(input())\n    board = np.array(board)\n    if check_win(board):\n        print('YES')\n    else:\n        print('NO')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import sys\n\nn = int(sys.stdin.readline().strip())\nmatrix = []\nfor i in range(n):\n    matrix.append(list(sys.stdin.readline().strip()))\n\ndef check_win(matrix):\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == '.':\n                return False\n\n    for i in range(n):\n        for j in range(n-4):\n            if matrix[i][j] == matrix[i][j+1] == matrix[i][j+2] == matrix[i][j+3] == matrix[i][j+4] == 'X':\n                return True\n\n    for i in range(n-4):\n        for j in range(n):\n            if matrix[i][j] == matrix[i+1][j] == matrix[i+2][j] == matrix[i+3][j] == matrix[i+4][j] == 'X':\n                return True\n\n    for i in range(n-4):\n        for j in range(n-4):\n            if matrix[i][j] == matrix[i+1][j+1] == matrix[i+2][j+2] == matrix[i+3][j+3] == matrix[i+4][j+4] == 'X':\n                return True\n\n    for i in range(4, n):\n        for j in range(n-4):\n            if matrix[i][j] == matrix[i-1][j+1] == matrix[i-2][j+2] == matrix[i-3][j+3] == matrix[i-4][j+4] == 'X':\n                return True\n\n    return False\n\nif check_win(matrix):\n    print('YES')\nelse:\n    print('NO')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\ndef check(x, y):\n    if x < 0 or y < 0 or x >= 10 or y >= 10:\n        return False\n    return True\n\n\ndef check_line(x, y, dx, dy):\n    if not check(x, y):\n        return False\n    if not check(x + dx, y + dy):\n        return False\n    while check(x, y) and check(x + dx, y + dy):\n        x += dx\n        y += dy\n        if x == x + dx and y == y + dy:\n            return True\n    return False\n\n\ndef check_horizontal(x, y):\n    return check_line(x, y, 0, 1) or check_line(x, y, 0, -1)\n\n\ndef check_vertical(x, y):\n    return check_line(x, y, 1, 0) or check_line(x, y, -1, 0)\n\n\ndef check_diagonal(x, y):\n    return check_line(x, y, 1, 1) or check_line(x, y, 1, -1) or check_line(x, y, -1, 1) or check_line(x, y, -1, -1)\n\n\nfor i in range(10):\n    for j in range(10):\n        if board[i][j] == '.':\n            if check_horizontal(i, j) or check_vertical(i, j) or check_diagonal(i, j):\n                print('YES')\n                break\n    else:\n        continue\n    break\nelse:\n    print('NO')\n\n\ndef check(x, y):\n    if x < 0 or y < 0 or x >= 10 or y >= 10:\n        return False\n    return True\n\n\ndef check_line(x, y, dx, dy):\n    if not check(x, y):\n        return False\n    if not check(x + dx, y + dy):\n        return False\n    while check(x, y) and check(x + dx, y + dy):\n        x += dx\n        y += dy\n        if x == x + dx and y == y + dy:\n            return True\n    return False\n\n\ndef check_horizontal(x, y):\n    return check_line(x, y, 0, 1) or check_line(x, y, 0, -1)\n\n\ndef check_vertical(x, y):\n    return check_line(x, y, 1, 0) or check_line(x, y, -1, 0)\n\n\ndef", "\nimport sys\n\ndef check_win(board):\n    for i in range(10):\n        if board[i][0] == board[i][1] == board[i][2] == board[i][3] == board[i][4] == 'X':\n            return True\n        if board[0][i] == board[1][i] == board[2][i] == board[3][i] == board[4][i] == 'X':\n            return True\n    if board[0][0] == board[1][1] == board[2][2] == board[3][3] == board[4][4] == 'X':\n        return True\n    if board[4][0] == board[3][1] == board[2][2] == board[1][3] == board[0][4] == 'X':\n        return True\n    return False\n\ndef check_win_in_one_turn(board):\n    for i in range(10):\n        for j in range(10):\n            if board[i][j] == '.':\n                board[i][j] = 'X'\n                if check_win(board):\n                    board[i][j] = '.'\n                    return True\n                board[i][j] = 'O'\n    return False\n\nif __name__ == '__main__':\n    board = []\n    for i in range(10):\n        board.append(list(sys.stdin.readline().strip()))\n    if check_win_in_one_turn(board):\n        print('YES')\n    else:\n        print('NO')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\n\ndef check(x, y):\n    if x < 0 or x > 9 or y < 0 or y > 9:\n        return False\n    if board[x][y] == '.':\n        return True\n    return False\n\n\ndef check_win(x, y):\n    if x < 0 or x > 9 or y < 0 or y > 9:\n        return False\n    if board[x][y] == '.':\n        return False\n    if board[x][y] == 'X':\n        if check(x + 1, y + 1) and check(x + 2, y + 2) and check(x + 3, y + 3) and check(x + 4, y + 4):\n            return True\n        if check(x + 1, y - 1) and check(x + 2, y - 2) and check(x + 3, y - 3) and check(x + 4, y - 4):\n            return True\n        if check(x - 1, y + 1) and check(x - 2, y + 2) and check(x - 3, y + 3) and check(x - 4, y + 4):\n            return True\n        if check(x - 1, y - 1) and check(x - 2, y - 2) and check(x - 3, y - 3) and check(x - 4, y - 4):\n            return True\n        if check(x + 1, y + 1) and check(x + 2, y + 2) and check(x - 1, y - 1) and check(x - 2, y - 2):\n            return True\n        if check(x + 1, y - 1) and check(x + 2, y - 2) and check(x - 1, y + 1) and check(x - 2, y + 2):\n            return True\n    if board[x][y] == 'O':\n        if check(x + 1, y + 1) and check(x + 2, y + 2) and check(x + 3, y + 3) and check(x + 4, y + 4):\n            return True\n        if check(x + 1, y - 1) and check(x + 2, y - 2) and check(x + 3, y - 3) and check(x + 4, y - 4):\n            return True\n        if check(x - 1, y + 1) and check(x - 2, y + 2) and check(x - 3, y", "def cross(x,y):\n    if x<0 or x>=10 or y<0 or y>=10:\n        return False\n    else:\n        return board[x][y]=='X'\n\ndef nought(x,y):\n    if x<0 or x>=10 or y<0 or y>=10:\n        return False\n    else:\n        return board[x][y]=='O'\n\ndef win(x,y):\n    if cross(x,y) and cross(x+1,y+1) and cross(x+2,y+2) and cross(x+3,y+3):\n        return True\n    elif nought(x,y) and nought(x+1,y+1) and nought(x+2,y+2) and nought(x+3,y+3):\n        return True\n    elif cross(x,y) and cross(x+1,y-1) and cross(x+2,y-2) and cross(x+3,y-3):\n        return True\n    elif nought(x,y) and nought(x+1,y-1) and nought(x+2,y-2) and nought(x+3,y-3):\n        return True\n    elif cross(x,y) and cross(x+1,y) and cross(x+2,y) and cross(x+3,y):\n        return True\n    elif nought(x,y) and nought(x+1,y) and nought(x+2,y) and nought(x+3,y):\n        return True\n    elif cross(x,y) and cross(x,y+1) and cross(x,y+2) and cross(x,y+3):\n        return True\n    elif nought(x,y) and nought(x,y+1) and nought(x,y+2) and nought(x,y+3):\n        return True\n    elif cross(x,y) and cross(x-1,y+1) and cross(x-2,y+2) and cross(x-3,y+3):\n        return True\n    elif nought(x,y) and nought(x-1,y+1) and nought(x-2,y+2) and nought(x-3,y+3):\n        return True\n    elif cross(x,y) and cross(x-1,y-1) and cross(x-2,y-2) and cross(x-3,y-3):\n        return True\n    elif nought(x,y) and nought(x-1,y-1) and n", "import re\n\ndef check_win(board):\n    for row in board:\n        if len(set(row)) == 1 and row[0] != '.':\n            return True\n\n    for i in range(len(board[0])):\n        col = [row[i] for row in board]\n        if len(set(col)) == 1 and col[0] != '.':\n            return True\n\n    diag1 = [board[i][i] for i in range(len(board))]\n    diag2 = [board[i][len(board) - i - 1] for i in range(len(board))]\n    if len(set(diag1)) == 1 and diag1[0] != '.':\n        return True\n    if len(set(diag2)) == 1 and diag2[0] != '.':\n        return True\n\n    return False\n\n\ndef main():\n    board = []\n    for _ in range(10):\n        board.append(input())\n\n    if check_win(board):\n        print('YES')\n    else:\n        print('NO')\n\n\nif __name__ == '__main__':\n    main()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"], "rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "train rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "time": [35.15452480316162, 69.88096237182617, 104.86328840255737, 139.68837475776672, 174.3854787349701, 209.29288053512573, 243.93685626983643, 278.92074394226074, 313.52877736091614, 348.21123242378235], "sample times": 10}