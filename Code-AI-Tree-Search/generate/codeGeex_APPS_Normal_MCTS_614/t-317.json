{"codes": ["\ndef is_pangram(s):\n    s = s.lower()\n    s = s.replace(\" \", \"\")\n    s = s.replace(\",\", \"\")\n    s = s.replace(\".\", \"\")\n    s = s.replace(\"!\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\";\", \"\")\n    s = s.replace(\":\", \"\")\n    s = s.replace(\"'\", \"\")\n    s = s.replace('\"', \"\")\n    s = s.replace(\"-\", \"\")\n    s = s.replace(\"_\", \"\")\n    s = s.replace(\"(\", \"\")\n    s = s.replace(\")\", \"\")\n    s = s.replace(\"[\", \"\")\n    s = s.replace(\"]\", \"\")\n    s = s.replace(\"{\", \"\")\n    s = s.replace(\"}\", \"\")\n    s = s.replace(\"+\", \"\")\n    s = s.replace(\"=\", \"\")\n    s = s.replace(\"0\", \"\")\n    s = s.replace(\"1\", \"\")\n    s = s.replace(\"2\", \"\")\n    s = s.replace(\"3\", \"\")\n    s = s.replace(\"4\", \"\")\n    s = s.replace(\"5\", \"\")\n    s = s.replace(\"6\", \"\")\n    s = s.replace(\"7\", \"\")\n    s = s.replace(\"8\", \"\")\n    s = s.replace(\"9\", \"\")\n    s = s.replace(\"a\", \"\")\n    s = s.replace(\"b\", \"\")\n    s = s.replace(\"c\", \"\")\n    s = s.replace(\"d\", \"\")\n    s = s.replace(\"e\", \"\")\n    s = s.replace(\"f\", \"\")\n    s = s.replace(\"g\", \"\")\n    s = s.replace(\"h\", \"\")\n    s = s.replace(\"i\", \"\")\n    s = s.replace(\"j\", \"\")\n    s = s.replace(\"k\", \"\")\n    s = s.replace(\"l\", \"\")\n    s = s.replace(\"m\", \"\")\n    s = s.replace(\"n\", \"\")\n    s = s.replace(\"o\", \"\")\n    s = s.replace(\"p\", \"\")\n    s = s.replace(\"q\", \"\")\n    s = s.replace(\"r\", \"\")\n    s = s.replace(\"s\", \"\")\n    s = s.replace(\"t\", \"\")\n    s = s.replace(\"u\", \"\")\n    s = s.replace(\"v\", \"\")\n    s = s.replace(\"w\", \"\")\n    s = s.replace(\"x\", \"\")\n    s = s.replace(\"y\", \"\")\n    s = s.replace(\"z\", \"\")\n    s = s.replace(\"A\", \"\")\n    s = s.replace(\"B\", \"\")\n    s = s.replace(\"C\", \"\")\n    s = s.replace(\"D\", \"\")\n    s = s.replace(\"E\", \"\")\n    s = s.replace(\"F\", \"\")\n    s = s.replace(\"G\",", "def is_pangram(s):\n    s = s.lower()\n    for i in range(97, 123):\n        if chr(i) not in s:\n            return False\n    return True\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input())\n\n    s = input()\n\n    result = is_pangram(s)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n\"\"\"\n\n\ndef is_pangram(s):\n    s = s.lower()\n    for i in range(97, 123):\n        if chr(i) not in s:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    fptr = open(os.environ[\"OUTPUT_PATH\"], \"w\")\n\n    s = input()\n\n    result = is_pangram(s)\n\n    fptr.write(str(result) + \"\\n\")\n\n    fptr.close()", "\n\ndef is_pangram(s):\n    return len(set(s.lower())) == 26\n\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input())\n\n    s = input()\n\n    result = is_pangram(s)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()", "import string\n\ndef is_pangram(s):\n    alphabet = string.ascii_lowercase + string.ascii_uppercase\n    for letter in alphabet:\n        if letter not in s:\n            return False\n    return True\n\nif __name__ == '__main__':\n    n = int(input())\n    s = input()\n    if is_pangram(s):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\nimport string\n\ndef is_pangram(s):\n    alphabet = string.ascii_lowercase + string.ascii_uppercase\n    for letter in alphabet:\n        if letter not in s:\n            return False\n    return True\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input())\n\n    s = input()\n\n    result = is_pangram(s)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()", "def pangram(s):\n    s = s.lower()\n    for i in range(97, 123):\n        if chr(i) not in s:\n            return \"NO\"\n    return \"YES\"", "\n\n\nclass Solution:\n    def isPangram(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        return len(set(s.lower())) == 26"], "rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "train rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "time": [40.23902916908264, 56.33197283744812, 69.65519380569458, 110.16058421134949, 123.11296701431274, 128.57130479812622, 133.08992266654968], "sample times": 7}