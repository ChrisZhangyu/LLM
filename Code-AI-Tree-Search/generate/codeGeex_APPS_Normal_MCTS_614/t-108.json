{"codes": ["\nclass Solution(object):\n    def getSmallestString(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: str\n        \"\"\"\n        if k == 0:\n            return 'a' * n\n        if n == 1:\n            return 'z' if k == 26 else '-1'\n        if k < 26:\n            return 'a' + self.getSmallestString(n - 1, k)\n        if k == 26:\n            return 'z' + self.getSmallestString(n - 1, k - 26)\n        return '-1'", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import sys\nimport string\n\nalphabet = list(string.ascii_lowercase)\n\ndef get_next_letter(letter):\n    index = alphabet.index(letter)\n    if index == len(alphabet) - 1:\n        return alphabet[0]\n    else:\n        return alphabet[index + 1]\n\ndef get_previous_letter(letter):\n    index = alphabet.index(letter)\n    if index == 0:\n        return alphabet[len(alphabet) - 1]\n    else:\n        return alphabet[index - 1]\n\ns = sys.stdin.readline().strip()\n\nif s == ''.join(sorted(s)):\n    result = ''\n    for letter in s:\n        result += get_next_letter(letter)\n    print(result)\nelse:\n    print('-1')\n\n\"\"\"\n\n\ndef get_next_letter(letter):\n    index = alphabet.index(letter)\n    if index == len(alphabet) - 1:\n        return alphabet[0]\n    else:\n        return alphabet[index + 1]\n\n\ndef get_previous_letter(letter):\n    index = alphabet.index(letter)\n    if index == 0:\n        return alphabet[len(alphabet) - 1]\n    else:\n        return alphabet[index - 1]\n\n\ns = sys.stdin.readline().strip()\n\nif s == ''.join(sorted(s)):\n    result = ''\n    for letter in s:\n        result += get_next_letter(letter)\n    print(result)\nelse:\n    print('-1')", "\nimport sys\nimport string\n\nalphabet = list(string.ascii_lowercase)\n\ndef get_next_letter(letter):\n    index = alphabet.index(letter)\n    if index == len(alphabet) - 1:\n        return alphabet[0]\n    else:\n        return alphabet[index + 1]\n\ndef get_previous_letter(letter):\n    index = alphabet.index(letter)\n    if index == 0:\n        return alphabet[len(alphabet) - 1]\n    else:\n        return alphabet[index - 1]\n\ndef get_subsequence(string):\n    subsequence = []\n    for letter in string:\n        if letter not in subsequence:\n            subsequence.append(letter)\n    return subsequence\n\ndef get_next_subsequence(subsequence):\n    next_subsequence = []\n    for letter in subsequence:\n        next_letter = get_next_letter(letter)\n        if next_letter not in next_subsequence:\n            next_subsequence.append(next_letter)\n    return next_subsequence\n\ndef get_previous_subsequence(subsequence):\n    previous_subsequence = []\n    for letter in subsequence:\n        previous_letter = get_previous_letter(letter)\n        if previous_letter not in previous_subsequence:\n            previous_subsequence.append(previous_letter)\n    return previous_subsequence\n\ndef is_subsequence(subsequence, string):\n    for letter in subsequence:\n        if letter in string:\n            string = string.replace(letter, '', 1)\n        else:\n            return False\n    return True\n\ndef get_next_subsequence_string(string):\n    subsequence = get_subsequence(string)\n    next_subsequence = get_next_subsequence(subsequence)\n    next_subsequence_string = ''.join(next_subsequence)\n    return next_subsequence_string\n\ndef get_previous_subsequence_string(string):\n    subsequence = get_subsequence(string)\n    previous_subsequence = get_previous_subsequence(subsequence)\n    previous_subsequence_string = ''.join(previous_subsequence)\n    return previous_subsequence_string\n\nstring = sys.stdin.readline().strip()\n\nif is_subsequence(get_subsequence(string), string):\n    print(string)\nelif is_subsequence(get_next_subsequence(get_subsequence(string)), string):\n    print(get_next_subsequence_string(string))\nelif is_subsequence(get_previous_subsequence(get_subsequence(string)), string):\n    print(get_previous", "#include<bits/stdc++.h>\nusing namespace std;\nint main()\n{\n    string s;\n    cin>>s;\n    int n=s.size();\n    for(int i=0;i<n;i++)\n    {\n        for(int j=i+1;j<n;j++)\n        {\n            if(s[i]>s[j])\n            {\n                swap(s[i],s[j]);\n            }\n        }\n    }\n    if(s==\"abcdefghijklmnopqrstuvwxyz\")\n    {\n        cout<<s;\n    }\n    else\n    {\n        cout<<\"-1\";\n    }\n}\n```", "import string\nalphabet = string.ascii_lowercase\n\ndef get_next_letter(letter):\n    if letter == 'z':\n        return 'a'\n    else:\n        return chr(ord(letter) + 1)\n\ndef get_previous_letter(letter):\n    if letter == 'a':\n        return 'z'\n    else:\n        return chr(ord(letter) - 1)\n\ndef get_alphabet_sequence(string):\n    sequence = []\n    for letter in string:\n        if letter not in sequence:\n            sequence.append(letter)\n    return ''.join(sequence)\n\ndef get_next_string(string):\n    next_string = ''\n    for letter in string:\n        next_string += get_next_letter(letter)\n    return next_string\n\ndef get_previous_string(string):\n    previous_string = ''\n    for letter in string:\n        previous_string += get_previous_letter(letter)\n    return previous_string\n\ndef get_alphabet_sequence_from_string(string):\n    sequence = []\n    for letter in string:\n        if letter not in sequence:\n            sequence.append(letter)\n    return ''.join(sequence)\n\ndef get_next_string_from_alphabet_sequence(sequence):\n    next_string = ''\n    for letter in sequence:\n        next_string += get_next_letter(letter)\n    return next_string\n\ndef get_previous_string_from_alphabet_sequence(sequence):\n    previous_string = ''\n    for letter in sequence:\n        previous_string += get_previous_letter(letter)\n    return previous_string\n\ndef get_string_from_alphabet_sequence(sequence):\n    string = ''\n    for letter in sequence:\n        string += letter\n    return string\n\ndef get_next_string_from_string(string):\n    next_string = ''\n    for letter in string:\n        next_string += get_next_letter(letter)\n    return next_string\n\ndef get_previous_string_from_string(string):\n    previous_string = ''\n    for letter in string:\n        previous_string += get_previous_letter(letter)\n    return previous_string\n\ndef get_string_from_alphabet_sequence_from_string(string):\n    sequence = []\n    for letter in string:\n        if letter not in sequence:\n            sequence.append(letter)\n    return ''.join(sequence)\n\ndef get_next_string_from_string_from_alphabet_sequence(string):\n    next_string = ''\n    for letter in string:\n        next_string += get_next_letter(letter)\n    return next_string\n\ndef get_previous_string_from_string_", "\n\nimport sys\nimport string\n\nalphabet = list(string.ascii_lowercase)\nalphabet.remove('z')\n\ns = sys.stdin.readline().strip()\n\nif s == ''.join(sorted(s)):\n    print(''.join(alphabet))\nelse:\n    print('-1')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\n\ndef next_letter(letter):\n    if letter == 'z':\n        return 'a'\n    else:\n        return chr(ord(letter) + 1)\n\n\ndef solution(s):\n    s = list(s)\n    for i in range(len(s)):\n        if s[i] == 'z':\n            s[i] = 'a'\n        else:\n            s[i] = next_letter(s[i])\n    return ''.join(s)\n\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = input()\n\n    result = solution(s)\n\n    if result == 'abcdefghijklmnopqrstuvwxyz':\n        fptr.write('YES\\n')\n        fptr.write(result)\n    else:\n        fptr.write('NO')\n\n    fptr.close()\n\"\"\"\n\n\ndef next_letter(letter):\n    if letter == \"z\":\n        return \"a\"\n    else:\n        return chr(ord(letter) + 1)\n\n\ndef solution(s):\n    s = list(s)\n    for i in range(len(s)):\n        if s[i] == \"z\":\n            s[i] = \"a\"\n        else:\n            s[i] = next_letter(s[i])\n    return \"\".join(s)\n\n\nif __name__ == \"__main__\":\n    fptr = open(os.environ[\"OUTPUT_PATH\"], \"w\")\n\n    s = input()\n\n    result = solution(s)\n\n    if result == \"abcdefghijklmnopqrstuvwxyz\":\n        fptr.write(\"YES\\n\")\n        fptr.write(result)\n    else:\n        fptr.write(\"NO\")\n\n    fptr.close()"], "rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.10204081632653061, 0.0], "train rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.061224489795918366, 0.0], "time": [11.847123622894287, 51.42475986480713, 74.74244022369385, 113.6907091140747, 125.51822400093079, 164.811425447464, 203.6935305595398, 231.1832308769226], "sample times": 8}