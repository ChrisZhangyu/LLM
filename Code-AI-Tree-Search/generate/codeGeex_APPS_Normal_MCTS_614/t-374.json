{"codes": ["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import sys\n\nn = int(sys.stdin.readline().strip())\np = [int(x) for x in sys.stdin.readline().strip().split()]\na = [int(x) for x in sys.stdin.readline().strip().split()]\n\ndef dfs(i):\n    if a[i] == 0:\n        return 0\n    else:\n        a[i] -= 1\n        return 1 + dfs(p[i])\n\nans = 0\nfor i in range(n):\n    if a[i] > 0:\n        ans += dfs(i)\n\nprint(ans)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "class Solution(object):\n    def solve(self, cipher):\n        \"\"\"\n        :param cipher: the cipher\n        \"\"\"\n        n = cipher[0]\n        p = cipher[1]\n        a = cipher[2]\n\n        graph = [[] for _ in xrange(n + 1)]\n        for i in xrange(1, n + 1):\n            graph[p[i - 1]].append(i)\n\n        ans = 0\n        for i in xrange(1, n + 1):\n            if not graph[i]:\n                ans += a[i]\n\n        return ans\n\n\nif __name__ == \"__main__\":\n    import sys\n\n    f = open(\"1.in\", \"r\")\n    # f = sys.stdin\n    solution = Solution()\n    testcases = int(f.readline().strip())\n\n    for t in xrange(testcases):\n        n = int(f.readline().strip())\n        p = map(int, f.readline().strip().split(\" \"))\n        a = map(int, f.readline().strip().split(\" \"))\n        cipher = [n, p, a]\n\n        # solve\n        s = \"%s\\n\" % (solution.solve(cipher))\n        print s,", "\nimport sys\n\nn = int(sys.stdin.readline().strip())\np = [int(x) for x in sys.stdin.readline().strip().split()]\na = [int(x) for x in sys.stdin.readline().strip().split()]\n\ndef dfs(i):\n    visited[i] = True\n    for j in range(1, n+1):\n        if not visited[j] and p[j-1] == i:\n            dfs(j)\n\nvisited = [False] * (n + 1)\n\nfor i in range(1, n+1):\n    if not visited[i]:\n        dfs(i)\n\nans = 0\nfor i in range(1, n+1):\n    if not visited[i]:\n        ans += a[i-1]\n\nprint(ans)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\ndef main():\n    n = int(input())\n    p = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    \n    for i in range(n):\n        if a[i] == 0:\n            continue\n        else:\n            a[p[i] - 1] += a[i]\n            a[i] = 0\n    \n    print(a[0])\n    \n    \nif __name__ == '__main__':\n    main()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import math\nimport os\nimport random\nimport re\nimport sys\n\n\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input())\n\n    p = list(map(int, input().rstrip().split()))\n\n    a = list(map(int, input().rstrip().split()))\n\n    for i in range(n):\n        if a[i] == 0:\n            a[i] = 1\n        else:\n            a[i] = 0\n\n    for i in range(1, n):\n        if p[i-1] > p[i]:\n            p[i-1], p[i] = p[i], p[i-1]\n            a[p[i-1]-1], a[p[i]-1] = a[p[i]-1], a[p[i-1]-1]\n\n    for i in range(1, n):\n        if a[i-1] == 1:\n            a[i-1] = 0\n        else:\n            a[i-1] = 1\n\n    for i in range(1, n):\n        if a[i-1] == 1:\n            a[i-1] = 0\n        else:\n            a[i-1] = 1\n\n    for i in range(1, n):\n        if a[i-1] == 1:\n            a[i-1] = 0\n        else:\n            a[i-1] = 1\n\n    for i in range(1, n):\n        if a[i-1] == 1:\n            a[i-1] = ", "class Solution:\n    def solve(self):\n        n = int(input())\n        p = [int(x) for x in input().split()]\n        a = [int(x) for x in input().split()]\n        for i in range(1, n):\n            p[i] = p[i] - 1\n        for i in range(1, n):\n            a[i] = a[i] - a[p[i]]\n            a[p[i]] = a[p[i]] + a[i]\n        print(a[1])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"], "rewards": [0.0, 0.037037037037037035, 0.0, 0.0, 0.0, 0.0, 0.0], "train rewards": [0.0, 0.14814814814814814, 0.0, 0.0, 0.0, 0.0, 0.0], "time": [24.06650185585022, 47.53514266014099, 66.05893850326538, 89.65808963775635, 113.32666087150574, 136.6831409931183, 159.8490972518921], "sample times": 7}