{"codes": ["\n#include<bits/stdc++.h>\nusing namespace std;\nint main()\n{\n    int n,m;\n    cin>>n>>m;\n    vector<int>a;\n    for(int i=1;i<=n-1;i++)\n    {\n        int x,y;\n        cin>>x>>y;\n    }\n    for(int i=1;i<=m;i++)\n    {\n        int x;\n        cin>>x;\n        a.push_back(x);\n    }\n    sort(a.begin(),a.end());\n    cout<<a[0]<<endl;\n    int ans=0;\n    for(int i=1;i<=n-1;i++)\n    {\n        int x,y;\n        cin>>x>>y;\n        if(x==a[0]||y==a[0])\n        {\n            ans++;\n        }\n    }\n    cout<<ans<<endl;\n    return 0;\n}\n```", "#include<bits/stdc++.h>\nusing namespace std;\nint main()\n{\n    int n,m;\n    cin>>n>>m;\n    vector<int>a;\n    for(int i=1;i<n;i++)\n    {\n        int x,y;\n        cin>>x>>y;\n    }\n    for(int i=1;i<=m;i++)\n    {\n        int x;\n        cin>>x;\n        a.push_back(x);\n    }\n    sort(a.begin(),a.end());\n    for(int i=0;i<a.size();i++)\n    {\n        cout<<a[i]<<endl;\n    }\n    return 0;\n}\n```", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```", "import sys\n\nn, m = map(int, sys.stdin.readline().split())\ngraph = {}\nfor i in range(n - 1):\n    u, v = map(int, sys.stdin.readline().split())\n    if u not in graph:\n        graph[u] = []\n    if v not in graph:\n        graph[v] = []\n    graph[u].append(v)\n    graph[v].append(u)\n\nattack = list(map(int, sys.stdin.readline().split()))\nattack.sort()\n\n\ndef bfs(graph, start):\n    visited = set()\n    queue = [start]\n    while queue:\n        vertex = queue.pop(0)\n        if vertex not in visited:\n            visited.add(vertex)\n            queue.extend(set(graph[vertex]) - visited)\n    return visited\n\n\nvisited = bfs(graph, 1)\n\n\ndef dfs(graph, start):\n    visited = set()\n    stack = [start]\n    while stack:\n        vertex = stack.pop()\n        if vertex not in visited:\n            visited.add(vertex)\n            stack.extend(set(graph[vertex]) - visited)\n    return visited\n\n", "\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\ngraph = {}\nfor i in range(n - 1):\n    u, v = map(int, sys.stdin.readline().split())\n    if u not in graph:\n        graph[u] = []\n    if v not in graph:\n        graph[v] = []\n    graph[u].append(v)\n    graph[v].append(u)\n\nattack = list(map(int, sys.stdin.readline().split()))\nattack.sort()\n\n\ndef bfs(start):\n    visited = set()\n    queue = []\n    queue.append(start)\n    visited.add(start)\n    time = 0\n    while len(queue) > 0:\n        time += 1\n        size = len(queue)\n        for i in range(size):\n            current = queue.pop(0)\n            for neighbor in graph[current]:\n                if neighbor not in visited:\n                    visited.add(neighbor)\n                    queue.append(neighbor)\n    return time\n\n\ntime = bfs(attack[0])\nfor i in range(1, len(attack)):\n    time = min(time, bfs(attack[i", "#include <bits/stdc++.h>\nusing namespace std;\nint main()\n{\n    int n,m;\n    cin>>n>>m;\n    vector<int>a;\n    for(int i=0;i<n-1;i++)\n    {\n        int x,y;\n        cin>>x>>y;\n    }\n    for(int i=0;i<m;i++)\n    {\n        int x;\n        cin>>x;\n    }\n    return 0;\n}\n```"], "rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "train rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "time": [14.165702819824219, 31.850839614868164, 36.205190896987915, 53.91097903251648, 71.62096858024597, 83.03271269798279], "sample times": 6}