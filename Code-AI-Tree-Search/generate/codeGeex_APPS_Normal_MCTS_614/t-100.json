{"codes": ["import sys\n\nn, m = sys.stdin.readline().split()\nn = int(n)\nm = int(m)\n\nmatrix = []\nfor i in range(n):\n    matrix.append(sys.stdin.readline().strip())\n\n\ndef check(x, y):\n    if matrix[x][y] == 'w':\n        matrix[x][y] = '+'\n        if x > 0:\n            check(x - 1, y)\n        if x < n - 1:\n            check(x + 1, y)\n        if y > 0:\n            check(x, y - 1)\n        if y < m - 1:\n            check(x, y + 1)\n\n\nfor i in range(n):\n    for j in range(m):\n        if matrix[i][j] == 'w':\n            check(i, j)\n\nfor i in range(n):\n", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n# https://github.com/terryyin/leetcode\n# Time:  O(n^2)\n\n\nclass Solution(object):\n    def __init__(self):\n        self.n = 0\n        self.m = 0\n        self.board = []\n\n    def readBoard(self):\n        self.n, self.m = map(int, input().split())\n        for i in range(self.n):\n            self.board.append(list(input()))\n\n    def printBoard(self):\n        for i in range(self.n):\n            print(''.join(self.board[i]))\n\n    def findSquare(self):\n        for i in range(self.n):\n            for j in range(self.m):\n                if self.board[i][j] == 'w':\n                    self", "\nimport sys\n\nn, m = sys.stdin.readline().split()\nn = int(n)\nm = int(m)\nmatrix = []\nfor i in range(n):\n    matrix.append(list(sys.stdin.readline().strip()))\n\ndef check(x, y):\n    if matrix[x][y] == 'w':\n        matrix[x][y] = '+'\n        if x > 0:\n            check(x - 1, y)\n        if x < n - 1:\n            check(x + 1, y)\n        if y > 0:\n            check(x, y - 1)\n        if y < m - 1:\n            check(x, y + 1)\n\nfor i in range(n):\n    for j in range(m):\n        if matrix[i][j] == 'w':\n            check(i, j)\n\nfor i in range(n):\n", "\ndef main():\n    n, m = [int(i) for i in input().split()]\n    screen = []\n    for i in range(n):\n        screen.append(list(input()))\n\n    for i in range(n):\n        for j in range(m):\n            if screen[i][j] == \".\":\n                screen[i][j] = 0\n            else:\n                screen[i][j] = 1\n\n    for i in range(n):\n        for j in range(m):\n            if screen[i][j] == 1:\n                screen[i][j] = 0\n            else:\n                screen[i][j] = 1\n\n    for i in range(n):\n        for j in range(m):\n            if screen[i][j] == 1:\n                screen[i][j] = 0\n            else:\n                screen[i][j] = 1\n\n    for i", "#include<bits/stdc++.h>\nusing namespace std;\nint main()\n{\n\tint n,m;\n\tcin>>n>>m;\n\tchar a[n][m];\n\tfor(int i=0;i<n;i++)\n\t{\n\t\tfor(int j=0;j<m;j++)\n\t\t{\n\t\t\tcin>>a[i][j];\n\t\t}\n\t}\n\tfor(int i=0;i<n;i++)\n\t{\n\t\tfor(int j=0;j<m;j++)\n\t\t{\n\t\t\tif(a[i][j]=='w')\n\t\t\t{\n\t\t\t\tcout<<\"w\";\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcout<<\"+\";\n\t\t\t}\n\t\t}\n\t\tcout<<endl;\n\t}\n\treturn 0;\n}\n\n", "import sys\nimport numpy as np\n\nn, m = map(int, sys.stdin.readline().split())\na = np.array([list(sys.stdin.readline().strip()) for i in range(n)])\nb = np.array([list(sys.stdin.readline().strip()) for i in range(n)])\nc = np.array([list(sys.stdin.readline().strip()) for i in range(n)])\nd = np.array([list(sys.stdin.readline().strip()) for i in range(n)])\ne = np.array([list(sys.stdin.readline().strip()) for i in range(n)])\nf = np.array([list(sys.stdin.readline().strip()) for i in range(n)])\ng = np.array([list(sys.stdin.readline().strip()) for i in range(n)])\nh = np.array([list(sys"], "rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "train rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "time": [14.121961832046509, 28.819918632507324, 43.620216369628906, 58.754000663757324, 73.50397276878357, 88.20706725120544, 102.77953553199768], "sample times": 7}