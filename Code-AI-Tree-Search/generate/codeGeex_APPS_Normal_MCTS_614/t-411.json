{"codes": ["\nclass Solution(object):\n    def assignSpaceship(self, r, b):\n        \"\"\"\n        :type r: int\n        :type b: int\n        :rtype: bool\n        \"\"\"\n        if r == 0 or b == 0:\n            return True\n        if r == 1 and b == 1:\n            return True\n        if r == 2 and b == 2:\n            return True\n        if r == 3 and b == 3:\n            return True\n        if r == 4 and b == 4:\n            return True\n        if r == 5 and b == 5:\n            return True\n        if r == 6 and b == 6:\n            return True\n        if r == 7 and b == 7:\n            return True\n        if r == 8 and b == 8:\n            return True\n        if r == 9 and b == 9:\n            return True\n        if r == 10 and b == 10:\n            return True\n        if r == 11 and b == 11:\n            return True\n        if r == 12 and b == 12:\n            return True\n        if r == 13 and b == 13:\n            return True\n        if r == 14 and b == 14:\n            return True\n        if r == 15 and b == 15:\n            return True\n        if r == 16 and b == 16:\n            return True\n        if r == 17 and b == 17:\n            return True\n        if r == 18 and b == 18:\n            return True\n        if r == 19 and b == 19:\n            return True\n        if r == 20 and b == 20:\n            return True\n        if r == 21 and b == 21:\n            return True\n        if r == 22 and b == 22:\n            return True\n        if r == 23 and b == 23:\n            return True\n        if r == 24 and b == 24:\n            return True\n        if r == 25 and b == 25:\n            return True\n        if r == 26 and b == 26:\n            return True\n        if r == 27 and b == 27:\n            return True\n        if r == 28 and b == 28:\n            return True\n        if r ==", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import numpy as np\nimport math\nimport sys\n\n\ndef is_intersect(x1, y1, x2, y2, x3, y3, x4, y4):\n    if (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4) != 0:\n        return True\n    else:\n        return False\n\n\nif __name__ == '__main__':\n    R, B = map(int, sys.stdin.readline().split())\n    rebel = []\n    base = []\n    for i in range(R):\n        x, y = map(int, sys.stdin.readline().split())\n        rebel.append([x, y])\n    for i in range(B):\n        x, y = map(int, sys.stdin.readline().split())\n        base.append([x, y])\n    rebel = np.array(rebel)\n    base = np.array(base)\n    for i in range(R):\n        for j in range(B):\n            if is_intersect(rebel[i][0], rebel[i][1], base[j][0], base[j][1],\n                            rebel[i][0], rebel[i][1], base[j][0], base[j][1]):\n                print(\"No\")\n                sys.exit(0)\n    print(\"Yes\")", "\nimport numpy as np\nimport math\nimport sys\n\ndef is_intersect(x1, y1, x2, y2, x3, y3, x4, y4):\n    if (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4) != 0:\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    R, B = map(int, sys.stdin.readline().split())\n    rebel = []\n    base = []\n    for i in range(R):\n        x, y = map(int, sys.stdin.readline().split())\n        rebel.append([x, y])\n    for i in range(B):\n        x, y = map(int, sys.stdin.readline().split())\n        base.append([x, y])\n    rebel = np.array(rebel)\n    base = np.array(base)\n    for i in range(R):\n        for j in range(B):\n            if is_intersect(rebel[i, 0], rebel[i, 1], base[j, 0], base[j, 1], rebel[i, 0], rebel[i, 1], base[j, 0], base[j, 1]):\n                print('No')\n                sys.exit(0)\n    print('Yes')", "class Solution(object):\n    def assignSpaceships(self, r, b):\n        \"\"\"\n        :type r: int\n        :type b: int\n        :rtype: bool\n        \"\"\"\n        if r == 0 or b == 0:\n            return True\n        elif r == 1 and b == 1:\n            return True\n        elif r == 2 and b == 1:\n            return True\n        elif r == 1 and b == 2:\n            return True\n        elif r == 2 and b == 2:\n            return True\n        elif r == 3 and b == 2:\n            return True\n        elif r == 2 and b == 3:\n            return True\n        elif r == 3 and b == 3:\n            return True\n        elif r == 4 and b == 3:\n            return True\n        elif r == 3 and b == 4:\n            return True\n        elif r == 4 and b == 4:\n            return True\n        elif r == 5 and b == 4:\n            return True\n        elif r == 4 and b == 5:\n            return True\n        elif r == 5 and b == 5:\n            return True\n        elif r == 6 and b == 5:\n            return True\n        elif r == 5 and b == 6:\n            return True\n        elif r == 6 and b == 6:\n            return True\n        elif r == 7 and b == 6:\n            return True\n        elif r == 6 and b == 7:\n            return True\n        elif r == 7 and b == 7:\n            return True\n        elif r == 8 and b == 7:\n            return True\n        elif r == 7 and b == 8:\n            return True\n        elif r == 8 and b == 8:\n            return True\n        elif r == 9 and b == 8:\n            return True\n        elif r == 8 and b == 9:\n            return True\n        elif r == 9 and b == 9:\n            return True\n        elif r == 10 and b == 9:\n            return True\n        elif r == 9 and b == 10:\n            return True\n        elif r == 10 and b == 10:\n            return True", "import sys\nimport math\n\n\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __eq__(self, other):\n        return self.x == other.x and self.y == other.y\n\n    def __hash__(self):\n        return hash((self.x, self.y))\n\n\nclass Line:\n    def __init__(self, p1, p2):\n        self.p1 = p1\n        self.p2 = p2\n\n    def __eq__(self, other):\n        return self.p1 == other.p1 and self.p2 == other.p2\n\n    def __hash__(self):\n        return hash((self.p1, self.p2))\n\n    def __repr__(self):\n        return str(self.p1) + \" \" + str(self.p2)\n\n\ndef get_lines(points):\n    lines = set()\n    for i in range(len(points) - 1):\n        for j in range(i + 1, len(points)):\n            lines.add(Line(points[i], points[j]))\n    return lines\n\n\ndef get_intersections(lines):\n    intersections = set()\n    for i in range(len(lines) - 1):\n        for j in range(i + 1, len(lines)):\n            if lines[i].p1 == lines[j].p1 or lines[i].p1 == lines[j].p2 or lines[i].p2 == lines[j].p1 or lines[i].p2 == lines[j].p2:\n                continue\n            if lines[i].p1.x == lines[i].p2.x:\n                if lines[j].p1.x == lines[j].p2.x:\n                    continue\n                if lines[j].p1.x > lines[i].p1.x and lines[j].p1.x < lines[i].p2.x or lines[j].p2.x > lines[i].p1.x and lines[j].p2.x < lines[i].p2.x:\n                    continue\n            if lines[i].p1.y == lines[i].p2.y:\n                if lines[j].p1.y == lines[j].p2.y:\n                    continue\n                if lines[j].p1.y > lines[i].p1.y", "\nimport sys\nimport math\n\n\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __eq__(self, other):\n        return self.x == other.x and self.y == other.y\n\n    def __hash__(self):\n        return hash((self.x, self.y))\n\n\nclass Line:\n    def __init__(self, p1, p2):\n        self.p1 = p1\n        self.p2 = p2\n\n    def __eq__(self, other):\n        return self.p1 == other.p1 and self.p2 == other.p2\n\n    def __hash__(self):\n        return hash((self.p1, self.p2))\n\n    def __repr__(self):\n        return str(self.p1) + \" \" + str(self.p2)\n\n\ndef get_lines(points):\n    lines = set()\n    for i in range(len(points) - 1):\n        for j in range(i + 1, len(points)):\n            lines.add(Line(points[i], points[j]))\n    return lines\n\n\ndef get_intersections(lines):\n    intersections = set()\n    for i in range(len(lines) - 1):\n        for j in range(i + 1, len(lines)):\n            if lines[i].p1 == lines[j].p1 or lines[i].p1 == lines[j].p2:\n                continue\n            if lines[i].p1 == lines[j].p2 or lines[i].p2 == lines[j].p1:\n                continue\n            if lines[i].p1 == lines[j].p1 or lines[i].p1 == lines[j].p2:\n                continue\n            if lines[i].p1 == lines[j].p1 or lines[i].p1 == lines[j].p2:\n                continue\n            if lines[i].p1 == lines[j].p1 or lines[i].p1 == lines[j].p2:\n                continue\n            if lines[i].p1 == lines[j].p1 or lines[i].p1 == lines[j].p2:\n                continue\n            if lines[i].p1 == lines[j].p1 or lines[i].p1 == lines[j].p2:\n                continue\n            if lines[i].p1 == lines[j].", "import math\nimport sys\n\n\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __str__(self):\n        return \"(\" + str(self.x) + \", \" + str(self.y) + \")\"\n\n    def __repr__(self):\n        return \"(\" + str(self.x) + \", \" + str(self.y) + \")\"\n\n    def __eq__(self, other):\n        return self.x == other.x and self.y == other.y\n\n    def __hash__(self):\n        return hash((self.x, self.y))\n\n\nclass Line:\n    def __init__(self, p1, p2):\n        self.p1 = p1\n        self.p2 = p2\n\n    def __str__(self):\n        return \"[\" + str(self.p1) + \", \" + str(self.p2) + \"]\"\n\n    def __repr__(self):\n        return \"[\" + str(self.p1) + \", \" + str(self.p2) + \"]\"\n\n    def __eq__(self, other):\n        return self.p1 == other.p1 and self.p2 == other.p2\n\n    def __hash__(self):\n        return hash((self.p1, self.p2))\n\n    def get_slope(self):\n        if self.p1.x == self.p2.x:\n            return math.inf\n        else:\n            return (self.p1.y - self.p2.y) / (self.p1.x - self.p2.x)\n\n    def get_y_intercept(self):\n        if self.p1.x == self.p2.x:\n            return math.inf\n        else:\n            return self.p1.y - self.p1.x * (self.p1.y - self.p2.y) / (self.p1.x - self.p2.x)\n\n    def get_x_intercept(self, y):\n        if self.p1.x == self.p2.x:\n            return math.inf\n        else:\n            return (y - self.p1.y) / (self.p1.x - self.p2.x) * self.p1.x + self.p1.y\n\n    def is_vertical(self):", "\nimport math\nimport sys\n\n\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __str__(self):\n        return \"(\" + str(self.x) + \", \" + str(self.y) + \")\"\n\n    def __repr__(self):\n        return \"(\" + str(self.x) + \", \" + str(self.y) + \")\"\n\n    def __eq__(self, other):\n        return self.x == other.x and self.y == other.y\n\n    def __hash__(self):\n        return hash((self.x, self.y))\n\n\nclass Line:\n    def __init__(self, p1, p2):\n        self.p1 = p1\n        self.p2 = p2\n\n    def __str__(self):\n        return \"[\" + str(self.p1) + \", \" + str(self.p2) + \"]\"\n\n    def __repr__(self):\n        return \"[\" + str(self.p1) + \", \" + str(self.p2) + \"]\"\n\n    def __eq__(self, other):\n        return self.p1 == other.p1 and self.p2 == other.p2\n\n    def __hash__(self):\n        return hash((self.p1, self.p2))\n\n    def get_slope(self):\n        if self.p1.x == self.p2.x:\n            return math.inf\n        else:\n            return (self.p1.y - self.p2.y) / (self.p1.x - self.p2.x)\n\n    def get_y_intercept(self):\n        if self.p1.x == self.p2.x:\n            return math.inf\n        else:\n            return self.p1.y - self.p1.x * (self.p1.y - self.p2.y) / (self.p1.x - self.p2.x)\n\n    def get_x_intercept(self, y):\n        if self.p1.x == self.p2.x:\n            return math.inf\n        else:\n            return (y - self.p1.y) * (self.p1.x - self.p2.x) / (self.p1.y - self.p2.y) + self.p1.x\n", "\n\ndef main():\n    R, B = map(int, input().split())\n    rebel = []\n    base = []\n    for i in range(R):\n        x, y = map(int, input().split())\n        rebel.append((x, y))\n    for i in range(B):\n        x, y = map(int, input().split())\n        base.append((x, y))\n    rebel.sort()\n    base.sort()\n    for i in range(R):\n        for j in range(B):\n            if (rebel[i][0] - base[j][0]) * (rebel[i][0] - base[j][0]) + (rebel[i][1] - base[j][1]) * (rebel[i][1] - base[j][1]) == 0:\n                print(\"No\")\n                return\n    print(\"Yes\")\n\n\nif __name__ == '__main__':\n    main()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"], "rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "train rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "time": [30.27301263809204, 61.54675769805908, 81.33423137664795, 101.22098326683044, 130.612060546875, 162.57115840911865, 194.49741649627686, 226.1528069972992, 257.8589029312134, 289.88324522972107], "sample times": 10}