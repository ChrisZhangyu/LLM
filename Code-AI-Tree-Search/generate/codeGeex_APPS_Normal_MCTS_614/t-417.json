{"codes": ["\nclass Solution(object):\n    def solve(self, cipher):\n        \"\"\"\n        main solution function\n        :param cipher: the cipher\n        \"\"\"\n        # TODO\n\n\nif __name__ == \"__main__\":\n    import sys\n\n    f = open(\"1.in\", \"r\")\n    # f = sys.stdin\n    testcases = int(f.readline().strip())\n\n    for t in xrange(testcases):\n        cipher = map(int, f.readline().strip().split(' '))\n\n        # solve\n        s = \"%s\\n\" % (Solution().solve(cipher))\n        print s,", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "class Solution(object):\n    def solve(self, cipher):\n        \"\"\"\n        main solution function\n        :param cipher: the cipher\n        \"\"\"\n        # TODO\n\n\nif __name__ == \"__main__\":\n    import sys\n\n    f = open(\"1.in\", \"r\")\n    # f = sys.stdin\n    testcases = int(f.readline().strip())\n\n    for t in xrange(testcases):\n        cipher = map(int, f.readline().strip().split(' '))\n\n        # solve\n        s = \"%s\\n\" % (Solution().solve(cipher))\n        print s,", "#!/usr/bin/env python3\n\nimport sys\n\nn, x, d = map(int, sys.stdin.readline().split())\n\nans = 0\nfor i in range(1, n):\n    ans += (x + i * d)\n\nprint(ans)", "\nimport sys\n\nn, x, d = map(int, sys.stdin.readline().strip().split())\na = [x]\nfor i in range(1, n):\n    a.append(a[i - 1] + d)\n\nans = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        ans += a[j] - a[i]\n\nprint(ans)", "class Solution:\n    def solve(self):\n        n, x, d = map(int, input().split())\n        a = [x]\n        for i in range(1, n):\n            a.append(a[i - 1] + d)\n        s = set()\n        for i in range(n):\n            for j in range(i + 1, n):\n                s.add(a[j] - a[i])\n        return len(s)", "#include <bits/stdc++.h>\nusing namespace std;\n\nint main()\n{\n    int n, x, d;\n    cin >> n >> x >> d;\n    long long ans = 0;\n    for (int i = 0; i < n; i++)\n    {\n        ans += x;\n        x += d;\n    }\n    cout << ans << endl;\n    return 0;\n}\n\"\"\"", "class Solution {\npublic:\n    static const int N = 2e5 + 10;\n    int n, x, d;\n    int a[N], b[N];\n    long long ans = 0;\n    \n    int main() {\n        ios::sync_with_stdio(false);\n        cin >> n >> x >> d;\n        for (int i = 1; i <= n; i++) {\n            cin >> a[i];\n            a[i] += a[i - 1];\n        }\n        for (int i = 1; i <= n; i++) {\n            cin >> b[i];\n            b[i] += b[i - 1];\n        }\n        for (int i = 1; i <= n; i++) {\n            ans += a[i] - b[i];\n        }\n        cout << ans << endl;\n        return 0;\n    }\n};\n```"], "rewards": [0.0, 0.0, 0.0, 0.07692307692307693, 0.0, 0.0, 0.0, 0.0], "train rewards": [0.0, 0.0, 0.0, 0.0, 0.04, 0.0, 0.0, 0.0], "time": [9.20258617401123, 41.8771493434906, 51.85476779937744, 57.477652072906494, 71.267019033432, 92.61360716819763, 100.91538000106812, 114.14256978034973], "sample times": 8}