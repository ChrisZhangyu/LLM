{"codes": ["\n#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n# https://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=90&page=show_problem&problem=1174\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    s = sys.stdin.readline().rstrip()\n    t = sys.stdin.readline().rstrip()\n\n    for i in range(n):\n        if s[i] == '?':\n            s = s[:i] + 'a' + s[i+1:]\n\n    for i in range(m):\n        if t[i] == '?':\n            t = t[:i] + 'a' + t[i+1:]\n\n    for i in range(n):\n        if s[i] != t[i]:\n            s = s[:i] + '?' + s[i+1:]\n\n    print(s)\n    print(t)\n\nif __name__ == '__main__':\n    main()", "import sys\n\nn, m = map(int, sys.stdin.readline().split())\ns = sys.stdin.readline().strip()\nt = sys.stdin.readline().strip()\n\ndef find_substring(s, t):\n    for i in range(len(s) + 1):\n        for j in range(i + 1, len(s) + 1):\n            if s[i:j] in t:\n                return s[i:j]\n    return None\n\ndef find_substring2(s, t):\n    for i in range(len(s) + 1):\n        for j in range(i + 1, len(s) + 1):\n            if s[i:j] in t:\n                return s[i:j]\n    return None\n\ndef find_substring3(s, t):\n    for i in range(len(s) + 1):\n        for j in range(i + 1, len(s) + 1):\n            if s[i:j] in t:\n                return s[i:j]\n    return None\n\ndef find_substring4(s, t):\n    for i in range(len(s) + 1):\n        for j in range(i + 1, len(s) + 1):\n            if s[i:j] in t:\n                return s[i:j]\n    return None\n\ndef find_substring5(s, t):\n    for i in range(len(s) + 1):\n        for j in range(i + 1, len(s) + 1):\n            if s[i:j] in t:\n                return s[i:j]\n    return None\n\ndef find_substring6(s, t):\n    for i in range(len(s) + 1):\n        for j in range(i + 1, len(s) + 1):\n            if s[i:j] in t:\n                return s[i:j]\n    return None\n\ndef find_substring7(s, t):\n    for i in range(len(s", "\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\ns = sys.stdin.readline().strip()\nt = sys.stdin.readline().strip()\n\ndef find_substring(s, t):\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            if t.find(s[i:j]) != -1:\n                return s[i:j]\n    return None\n\ndef find_all_substring(s, t):\n    substrings = []\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            if t.find(s[i:j]) != -1:\n                substrings.append(s[i:j])\n    return substrings\n\nsubstring = find_substring(s, t)\nsubstrings = find_all_substring(s, t)\n\nif substring is not None:\n    print(len(substring) - 1)\n    print(*[i + 1 for i in range(len(substring) - 1)])\nelse:\n    print(len(substrings) - 1)\n    print(*[i + 1 for i in range(len(substrings) - 1)])\n\n\"\"\"\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\ns = sys.stdin.readline().strip()\nt = sys.stdin.readline().strip()\n\ndef find_substring(s, t):\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            if t.find(s[i:j]) != -1:\n                return s[i:j]\n    return None\n\ndef find_all_substring(s, t):\n    substrings = []\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            if", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint main()\n{\n    int n, m;\n    cin >> n >> m;\n    string s, t;\n    cin >> s >> t;\n\n    int cnt = 0;\n    for (int i = 0; i < n; i++)\n    {\n        if (s[i] != t[i])\n        {\n            cnt++;\n        }\n    }\n\n    cout << cnt << endl;\n\n    for (int i = 0; i < n; i++)\n    {\n        if (s[i] != t[i])\n        {\n            cout << i + 1 << \" \";\n        }\n    }\n\n    return 0;\n}\n\n\"\"\"", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n# Problem: https://yandex.ru/school/problems/gcd-of-factorials/\n# Language: python3\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef main():\n    n, m = map(int, input().split())\n    s = input()\n    t = input()\n    g = gcd(len(s), len(t))\n    l = lcm(len(s), len(t))\n    if len(s) > len(t):\n        s, t = t, s\n    if len(s) == len(t):\n        if s == t:\n            print(0)\n        else:\n            print(1)\n            print(1)\n    else:\n        if s in t:\n            print(1)\n            print(s.index(s[0]) + 1)\n        else:\n            print(l // g - 1)\n            for i in range(l // g - 1):\n                print(s.index(s[0]) + i + 1)\n\nif __name__ == '__main__':\n    main()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import re\n\ns = raw_input().strip()\nt = raw_input().strip()\n\ns = re.sub(r'[a-z]', '?', s)\n\nprint len(re.findall(s, t))\n\nfor i in re.finditer(s, t):\n    print i.start() + 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"], "rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "train rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "time": [17.148056745529175, 45.188920974731445, 73.01597023010254, 100.75137114524841, 113.01003789901733, 132.96531915664673, 160.3355507850647], "sample times": 7}