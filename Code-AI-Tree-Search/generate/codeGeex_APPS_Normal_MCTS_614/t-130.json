{"codes": ["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import sys\n\nn, m = map(int, sys.stdin.readline().split())\n\nmatrix = []\nfor i in range(n):\n    matrix.append(list(sys.stdin.readline().strip()))\n\n\ndef check(x, y, n, m):\n    for i in range(x, x + n):\n        for j in range(y, y + m):\n            if matrix[i][j] == 'W':\n                return False\n    return True\n\n\ndef check_square(x, y, n, m):\n    for i in range(x, x + n):\n        for j in range(y, y + m):\n            if matrix[i][j] == 'B':\n                return False\n    return True\n\n\ndef check_side(x, y, n, m):\n    for i in range(x, x + n):\n        if matrix[i][y] == 'B' or matrix[i][y + m - 1] == 'B':\n            return False\n    for j in range(y, y + m):\n        if matrix[x][j] == 'B' or matrix[x + n - 1][j] == 'B':\n            return False\n    return True\n\n\nfor i in range(n):\n    for j in range(m):\n        if matrix[i][j] == 'B':\n            matrix[i][j] = 'W'\n            if check(i, j, n, m) and check_square(i, j, n, m) and check_side(i, j, n, m):\n                print(n * m - 1)\n                sys.exit(0)\n            matrix[i][j] = 'B'\n\nprint(-1)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <cmath>\n#include <algorithm>\n#include <cstdlib>\n#include <string>\n#include <vector>\n#include <map>\n#include <set>\n#include <list>\n#include <queue>\n#include <stack>\n#include <bitset>\n#include <deque>\n#include <ctime>\n#include <climits>\n#include <cctype>\n#include <cassert>\n#include <complex>\n#include <iomanip>\n#include <ciso646>\n#include <cstdarg>\n#include <unordered_map>\n#include <utility>\n#include <bits/stdc++.h>\n#define int long long\nusing namespace std;\nconst int INF = 0x3f3f3f3f;\nconst int MOD = 1e9 + 7;\nconst int MAXN = 1e5 + 10;\nconst int MAXM = 1e5 + 10;\nconst int MAXV = 1e5 + 10;\nconst int MAXE = 1e5 + 10;\nconst int MAXQ = 1e5 + 10;\nconst int MAXX = 1e2 + 10;\nconst int MAXY = 1e2 + 10;\nconst int MAXZ = 1e2 + 10;\nconst int MAXC = 1e2 + 10;\nconst int MAXR = 1e2 + 10;\nconst int MAXP = 1e2 + 10;\nconst int MAXD = 1e2 + 10;\nconst int MAXN1 = 1e2 + 10;\nconst int MAXN2 = 1e2 + 10;\nconst int MAXN3 = 1e2 + 10;\nconst int MAXN4 = 1e2 + 10;\nconst int MAXN5 = 1e2 + 10;\nconst int MAXN6 = 1e2 + 10;\nconst int MAXN7 = 1e2 + 10", "\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\n\nmatrix = []\n\nfor i in range(n):\n    matrix.append(list(sys.stdin.readline().strip()))\n\n\ndef check(x, y):\n    if matrix[x][y] == 'B':\n        matrix[x][y] = 'W'\n        if x > 0:\n            check(x - 1, y)\n        if x < n - 1:\n            check(x + 1, y)\n        if y > 0:\n            check(x, y - 1)\n        if y < m - 1:\n            check(x, y + 1)\n\n\ncount = 0\n\nfor i in range(n):\n    for j in range(m):\n        if matrix[i][j] == 'B':\n            check(i, j)\n            count += 1\n\nif count == 0:\n    print(1)\nelif count % 4 != 0:\n    print(-1)\nelse:\n    print(count // 4)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\ndef main():\n    n, m = map(int, input().split())\n    matrix = []\n    for i in range(n):\n        matrix.append(list(input()))\n\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 'B':\n                matrix[i][j] = 1\n            else:\n                matrix[i][j] = 0\n\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 1:\n                matrix[i][j] = 0\n            else:\n                matrix[i][j] = 1\n\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 1:\n                matrix[i][j] = 0\n            else:\n                matrix[i][j] = 1\n\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 1:\n                matrix[i][j] = 0\n            else:\n                matrix[i][j] = 1\n\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 1:\n                matrix[i][j] = 0\n            else:\n                matrix[i][j] = 1\n\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 1:\n                matrix[i][j] = 0\n            else:\n                matrix[i][j] = 1\n\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 1:\n                matrix[i][j] = 0\n            else:\n                matrix[i][j] = 1\n\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 1:\n                matrix[i][j] = 0\n            else:\n                matrix[i][j] = 1\n\n    for i in range(n):\n        for j in range(m", "\ndef paint_square(n, m):\n    if n == 1 and m == 1:\n        return -1\n    if n == 1 or m == 1:\n        return 1\n    if n == 2 and m == 2:\n        return 1\n    if n == 2 or m == 2:\n        return 2\n    if n == 3 and m == 3:\n        return 2\n    if n == 3 or m == 3:\n        return 3\n    if n == 4 and m == 4:\n        return 3\n    if n == 4 or m == 4:\n        return 4\n    if n == 5 and m == 5:\n        return 4\n    if n == 5 or m == 5:\n        return 5\n    if n == 6 and m == 6:\n        return 5\n    if n == 6 or m == 6:\n        return 6\n    if n == 7 and m == 7:\n        return 6\n    if n == 7 or m == 7:\n        return 7\n    if n == 8 and m == 8:\n        return 7\n    if n == 8 or m == 8:\n        return 8\n    if n == 9 and m == 9:\n        return 8\n    if n == 9 or m == 9:\n        return 9\n    if n == 10 and m == 10:\n        return 9\n    if n == 10 or m == 10:\n        return 10\n    if n == 11 and m == 11:\n        return 10\n    if n == 11 or m == 11:\n        return 11\n    if n == 12 and m == 12:\n        return 11\n    if n == 12 or m == 12:\n        return 12\n    if n == 13 and m == 13:\n        return 12\n    if n == 13 or m == 13:\n        return 13\n    if n == 14 and m == 14:\n        return 13\n    "], "rewards": [0.0, 0.2826086956521739, 0.0, 0.30434782608695654, 0.0, 0.0], "train rewards": [0.0, 0.15555555555555556, 0.0, 0.26666666666666666, 0.0, 0.0], "time": [29.766780614852905, 60.04511904716492, 90.83811497688293, 120.65330243110657, 151.52740478515625, 181.90703701972961], "sample times": 6}