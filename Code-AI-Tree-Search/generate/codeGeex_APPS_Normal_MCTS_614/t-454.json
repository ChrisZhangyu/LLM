{"codes": ["\nimport sys\n\nn, k = [int(x) for x in sys.stdin.readline().split()]\nmod = 1000000007\ndp = [[0] * (k + 1) for _ in range(n + 1)]\ndp[0][0] = 1\nfor i in range(1, n + 1):\n    dp[i][0] = 1\n    for j in range(1, k + 1):\n        dp[i][j] = (dp[i - 1][j - 1] + dp[i - 1][j]) % mod\nprint(dp[n][k])", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import itertools\n\nn, k = [int(x) for x in input().split()]\nans = 0\nfor p in itertools.permutations(range(1, n + 1)):\n    oddness = sum(abs(i - p[i]) for i in range(1, n + 1))\n    if oddness == k:\n        ans += 1\nprint(ans % 1000000007)", "\ndef main():\n    n, k = map(int, input().split())\n    res = 0\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            if abs(i - j) % 2 == k % 2:\n                res += 1\n    print(res)\n\n\nif __name__ == \"__main__\":\n    main()", "from itertools import permutations\n\nn, k = map(int, input().split())\nans = 0\nfor p in permutations(range(1, n + 1)):\n    oddness = 0\n    for i in range(1, n + 1):\n        oddness += abs(i - p[i - 1])\n    if oddness == k:\n        ans += 1\nprint(ans % 1000000007)", "\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    mod = 1000000007\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        dp[i][0] = 1\n        for j in range(1, k + 1):\n            dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1]\n            dp[i][j] %= mod\n    print(dp[n][k])\n\nif __name__ == \"__main__\":\n    main()", "import sys\nimport math\n\nn = int(sys.stdin.readline())\nk = int(sys.stdin.readline())\nmod = 1000000007\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\ndef choose(n, k):\n    return factorial(n) // (factorial(k) * factorial(n - k))\n\ndef binomial(n, k):\n    return choose(n, k) % mod\n\nans = 0\nfor i in range(1, n + 1):\n    ans += binomial(n, i) * binomial(n - i, k - i)\n\nprint(ans % mod)", "\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nk = input().split()\n\n    n = int(nk[0])\n\n    k = int(nk[1])\n\n    result = math.factorial(n) // (math.factorial(n - k) * math.factorial(k))\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n\"\"\"", "\nimport sys\nimport numpy as np\n\nn, k = map(int, sys.stdin.readline().split())\n\ndef get_oddness(p):\n    oddness = 0\n    for i in range(n):\n        oddness += abs(i - p[i])\n    return oddness\n\ndef get_permutations(n, k):\n    if k == 0:\n        return 1\n    if k == 1:\n        return n\n    if k == 2:\n        return n * (n - 1) // 2\n    if k == 3:\n        return n * (n - 1) * (n - 2) // 6\n    if k == 4:\n        return n * (n - 1) * (n - 2) * (n - 3) // 24\n    if k == 5:\n        return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) // 120\n    if k == 6:\n        return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) // 720\n    if k == 7:\n        return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) // 5040\n    if k == 8:\n        return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) * (n - 7) // 40320\n    if k == 9:\n        return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) * (n - 7) * (n - 8) // 362880\n    return 0\n\nprint(get_permutations(n, k) % (10 ** 9 + 7))"], "rewards": [0.68, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.68], "train rewards": [0.75, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.75], "time": [15.794362545013428, 55.453266620635986, 62.97904586791992, 74.38654160499573, 81.94591760635376, 104.92072987556458, 119.05571985244751, 128.42248797416687, 156.44311904907227], "sample times": 9}