{"codes": ["\ndef palindrome(s):\n    return s == s[::-1]\n\n\ndef min_changes(s):\n    if palindrome(s):\n        return 0\n\n    changes = 0\n    for i in range(len(s)):\n        if s[i] != s[0]:\n            s = s[:i] + s[i].swapcase() + s[i + 1:]\n            changes += 1\n\n    for i in range(len(s) // 2):\n        if s[i] != s[len(s) - 1 - i]:\n            s = s[:i] + s[i].swapcase() + s[i + 1:]\n            changes += 1\n\n    return changes + min_changes(s)\n\n\ns = input()\nprint(min_changes(s))\n\n\"\"\"\n\n\ndef palindrome(s):\n    return s == s[::-1]\n\n\ndef min_changes(s):\n    if palindrome(s):\n        return 0\n\n    changes = 0\n    for i in range(len(s)):\n        if s[i] != s[0]:\n            s = s[:i] + s[i].swapcase() + s[i + 1:]\n            changes += 1\n\n    for i in range(len(s) // 2):\n        if s[i] != s[len(s) - 1 - i]:\n            s = s[:i] + s[i].swapcase() + s[i + 1:]\n            changes += 1\n\n    return changes + min_changes(s)\n\n\ns = input()\nprint(min_changes(s))\n\n\"\"\"\n\n\ndef palindrome(s):\n    return s == s[::-1]\n\n\ndef min_changes(s):\n    if palindrome(s):\n        return 0\n\n    changes = 0\n    for i in range(len(s)):\n        if s[i] != s[0]:\n            s = s[:i] + s[i].swapcase() + s[i + 1:]\n            changes += 1\n\n    for i in range(len(s) // 2):\n        if s[i] != s[len(s) - 1 - i]:\n            s = s[:i] + s[i].swapcase() + s[i + 1:]\n            changes += 1\n\n    return changes + min_changes(s)\n\n\ns = input()\nprint(min_changes(s))", "import itertools\n\ndef is_palindrome(s):\n    return s == s[::-1]\n\ndef get_palindrome(s):\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            if is_palindrome(s[i:j]):\n                return s[i:j]\n\ndef get_min_palindrome(s):\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            if is_palindrome(s[i:j]):\n                return min(s[i:j], get_min_palindrome(s[:i] + s[j:]), key=len)\n\ndef get_min_palindrome2(s):\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            if is_palindrome(s[i:j]):\n                return min(s[i:j], get_min_palindrome2(s[:i] + s[j:]), key=len)\n\ndef get_min_palindrome3(s):\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            if is_palindrome(s[i:j]):\n                return min(s[i:j], get_min_palindrome3(s[:i] + s[j:]), key=len)\n\ndef get_min_palindrome4(s):\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            if is_palindrome(s[i:j]):\n                return min(s[i:j], get_min_palindrome4(s[:i] + s[j:]), key=len)\n\ndef get_min_palindrome5(s):\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            if is_palindrome(s[i:j]):\n                return min(s[i:j], get_min_palindrome5(s[:i] + s[j:]), key=len)\n\ndef get_min_palindrome6(s):\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            if is_palindrome(s[i:j]):\n                return min(s[i:j], get_min_palindrome6(s[:i] + s[j:]), key=len)\n\ndef get_min_palindrome7(s):\n    for i in range", "def is_palindrome(s):\n    return s == s[::-1]\n\ndef palindrome(s):\n    for i in range(len(s)):\n        if is_palindrome(s[:i] + s[i + 1:]):\n            return s[:i] + s[i + 1:]\n    return s\n\ns = input()\nprint(palindrome(s))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\nimport itertools\n\ndef is_palindrome(s):\n    return s == s[::-1]\n\ndef get_palindrome(s):\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            if is_palindrome(s[i:j]):\n                return s[i:j]\n\ndef get_min_palindrome(s):\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            if is_palindrome(s[i:j]):\n                return min(s[i:j], get_min_palindrome(s[:i] + s[j:]))\n\ndef get_min_palindrome2(s):\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            if is_palindrome(s[i:j]):\n                return min(s[i:j], get_min_palindrome2(s[:i] + s[j:]))\n\ndef get_min_palindrome3(s):\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            if is_palindrome(s[i:j]):\n                return min(s[i:j], get_min_palindrome3(s[:i] + s[j:]))\n\ndef get_min_palindrome4(s):\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            if is_palindrome(s[i:j]):\n                return min(s[i:j], get_min_palindrome4(s[:i] + s[j:]))\n\ndef get_min_palindrome5(s):\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            if is_palindrome(s[i:j]):\n                return min(s[i:j], get_min_palindrome5(s[:i] + s[j:]))\n\ndef get_min_palindrome6(s):\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            if is_palindrome(s[i:j]):\n                return min(s[i:j], get_min_palindrome6(s[:i] + s[j:]))\n\ndef get_min_palindrome7(s):\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + ", "import sys\n\ns = sys.stdin.readline().strip()\ns = s[::-1]\nprint(s)", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "def palindrome(s):\n    if s == s[::-1]:\n        return s\n    else:\n        for i in range(len(s)):\n            for j in range(i+1, len(s)):\n                if s[i] != s[j]:\n                    s = s[:i] + s[j] + s[i+1:j] + s[i] + s[j+1:]\n                    return palindrome(s)\n\ns = input()\nprint(palindrome(s))\n\"\"\"\n\n\ndef palindrome(s):\n    if s == s[::-1]:\n        return s\n    else:\n        for i in range(len(s)):\n            for j in range(i + 1, len(s)):\n                if s[i] != s[j]:\n                    s = s[:i] + s[j] + s[i + 1 : j] + s[i] + s[j + 1 :]\n                    return palindrome(s)\n\n\ns = input()\nprint(palindrome(s))", "\nimport sys\n\ns = sys.stdin.readline().strip()\ns = s[::-1]\nfor i in range(len(s)):\n    for j in range(i + 1, len(s)):\n        if s[i] != s[j]:\n            s = s[:i] + s[j] + s[i + 1:j] + s[i] + s[j + 1:]\n            break\nprint(s)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\ndef is_palindrome(s):\n    return s == s[::-1]\n\ndef min_changes(s):\n    if is_palindrome(s):\n        return 0\n\n    changes = 1\n    for i in range(1, len(s)):\n        if is_palindrome(s[:i]):\n            changes = min(changes, min_changes(s[i:]))\n        elif is_palindrome(s[i:]):\n            changes = min(changes, min_changes(s[:i]))\n        else:\n            changes = min(changes, min_changes(s[:i]), min_changes(s[i:]))\n            changes += 1\n    return changes\n\ns = input()\nprint(min_changes(s))\n\"\"\"\n\n\ndef is_palindrome(s):\n    return s == s[::-1]\n\n\ndef min_changes(s):\n    if is_palindrome(s):\n        return 0\n\n    changes = 1\n    for i in range(1, len(s)):\n        if is_palindrome(s[:i]):\n            changes = min(changes, min_changes(s[i:]))\n        elif is_palindrome(s[i:]):\n            changes = min(changes, min_changes(s[:i]))\n        else:\n            changes = min(changes, min_changes(s[:i]), min_changes(s[i:]))\n            changes += 1\n    return changes\n\n\ns = input()\nprint(min_changes(s))", "import string\nimport itertools\n\ndef is_palindrome(s):\n    if s == s[::-1]:\n        return True\n    else:\n        return False\n\ndef get_palindrome(s):\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if is_palindrome(s[i:j]):\n                return s[i:j]\n\ndef get_min_palindrome(s):\n    palindromes = []\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if is_palindrome(s[i:j]):\n                palindromes.append(s[i:j])\n    return min(palindromes)\n\ndef get_min_palindrome_with_min_changes(s):\n    palindromes = []\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if is_palindrome(s[i:j]):\n                palindromes.append(s[i:j])\n    return min(palindromes, key=len)\n\ndef get_min_palindrome_with_min_changes_2(s):\n    palindromes = []\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if is_palindrome(s[i:j]):\n                palindromes.append(s[i:j])\n    return min(palindromes, key=len)\n\ndef get_min_palindrome_with_min_changes_3(s):\n    palindromes = []\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if is_palindrome(s[i:j]):\n                palindromes.append(s[i:j])\n    return min(palindromes, key=len)\n\ndef get_min_palindrome_with_min_changes_4(s):\n    palindromes = []\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if is_palindrome(s[i:j]):\n                palindromes.append(s[i:j])\n    return min(palindromes, key=len)\n\ndef get_min_palindrome_with_min_changes_5(s):\n    palindromes = []\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if is_palindrome(s[i:j]):\n                "], "rewards": [0.0, 0.0, 0.0, 0.0, 0.10714285714285714, 0.0, 0.0, 0.03571428571428571, 0.0, 0.0], "train rewards": [0.0, 0.0, 0.0, 0.0, 0.07407407407407407, 0.0, 0.0, 0.07407407407407407, 0.0, 0.0], "time": [33.7497284412384, 71.41787219047546, 107.78260493278503, 144.33463382720947, 160.692373752594, 197.34537315368652, 212.2543215751648, 248.63286113739014, 280.9619200229645, 317.7587399482727], "sample times": 10}