{"codes": ["\n#!/usr/bin/python\n\nimport sys\n\nn = int(sys.stdin.readline())\na = map(int, sys.stdin.readline().split())\n\ndef explode(a):\n    for i in range(len(a)):\n        if a[i] != 0:\n            a[i] = a[i] + 1\n            break\n    for i in range(len(a)):\n        if a[i] != 0:\n            a[i] = a[i] + 1\n            break\n    for i in range(len(a)):\n        if a[i] != 0:\n            a[i] = a[i] + 1\n            break\n    for i in range(len(a)):\n        if a[i] != 0:\n            a[i] = a[i] + 1\n            break\n    for i in range(len(a)):\n        if a[i] != 0:\n            a[i] = a[i] + 1\n            break\n    for i in range(len(a)):\n        if a[i] != 0:\n            a[i] = a[i] + 1\n            break\n    for i in range(len(a)):\n        if a[i] != 0:\n            a[i] = a[i] + 1\n            break\n    for i in range(len(a)):\n        if a[i] != 0:\n            a[i] = a[i] + 1\n            break\n    for i in range(len(a)):\n        if a[i] != 0:\n            a[i] = a[i] + 1\n            break\n    for i in range(len(a)):\n        if a[i] != 0:\n            a[i] = a[i] + 1\n            break\n    for i in range(len(a)):\n        if a[i] != 0:\n            a[i] = a[i] + 1\n            break\n    for i in range(len(a)):\n        if a[i] != 0:\n            a[i] = a[i] + 1\n            break\n    for i in range(len(a)):\n        if a[i] != 0:\n            a[i] = a[i] + 1\n            break\n    for i in range(len(a)):\n        if a[i] != 0:\n            a[i] = a[i] + 1\n            break\n    for i", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import sys\n\nn = int(sys.stdin.readline().strip())\narr = [int(x) for x in sys.stdin.readline().strip().split()]\n\ndef explode(arr):\n    for i in range(len(arr)):\n        if arr[i] != 0:\n            for j in range(len(arr)):\n                if arr[j] != 0 and j != i:\n                    arr[j] += arr[i]\n    for i in range(len(arr)):\n        if arr[i] != 0:\n            arr[i] = 0\n    return arr\n\nfor i in range(len(arr)):\n    arr = explode(arr)\n\nprint(len(arr))", "\nimport sys\n\nn = int(sys.stdin.readline().strip())\narr = [int(x) for x in sys.stdin.readline().strip().split()]\n\ndef explode(arr):\n    for i in range(len(arr)):\n        if arr[i] != 0:\n            for j in range(len(arr)):\n                if arr[j] != 0 and j != i:\n                    arr[j] += arr[i]\n                    if arr[j] == 0:\n                        arr[j] = -100000\n                    elif arr[j] > 0:\n                        arr[j] = 100000\n                    else:\n                        arr[j] = -100000\n            arr[i] = 0\n    return arr\n\n\nfor i in range(100000):\n    arr = explode(arr)\n    if sum(arr) == 0:\n        print(i + 1)\n        break", "#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <cmath>\n#include <algorithm>\n#include <cstdlib>\n#include <string>\n#include <vector>\n#include <map>\n#include <set>\n#include <list>\n#include <queue>\n#include <stack>\n#include <bitset>\n#include <deque>\n#include <ctime>\n#include <climits>\n#include <cctype>\n#include <cassert>\n#include <complex>\n#include <iomanip>\n#include <ciso646>\n#include <cstdarg>\n#include <unordered_map>\n#include <utility>\n#include <bits/stdc++.h>\n#define int long long\nusing namespace std;\nconst int INF = 0x3f3f3f3f;\nconst int MOD = 1e9 + 7;\nconst int MAXN = 1e5 + 10;\nconst int MAXM = 1e5 + 10;\nconst int MAXV = 1e5 + 10;\nconst int MAXE = 1e5 + 10;\nconst int MAXQ = 1e5 + 10;\nconst int MAXK = 1e5 + 10;\nconst int MAXW = 1e5 + 10;\nconst int MAXN1 = 1e2 + 10;\nconst int MAXN2 = 1e3 + 10;\nconst int MAXN3 = 1e4 + 10;\nconst int MAXN4 = 1e5 + 10;\nconst int MAXM1 = 1e2 + 10;\nconst int MAXM2 = 1e3 + 10;\nconst int MAXM3 = 1e4 + 10;\nconst int MAXM4 = 1e5 + 10;\nconst int MAXK1 = 1e2 + 10;\nconst int MAXK2 = 1e3 + 10;\nconst int MAXK3 = 1e4 + 10;\nconst int MAXK4 = 1e5 + 10;\nconst int MAXV1 = 1e2 + 10;\nconst int MAXV2 = 1e3 + 10;\nconst int MAXV3 = 1e4 + 10;\nconst int MAXV4 = 1e5 + 10;\nconst int MAXE1 =", "\ndef minTime(n, a):\n    if n == 1:\n        if a[0] == 0:\n            return 0\n        else:\n            return 1\n    if n == 2:\n        if a[0] == 0 and a[1] == 0:\n            return 0\n        elif a[0] == 0 and a[1] != 0:\n            return 1\n        elif a[0] != 0 and a[1] == 0:\n            return 1\n        else:\n            return 2\n    if n == 3:\n        if a[0] == 0 and a[1] == 0 and a[2] == 0:\n            return 0\n        elif a[0] == 0 and a[1] == 0 and a[2] != 0:\n            return 1\n        elif a[0] == 0 and a[1] != 0 and a[2] == 0:\n            return 1\n        elif a[0] == 0 and a[1] != 0 and a[2] != 0:\n            return 2\n        elif a[0] != 0 and a[1] == 0 and a[2] == 0:\n            return 1\n        elif a[0] != 0 and a[1] == 0 and a[2] != 0:\n            return 2\n        elif a[0] != 0 and a[1] != 0 and a[2] == 0:\n            return 2\n        else:\n            return 3\n    if n == 4:\n        if a[0] == 0 and a[1] == 0 and a[2] == 0 and a[3] == 0:\n            return 0\n        elif a[0] == 0 and a[1] == 0 and a[2] == 0 and a[3] != 0:\n            return 1\n        elif a[0] == 0 and a[1] == 0 and a[2] != 0 and a[3] == 0:\n            return 1\n        elif a[0] == 0 and a[1] == 0 and a[2] != 0 and a[3] != 0:\n            return 2\n        elif a[0] == 0 and a[1] != 0 and a[2] == 0 and a[3] == 0:\n            return 1\n        elif a[0] == 0 and a[1] != 0 and a[", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n# https://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=90&page=show_problem&problem=1017\n\nimport sys\n\ndef readline():\n    return sys.stdin.readline().strip()\n\ndef read_int_list():\n    return list(map(int, readline().split()))\n\ndef read_int():\n    return int(readline())\n\ndef explode(arr):\n    for i in range(len(arr)):\n        if arr[i] != 0:\n            arr[i] += 1\n            return 1\n    return 0\n\ndef main():\n    n = read_int()\n    arr = read_int_list()\n    count = 0\n    while explode(arr) != 0:\n        count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()"], "rewards": [0.0, 0.0, 0.15, 0.45, 0.0, 0.0, 0.0], "train rewards": [0.0, 0.0, 0.3, 0.2, 0.0, 0.0, 0.0], "time": [33.74971342086792, 65.63895988464355, 77.19019937515259, 91.24742937088013, 123.36180877685547, 155.60426783561707, 171.34897541999817], "sample times": 7}