{"codes": ["\nimport math\n\nn = int(input())\na = list(map(int, input().split()))\n\nr = 0\ncount = 0\n\nfor i in range(n):\n    if a[i] % (2 ** r) == 0:\n        count += 1\n    else:\n        r += 1\n\nprint(r, count)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    r = 0\n    cnt = 0\n    for i in range(n):\n        if a[i] % (2 ** r) == 0:\n            cnt += 1\n        else:\n            r += 1\n    print(r, cnt)\n\n\nif __name__ == '__main__':\n    main()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import math\nn = int(input())\na = list(map(int, input().split()))\nr = 0\nc = 0\nfor i in range(n):\n    if a[i] % (2 ** r) == 0:\n        c += 1\n    else:\n        r += 1\nprint(r, c)", "def main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    r = 0\n    count = 0\n    for i in range(n):\n        if a[i] % (2 ** r) == 0:\n            count += 1\n        else:\n            r += 1\n    print(r, count)\n\n\nif __name__ == '__main__':\n    main()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\ndef max_power_of_two(nums):\n    max_power = 0\n    for num in nums:\n        power = 0\n        while num % 2 == 0:\n            num /= 2\n            power += 1\n        if power > max_power:\n            max_power = power\n    return max_power\n\nn = int(input())\nnums = list(map(int, input().split()))\nprint(max_power_of_two(nums), len(list(filter(lambda x: x % max_power_of_two(nums) == 0, nums))))", "def max_power_of_two(nums):\n    max_power = 0\n    for num in nums:\n        power = 0\n        while num % 2 == 0:\n            num /= 2\n            power += 1\n        if power > max_power:\n            max_power = power\n    return max_power\n\nn = int(input())\nnums = list(map(int, input().split()))\nprint(max_power_of_two(nums), len(list(filter(lambda x: x % (2 ** max_power_of_two(nums)) == 0, nums))))\n\"\"\"\n\n\ndef max_power_of_two(nums):\n    max_power = 0\n    for num in nums:\n        power = 0\n        while num % 2 == 0:\n            num /= 2\n            power += 1\n        if power > max_power:\n            max_power = power\n    return max_power\n\n\nn = int(input())\nnums = list(map(int, input().split()))\nprint(max_power_of_two(nums), len(list(filter(lambda x: x % (2 ** max_power_of_two(nums)) == 0, nums))))", "\ndef get_max_power_of_two(nums):\n    max_power = 0\n    for num in nums:\n        power = 0\n        while num % 2 == 0:\n            power += 1\n            num /= 2\n        if power > max_power:\n            max_power = power\n    return max_power\n\n\ndef get_max_power_of_two(nums):\n    max_power = 0\n    for num in nums:\n        power = 0\n        while num % 2 == 0:\n            power += 1\n            num /= 2\n        if power > max_power:\n            max_power = power\n    return max_power\n\n\ndef get_max_power_of_two(nums):\n    max_power = 0\n    for num in nums:\n        power = 0\n        while num % 2 == 0:\n            power += 1\n            num /= 2\n        if power > max_power:\n            max_power = power\n    return max_power\n\n\ndef get_max_power_of_two(nums):\n    max_power = 0\n    for num in nums:\n        power = 0\n        while num % 2 == 0:\n            power += 1\n            num /= 2\n        if power > max_power:\n            max_power = power\n    return max_power", "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    r = 0\n    count = 0\n    for i in range(n):\n        if a[i] % (2 ** r) == 0:\n            count += 1\n        else:\n            r += 1\n    print(r, count)\n\n\nif __name__ == \"__main__\":\n    main()", "import sys\n\nn = int(sys.stdin.readline().strip())\na = [int(x) for x in sys.stdin.readline().strip().split()]\n\nr = 0\ncount = 0\n\nfor i in range(n):\n    if a[i] % (2 ** r) == 0:\n        count += 1\n    else:\n        r += 1\n\nprint(r, count)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"], "rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "train rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "time": [21.80244493484497, 42.63432455062866, 63.454362869262695, 84.10848021507263, 104.99283146858215, 122.76767325401306, 140.40569496154785, 160.19046902656555, 180.8995327949524, 201.90296506881714], "sample times": 10}