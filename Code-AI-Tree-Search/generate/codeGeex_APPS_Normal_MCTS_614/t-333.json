{"codes": ["\nimport sys\n\na = sys.stdin.readline().strip()\nb = sys.stdin.readline().strip()\n\ndef lcs(a, b):\n    m = len(a)\n    n = len(b)\n    c = [[0] * (n + 1) for i in xrange(m + 1)]\n    for i in xrange(1, m + 1):\n        for j in xrange(1, n + 1):\n            if a[i - 1] == b[j - 1]:\n                c[i][j] = c[i - 1][j - 1] + 1\n            else:\n                c[i][j] = max(c[i - 1][j], c[i][j - 1])\n    return c[m][n]\n\n\ndef lis(a, b):\n    m = len(a)\n    n = len(b)\n    c = [[0] * (n + 1) for i in xrange(m + 1)]\n    for i in xrange(1, m + 1):\n        for j in xrange(1, n + 1):\n            if a[i - 1] == b[j - 1]:\n                c[i][j] = c[i - 1][j - 1] + 1\n            else:\n                c[i][j] = max(c[i - 1][j], c[i][j - 1])\n    return c[m][n]\n\n\ndef lus(a, b):\n    m = len(a)\n    n = len(b)\n    c = [[0] * (n + 1) for i in xrange(m + 1)]\n    for i in xrange(1, m + 1):\n        for j in xrange(1, n + 1):\n            if a[i - 1] == b[j - 1]:\n                c[i][j] = c[i - 1][j - 1] + 1\n            else:\n                c[i][j] = max(c[i - 1][j], c[i][j - 1])\n    for i in xrange(1, m + 1):\n        for j in xrange(1, n + 1):\n            if a[i - 1] == b[j - 1]:\n                c[i][j] = max(c[i - 1][j - 1] - 1, c[i][j])\n            else:\n                c[i][j] = max(c[i - 1][j] - 1, c[i][j])\n    return c[m][n]\n\n\n", "import sys\n\na = sys.stdin.readline().strip()\nb = sys.stdin.readline().strip()\n\ndef lcs(a, b):\n    m = len(a)\n    n = len(b)\n    c = [[0] * (n + 1) for i in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if a[i - 1] == b[j - 1]:\n                c[i][j] = c[i - 1][j - 1] + 1\n            else:\n                c[i][j] = max(c[i - 1][j], c[i][j - 1])\n    return c[m][n]\n\n\ndef lis(a, b):\n    m = len(a)\n    n = len(b)\n    c = [[0] * (n + 1) for i in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if a[i - 1] == b[j - 1]:\n                c[i][j] = c[i - 1][j - 1] + 1\n            else:\n                c[i][j] = max(c[i - 1][j], c[i][j - 1])\n    return c[m][n]\n\n\ndef lus(a, b):\n    m = len(a)\n    n = len(b)\n    c = [[0] * (n + 1) for i in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if a[i - 1] == b[j - 1]:\n                c[i][j] = c[i - 1][j - 1] + 1\n            else:\n                c[i][j] = max(c[i - 1][j], c[i][j - 1], c[i - 1][j - 1])\n    return c[m][n]\n\n\nprint(lcs(a, b))\nprint(lis(a, b))\nprint(lus(a, b))", "#include <iostream>\n#include <string>\nusing namespace std;\nint main()\n{\n    string a, b;\n    cin >> a >> b;\n    int n = a.size(), m = b.size();\n    int dp[n + 1][m + 1];\n    for (int i = 0; i <= n; i++)\n        for (int j = 0; j <= m; j++)\n            dp[i][j] = 0;\n    for (int i = 1; i <= n; i++)\n        for (int j = 1; j <= m; j++)\n        {\n            if (a[i - 1] == b[j - 1])\n                dp[i][j] = dp[i - 1][j - 1] + 1;\n            else\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);\n        }\n    cout << (dp[n][m] == n ? -1 : dp[n][m]);\n    return 0;\n}\n\"\"\"", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\ndef longest_common_subsequence(s1, s2):\n    m, n = len(s1), len(s2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[-1][-1]\n\n\ndef main():\n    s1 = input()\n    s2 = input()\n    print(longest_common_subsequence(s1, s2))\n\n\nif __name__ == '__main__':\n    main()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import sys\n\ndef lcs(s1, s2):\n    m = [[0] * (1 + len(s2)) for i in xrange(1 + len(s1))]\n    longest, x_longest = 0, -1\n    for x in xrange(1, 1 + len(s1)):\n        for y in xrange(1, 1 + len(s2)):\n            if s1[x - 1] == s2[y - 1]:\n                m[x][y] = m[x - 1][y - 1] + 1\n                if m[x][y] > longest:\n                    longest = m[x][y]\n                    x_longest = x\n            else:\n                m[x][y] = 0\n    return s1[x_longest - longest: x_longest]\n\nif __name__ == '__main__':\n    input = sys.stdin.read()\n    data = list(map(str, input.split()))\n    s1 = data[1]\n    s2 = data[3]\n    print(len(lcs(s1, s2)))", "import sys\nimport string\n\ndef lcs(s1, s2):\n    m = [[0] * (len(s2) + 1) for i in range(len(s1) + 1)]\n    d = [[None] * (len(s2) + 1) for i in range(len(s1) + 1)]\n    for i in range(len(s1)):\n        for j in range(len(s2)):\n            if s1[i] == s2[j]:\n                m[i + 1][j + 1] = m[i][j] + 1\n                d[i + 1][j + 1] = 'ok'\n            elif m[i + 1][j] > m[i][j + 1]:\n                m[i + 1][j + 1] = m[i + 1][j]\n                d[i + 1][j + 1] = 'left'\n            else:\n                m[i + 1][j + 1] = m[i][j + 1]\n                d[i + 1][j + 1] = 'up'\n    (i, j) = (len(s1), len(s2))\n    s = []\n    while m[i][j]:\n        if d[i][j] == 'ok':\n            s.append(s1[i - 1])\n            (i, j) = (i - 1, j - 1)\n        elif d[i][j] == 'left':\n            (i, j) = (i, j - 1)\n        elif d[i][j] == 'up':\n            (i, j) = (i - 1, j)\n    s.reverse()\n    return ''.join(s)\n\nif __name__ == '__main__':\n    input = sys.stdin.read()\n    data = list(map(str, input.split()))\n    s1 = data[1]\n    s2 = data[3]\n    print(len(lcs(s1, s2)))"], "rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "train rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "time": [34.18592071533203, 68.27682209014893, 84.86542081832886, 119.57612681388855, 154.71704864501953, 184.38099789619446, 218.8859736919403], "sample times": 7}