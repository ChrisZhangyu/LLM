{"codes": ["\nimport sys\n\nx, y = map(int, sys.stdin.readline().strip().split())\n\ndef is_triangle(a, b, c):\n    return a + b > c and a + c > b and b + c > a\n\ndef is_equilateral(a, b, c):\n    return a == b and b == c\n\ndef is_isosceles(a, b, c):\n    return a == b or b == c or c == a\n\ndef is_scalene(a, b, c):\n    return a != b and b != c and c != a\n\ndef get_triangle(a, b, c):\n    if is_triangle(a, b, c):\n        if is_equilateral(a, b, c):\n            return \"Equilateral\"\n        elif is_isosceles(a, b, c):\n            return \"Isosceles\"\n        elif is_scalene(a, b, c):\n            return \"Scalene\"\n        else:\n            return \"Error\"\n    else:\n        return \"Error\"\n\ndef get_triangle_length(a, b, c):\n    if is_triangle(a, b, c):\n        if is_equilateral(a, b, c):\n            return a\n        elif is_isosceles(a, b, c):\n            return min(a, b)\n        elif is_scalene(a, b, c):\n            return a\n        else:\n            return \"Error\"\n    else:\n        return \"Error\"\n\ndef get_triangle_area(a, b, c):\n    if is_triangle(a, b, c):\n        if is_equilateral(a, b, c):\n            return a * a\n        elif is_isosceles(a, b, c):\n            return a * a\n        elif is_scalene(a, b, c):\n            p = (a + b + c) / 2\n            return (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        else:\n            return \"Error", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import sys\n\nx = int(sys.stdin.readline())\ny = int(sys.stdin.readline())\n\ndef is_triangle(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False\n\ncount = 0\n\nwhile not is_triangle(x, x, x):\n    if x > y:\n        x -= 1\n    else:\n        x += 1\n    count += 1\n\nprint(count)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\ndef equilateral_triangle(x, y):\n    if x == y:\n        return 0\n    if x > y:\n        return equilateral_triangle(y, x)\n    if x == 3:\n        return 1\n    if x == 4:\n        return 2\n    if x == 5:\n        return 2\n    if x == 6:\n        return 3\n    if x == 7:\n        return 3\n    if x == 8:\n        return 4\n    if x == 9:\n        return 4\n    if x == 10:\n        return 5\n    if x == 11:\n        return 5\n    if x == 12:\n        return 6\n    if x == 13:\n        return 6\n    if x == 14:\n        return 7\n    if x == 15:\n        return 7\n    if x == 16:\n        return 8\n    if x == 17:\n        return 8\n    if x == 18:\n        return 9\n    if x == 19:\n        return 9\n    if x == 20:\n        return 10\n    if x == 21:\n        return 10\n    if x == 22:\n        return 11\n    if x == 23:\n        return 11\n    if x == 24:\n        return 12\n    if x == 25:\n        return 12\n    if x == 26:\n        return 13\n    if x == 27:\n        return 13\n    if x == 28:\n        return 14\n    if x == 29:\n        return 14\n    if x == 30:\n        return 15\n    if x == 31:\n        return 15\n    if x == 32:\n        return 16\n    if x == 33:\n        return 16\n    if x == 34:\n        return 17\n    if x ==", "class Solution(object):\n    def minimumTime(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"", "import math\n\nx = int(input())\ny = int(input())\n\ndef is_triangle(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False\n\ncount = 0\nwhile not is_triangle(x, x, x):\n    x += 1\n    count += 1\n\nwhile not is_triangle(y, y, y):\n    y -= 1\n    count += 1\n\nwhile not is_triangle(x, y, math.sqrt(x**2 + y**2)):\n    x -= 1\n    y += 1\n    count += 1\n\nprint(count)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\nimport math\n\nx, y = input().split()\nx, y = int(x), int(y)\n\ndef is_triangle(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False\n\ndef is_equilateral(a, b, c):\n    if a == b and b == c:\n        return True\n    else:\n        return False\n\ndef is_isosceles(a, b, c):\n    if a == b or b == c or a == c:\n        return True\n    else:\n        return False\n\ndef is_scalene(a, b, c):\n    if a != b and b != c and a != c:\n        return True\n    else:\n        return False\n\ndef get_side(a, b, c):\n    if is_triangle(a, b, c):\n        if is_equilateral(a, b, c):\n            return \"Equilateral\"\n        elif is_isosceles(a, b, c):\n            return \"Isosceles\"\n        elif is_scalene(a, b, c):\n            return \"Scalene\"\n        else:\n            return \"Error\"\n    else:\n        return \"Error\"\n\ndef get_side_length(a, b, c):\n    if is_triangle(a, b, c):\n        if is_equilateral(a, b, c):\n            return a\n        elif is_isosceles(a, b, c):\n            return min(a, b)\n        elif is_scalene(a, b, c):\n            return a\n        else:\n            return \"Error\"\n    else:\n        return \"Error\"\n\ndef get_side_lengths(a, b, c):\n    if is_triangle(a, b, c):\n        if is_equilateral(a, b, c):\n            return a, a, a\n        elif is_isosceles(a, b, c):\n            return a, a, min(a, b)\n        elif is_"], "rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "train rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "time": [29.362069129943848, 58.55335068702698, 88.455637216568, 118.33488416671753, 147.89338207244873, 177.89307618141174, 207.83136677742004], "sample times": 7}