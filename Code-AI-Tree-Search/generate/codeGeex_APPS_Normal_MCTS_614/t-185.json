{"codes": ["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import sys\n\nn, k = map(int, sys.stdin.readline().split())\nstones = [0] * n\ncoins = [0] * n\nstones[k - 1] = 1\ncoins[k - 1] = 1\nfor i in range(n):\n    if stones[i] == 1:\n        stones[i] = 0\n        stones[(i + 1) % n] = 1\n        coins[(i + 1) % n] = 1\n    if coins[i] == 1:\n        coins[i] = 0\n        coins[(i - 1) % n] = 1\n        stones[(i - 1) % n] = 1\nprint(sum(coins))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "#include<bits/stdc++.h>\nusing namespace std;\nint main()\n{\n    int n,k;\n    cin>>n>>k;\n    int ans=0;\n    for(int i=1;i<=n;i++)\n    {\n        if(i==k)\n        {\n            ans+=1;\n        }\n        else\n        {\n            ans+=2;\n        }\n    }\n    for(int i=1;i<k;i++)\n    {\n        ans+=2;\n    }\n    for(int i=k+1;i<=n;i++)\n    {\n        ans+=2;\n    }\n    cout<<ans<<endl;\n    return 0;\n}\n```", "\ndef main():\n    n, k = map(int, input().split())\n    stones = [0] * n\n    coins = [0] * n\n    for i in range(n):\n        stones[i] = int(input())\n    for i in range(n):\n        coins[i] = int(input())\n    print(solve(n, k, stones, coins))\n\n\ndef solve(n, k, stones, coins):\n    if stones[k - 1] == 1:\n        stones[k - 1] = 0\n        stones[k] = 1\n        return 2\n    else:\n        return 1 + solve(n, k - 1, stones, coins) + solve(n, k + 1, stones, coins)\n\n\nmain()", "\nimport sys\n\nn, k = map(int, sys.stdin.readline().split())\nstones = [0] * n\ncoins = [0] * n\n\nfor i in range(n):\n    stones[i] = 1\n    coins[i] = 1\n\nstones[k - 1] = 0\ncoins[k - 1] = 0\n\nstones[k] = 0\ncoins[k] = 0\n\nstones[k - 2] = 0\ncoins[k - 2] = 0\n\nstones[k - 3] = 0\ncoins[k - 3] = 0\n\nstones[k - 4] = 0\ncoins[k - 4] = 0\n\nstones[k - 5] = 0\ncoins[k - 5] = 0\n\nstones[k - 6] = 0\ncoins[k - 6] = 0\n\nstones[k - 7] = 0\ncoins[k - 7] = 0\n\nstones[k - 8] = 0\ncoins[k - 8] = 0\n\nstones[k - 9] = 0\ncoins[k - 9] = 0\n\nstones[k - 10] = 0\ncoins[k - 10", "#include <bits/stdc++.h>\nusing namespace std;\nint main()\n{\n    int n,k;\n    cin>>n>>k;\n    int ans=0;\n    for(int i=1;i<k;i++)\n    {\n        if(i==1)\n        {\n            ans+=2;\n        }\n        else\n        {\n            ans+=3;\n        }\n    }\n    for(int i=k+1;i<=n;i++)\n    {\n        if(i==k+1)\n        {\n            ans+=2;\n        }\n        else\n        {\n            ans+=3;\n        }\n    }\n    cout<<ans;\n    return 0;\n}\n\"\"\"", "\n\ndef main():\n    n, k = [int(x) for x in input().split()]\n    stones = [0] * n\n    coins = [0] * n\n    for i in range(n):\n        stones[i] = 1\n        coins[i] = 1\n    print(bfs(n, k, stones, coins))\n\n\ndef bfs(n, k, stones, coins):\n    queue = []\n    queue.append([k, 0])\n    visited = [0] * n\n    visited[k - 1] = 1\n    while len(queue) > 0:\n        curr = queue.pop(0)\n        curr_pos = curr[0]\n        curr_step = curr[1]\n        if curr_pos == 0:\n            if curr_step % 2 == 0:\n                if visited[curr_pos + 1] == 0:\n                    queue.append([curr_pos + 1, curr_step + 1])\n                    visited[curr_pos + 1] = 1\n            else:\n                if visited[curr_pos + 1] == 0:\n                    queue.append([curr_pos + 1, curr_step + 1])\n                    visited[curr_pos + "], "rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "train rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "time": [19.723434448242188, 39.83998155593872, 52.92544722557068, 66.31385922431946, 86.60399127006531, 99.21856093406677, 118.89054679870605], "sample times": 7}