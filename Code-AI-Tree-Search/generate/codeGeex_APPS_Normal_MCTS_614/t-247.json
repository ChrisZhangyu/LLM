{"codes": ["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```", "import sys\n\nn = int(sys.stdin.readline().strip())\npoints = []\nfor i in range(n):\n    x, y = map(int, sys.stdin.readline().strip().split())\n    points.append((x, y))\n\npoints.sort(key=lambda x: x[0])\n\nleft = 0\nright = len(points) - 1\n\nwhile left < right:\n    if points[left][0] == points[right][0]:\n        left += 1\n        right -= 1\n    elif points[left][0] < points[right][0]:\n        if points[left][1] == points[right][1]:\n            left += 1\n            right -= 1\n        elif points[left][1] < points[right][1]:\n            left += 1\n        else:\n            right -= 1\n    else:\n        if points[left][1] == points[right][1]:\n            left += 1\n            right -= 1\n        elif points[left][1] > points[right][1]:\n            left += 1\n        else:\n            right -= 1\n\nif left == right:\n    print(\"NO\")\nelse:\n    print(\"YES\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\nimport sys\n\nn = int(sys.stdin.readline().strip())\n\npoints = []\n\nfor i in range(n):\n    x, y = map(int, sys.stdin.readline().strip().split())\n    points.append((x, y))\n\npoints.sort(key=lambda x: (x[0], x[1]))\n\nfor i in range(n):\n    for j in range(i + 1, n):\n        if points[j][0] - points[i][0] != 0:\n            a = (points[j][1] - points[i][1]) / (points[j][0] - points[i][0])\n            b = points[j][1] - a * points[j][0]\n            for k in range(n):\n                if points[k][0] == points[i][0] and points[k][1] == points[i][1]:\n                    continue\n                if points[k][0] == points[j][0] and points[k][1] == points[j][1]:\n                    continue\n                if a * points[k][0] + b == points[k][1]:\n                    break\n            else:\n                print(\"NO\")\n                sys.exit(0)\n        elif points[j][1] - points[i][1] != 0:\n            a = (points[j][0] - points[i][0]) / (points[j][1] - points[i][1])\n            b = points[j][0] - a * points[j][1]\n            for k in range(n):\n                if points[k][0] == points[i][0] and points[k][1] == points[i][1]:\n                    continue\n                if points[k][0] == points[j][0] and points[k][1] == points[j][1]:\n                    continue\n                if a * points[k][0] + b == points[k][1]:\n                    break\n            else:\n                print(\"NO\")\n                sys.exit(0)\n        else:\n            if points[j][0] == points[i][0]:\n                for k in range(n):\n                    if points[k][0] == points[i][0] and points[k][1] == points[i][1]:\n                        continue\n                    if points[k][0] == points[j][0] and points[k][1] == points[j][1]:\n                        continue\n                    if points[k][0] == points[i][0] and points[k][1] == points[i][1]:\n                        continue\n                    if points[k][0] == points[j][0] and points[k][1] == points[j][1]:\n                        continue\n                    if points[k][0] == points[i][0] and points[", "#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#include<cstdlib>\n#include<string>\n#include<vector>\n#include<map>\n#include<set>\n#include<list>\n#include<queue>\n#include<stack>\n#include<bitset>\n#include<deque>\nusing namespace std;\n#define ll long long\n#define inf 0x3f3f3f3f\n#define ri register int\n#define il inline\n#define fi first\n#define se second\n#define mp make_pair\n#define pi pair<int,int>\n#define mem0(x) memset((x),0,sizeof (x))\n#define mem1(x) memset((x),0x3f,sizeof (x))\nil char gc()\n{\n    static const int BS = 1 << 22;\n    static unsigned char buf[BS], *st, *ed;\n    if (st == ed) ed = buf + fread(st = buf, 1, BS, stdin);\n    return st == ed ? EOF : *st++;\n}\n#define gc getchar\ntemplate<class T>void in(T &x)\n{\n    x = 0;\n    bool f = 0;\n    char c = gc();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-') f = 1;\n        c = gc();\n    }\n    while ('0' <= c && c <= '9')\n    {\n        x = (x << 3) + (x << 1) + (c ^ 48);\n        c = gc();\n    }\n    if (f) x = -x;\n}\n#undef gc\nvoid out(int x)\n{\n    if (x < 0) putchar('-'), x = -x;\n    if (x > 9) out(x / 10);\n    putchar(x % 10 + '0');\n}\n#define N 100005\nint n;\nint x[N], y[N];\nint main()\n{\n    in(n);\n    for (ri i = 1; i <= n; ++i)\n    {\n        in(x[i]);\n        in(y[i]);\n    }\n    sort(x + 1, x + n + 1);\n    sort(y + 1, y + n + 1);\n    for (ri i = 1; i <= n; ++i)\n    {\n        if (x[i] == x[i - 1])\n        {\n            puts(\"NO\");\n            return 0;\n        }\n    }\n    for (ri i = ", "import math\nimport sys\n\nn = int(sys.stdin.readline().strip())\npoints = []\nfor i in range(n):\n    x, y = map(int, sys.stdin.readline().strip().split())\n    points.append((x, y))\n\npoints.sort()\n\nfor i in range(n):\n    for j in range(i + 1, n):\n        x1, y1 = points[i]\n        x2, y2 = points[j]\n        if x1 == x2 and y1 == y2:\n            continue\n        if x1 == x2 and y1 != y2:\n            continue\n        if y1 == y2 and x1 != x2:\n            continue\n        if x1 != x2 and y1 == y2:\n            continue\n        if y1 != y2 and x1 == x2:\n            continue\n        if x1 != x2 and y1 != y2:\n            if x1 == x2:\n                if y1 > y2:\n                    y1, y2 = y2, y1\n            else:\n                if x1 > x2:\n                    x1, x2 = x2, x1\n                if y1 > y2:\n                    y1, y2 = y2, y1\n            if (y1 - y2) / (x1 - x2) == (y2 - y1) / (x2 - x1):\n                continue\n            if (y1 - y2) / (x1 - x2) == (y2 - y1) / (x2 - x1) + 1:\n                continue\n            if (y1 - y2) / (x1 - x2) == (y2 - y1) / (x2 - x1) - 1:\n                continue\n            if (y1 - y2) / (x1 - x2) == (y2 - y1) / (x2 - x1) + 2:\n                continue\n            if (y1 - y2) / (x1 - x2) == (y2 - y1) / (x2 - x1) - 2:\n                continue\n            if (y1 - y2) / (x1 - x2) == (y2 - y1) / (x2 - x1) + 3:\n                continue\n            if (y1 - y2) / (x1 - x2) == (y2 - y1) / (x2 - x1) - 3:\n                continue\n            if (y1 - y2) / (x1 - x2) == (y2 - y1) / (x2 - x1) + 4:\n                continue\n            if (y1 - y2) / (x1 - x2) == (y2 - y1) / (x2 - x1) - 4:\n                continue\n            if (y1 - y2", "\nclass Solution(object):\n    def checkStraightLine(self, coordinates):\n        \"\"\"\n        :type coordinates: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        if len(coordinates) == 2:\n            return True\n        x1, y1 = coordinates[0]\n        x2, y2 = coordinates[1]\n        if x1 == x2:\n            for x, y in coordinates[2:]:\n                if x != x1:\n                    return False\n            return True\n        if y1 == y2:\n            for x, y in coordinates[2:]:\n                if y != y1:\n                    return False\n            return True\n        k = float(y2 - y1) / (x2 - x1)\n        b = y1 - k * x1\n        for x, y in coordinates[2:]:\n            if y != k * x + b:\n                return False\n        return True", "import sys\n\n\nn = int(sys.stdin.readline().strip())\npoints = []\nfor i in range(n):\n    x, y = map(int, sys.stdin.readline().strip().split())\n    points.append((x, y))\n\npoints.sort()\n\nfor i in range(n - 1):\n    for j in range(i + 1, n):\n        if points[j][0] - points[i][0] == 0:\n            break\n        if points[j][1] - points[i][1] == 0:\n            break\n        if points[j][0] - points[i][0] == points[j][1] - points[i][1]:\n            break\n        if points[j][1] - points[i][1] == points[j][0] - points[i][0]:\n            break\n        if points[j][1] - points[i][1] == 0:\n            break\n        if points[j][0] - points[i][0] == 0:\n            break\n        if points[j][0] - points[i][0] == points[j][1] - points[i][1]:\n            break\n        if points[j][1] - points[i][1] == points[j][0] - points[i][0]:\n            break\n        if points[j][1] - points[i][1] == 0:\n            break\n        if points[j][0] - points[i][0] == 0:\n            break\n        if points[j][0] - points[i][0] == points[j][1] - points[i][1]:\n            break\n        if points[j][1] - points[i][1] == points[j][0] - points[i][0]:\n            break\n        if points[j][1] - points[i][1] == 0:\n            break\n        if points[j][0] - points[i][0] == 0:\n            break\n        if points[j][0] - points[i][0] == points[j][1] - points[i][1]:\n            break\n        if points[j][1] - points[i][1] == points[j][0] - points[i][0]:\n            break\n        if points[j][1] - points[i][1] == 0:\n            break\n        if points[j][0] - points[i][0] == 0:\n            break\n        if points[j][0] - points[i][0] == points[j][1] - points[i][1]:\n            break\n        if points[j][1] - points[i][1] == points[j][0] - points[i][0]:\n            break\n        if points[j][1] - points[i][1] == 0:\n            break\n"], "rewards": [0.0, 0.5294117647058824, 0.0, 0.0, 0.0, 0.0, 0.0], "train rewards": [0.0, 0.4411764705882353, 0.0, 0.0, 0.0, 0.0, 0.0], "time": [6.820637464523315, 43.54980421066284, 79.76767539978027, 116.40228915214539, 153.05039238929749, 166.3772029876709, 203.11126470565796], "sample times": 7}