{"codes": ["\nimport sys\nimport math\n\nx = int(sys.stdin.readline().strip())\n\nif x > 0:\n    print(int(math.ceil(x / 90.0)))\nelse:\n    print(int(math.floor(abs(x) / 90.0)))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import sys\nimport math\n\nx = int(sys.stdin.readline().strip())\n\nif x > 0:\n    print(int(math.ceil(x / 90.0)))\nelse:\n    print(int(math.floor(abs(x) / 90.0)))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "def f(x):\n    if x == 0:\n        return 0\n    if x < 0:\n        return f(-x) + 1\n    if x % 90 == 0:\n        return f(x // 90)\n    else:\n        return f(x // 90 + 1)\n\nprint(f(int(input())))\n\"\"\"", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\ndef f(x):\n    if x == 0:\n        return 0\n    if x < 0:\n        return f(-x) + 1\n    if x % 90 == 0:\n        return f(x - 90)\n    else:\n        return f(x - 90) + 1\n\nprint(f(int(input())))", "import math\nimport sys\n\n\ndef get_min_turns(angle):\n    if angle == 0:\n        return 0\n    if angle < 0:\n        angle = -angle\n    if angle == 90:\n        return 1\n    if angle == 180:\n        return 2\n    if angle == 270:\n        return 3\n    if angle % 90 == 0:\n        return int(angle / 90)\n    else:\n        return int(math.ceil(angle / 90))\n\n\nif __name__ == '__main__':\n    print(get_min_turns(int(sys.stdin.readline().strip())))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "def rotate(x):\n    if x == 0:\n        return 0\n    elif x < 0:\n        return rotate(-x) + 1\n    elif x % 90 == 0:\n        return rotate(x // 90)\n    else:\n        return rotate(x - 90) + 1\n\nif __name__ == '__main__':\n    x = int(input())\n    print(rotate(x))\n\"\"\"\n\n\ndef rotate(x):\n    if x == 0:\n        return 0\n    elif x < 0:\n        return rotate(-x) + 1\n    elif x % 90 == 0:\n        return rotate(x // 90)\n    else:\n        return rotate(x - 90) + 1\n\n\nif __name__ == \"__main__\":\n    x = int(input())\n    print(rotate(x))", "import sys\n\nx = int(sys.stdin.readline())\n\nif x < 0:\n    x = -x\n\nif x % 90 == 0:\n    print(x // 90)\nelse:\n    print(x // 90 + 1)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import sys\n\ndef main():\n    x = int(sys.stdin.readline().strip())\n    if x < 0:\n        x = -x\n    if x % 90 == 0:\n        print(x / 90)\n    else:\n        print(x / 90 + 1)\n\nif __name__ == '__main__':\n    main()\n\"\"\"", "\ndef rotate(x):\n    if x == 0:\n        return 0\n    elif x < 0:\n        return rotate(-x) + 1\n    elif x % 90 == 0:\n        return x // 90\n    else:\n        return rotate(90 - x % 90) + 1\n\nprint(rotate(int(input())))"], "rewards": [0.075, 0.075, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05, 0.0, 0.0], "train rewards": [0.15384615384615385, 0.15384615384615385, 0.0, 0.0, 0.05128205128205128, 0.0, 0.0, 0.15384615384615385, 0.0, 0.02564102564102564], "time": [14.67078423500061, 30.071458101272583, 42.635294675827026, 57.76504421234131, 69.94780421257019, 85.01049065589905, 99.25240230560303, 114.34483337402344, 129.18510174751282, 141.33345794677734], "sample times": 10}