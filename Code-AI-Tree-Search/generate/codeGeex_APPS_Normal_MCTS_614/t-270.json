{"codes": ["import random\n\ndef main():\n    n, m = map(int, input().split())\n    graph = [[] for _ in range(n + 1)]\n    for _ in range(m):\n        a, b = map(int, input().split())\n        graph[a].append(b)\n        graph[b].append(a)\n\n    def dfs(v):\n        visited[v] = True\n        for u in graph[v]:\n            if not visited[u]:\n                dfs(u)\n\n    visited = [False for _ in range(n + 1)]\n    dfs(1)\n    if not visited[n]:\n        print(0)\n        return\n\n    ans = 0\n    for i in range(1, n):\n        if not visited[i]:\n            ans += 1\n\n    print(ans / n)\n\nif __name__ == \"__main__\":\n    main()", "\nimport random\n\ndef main():\n    n, m = map(int, input().split())\n    edges = []\n    for _ in range(m):\n        u, v = map(int, input().split())\n        edges.append((u - 1, v - 1))\n    \n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if (i, j) not in edges and (j, i) not in edges:\n                edges.append((i, j))\n                edges.append((j, i))\n    \n    # print(edges)\n    # print(n, m, edges)\n    \n    def get_prob(i):\n        if i == 0:\n            return 1\n        else:\n            return 0.5\n    \n    prob = [get_prob(i) for i in range(n)]\n    # print(prob)\n    \n    def dfs(i, prob):\n        if i == n - 1:\n            return 0\n        else:\n            u, v = edges[i]\n            prob[u] += prob[v]\n            return dfs(i + 1, prob)\n    \n    dfs(0, prob)\n    # print(prob)\n    return sum(prob) / n\n\nif __name__ == \"__main__\":\n    print(\"%.6f\" % main())", "#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <algorithm>\n#include <vector>\n#include <set>\n#include <map>\n#include <queue>\n#include <stack>\n#include <bitset>\n#include <sstream>\n#include <iomanip>\n#include <fstream>\n#include <cctype>\n#include <cassert>\n#include <climits>\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef vector<int> vi;\ntypedef pair<int, int> pii;\ntypedef vector<pii> vii;\ntypedef vector<vi> vvi;\ntypedef map<int, int> mii;\ntypedef map<string, int> msi;\ntypedef map<int, string> mis;\ntypedef map<string, string> mss;\ntypedef vector<char> vc;\ntypedef vector<string> vs;\ntypedef set<int> si;\ntypedef set<char> sc;\ntypedef stack<int> st;\ntypedef stack<char> stc;\ntypedef queue<int> qi;\ntypedef queue<char> qc;\ntypedef deque<int> dqi;\ntypedef deque<char> dqc;\ntypedef priority_queue<int> pqi;\ntypedef priority_queue<int, vector<int>, greater<int> > pqim;\ntypedef priority_queue<string> pqs", "import sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    edges = []\n    for i in range(m):\n        a, b = map(int, sys.stdin.readline().split())\n        edges.append((a-1, b-1))\n    \n    for i in range(n-1):\n        for j in range(i+1, n):\n            if (i, j) not in edges and (j, i) not in edges:\n                edges.append((i, j))\n    \n    print(1.5)\n\nif __name__ == \"__main__\":\n    main()", "import math\nimport random\n\ndef main():\n    n, m = map(int, input().split())\n    edges = []\n    for i in range(m):\n        s, t = map(int, input().split())\n        edges.append((s-1, t-1))\n    \n    for i in range(n-1):\n        for j in range(i+1, n):\n            if (i, j) not in edges and (j, i) not in edges:\n                edges.append((i, j))\n    \n    # print(edges)\n    \n    # 1 -> 2 -> 3 -> 4\n    # 1 -> 2 -> 4 -> 3\n    # 1 -> 3 -> 2 -> 4\n    # 1 -> 3 -> 4 -> 2\n    # 1 -> 4 -> 2 -> 3\n    # 1 -> 4 -> 3 -> 2\n    # 2 -> 1 -> 3 -> 4\n    # 2 -> 1 -> 4 -> 3\n    # 2 -> 3 -> 1 -> 4\n    # 2 -> 3 -> 4 -> 1\n    # 2 -> 4 -> 1 -> 3\n    # 2 -> 4 -> 3 -> 1\n    # 3 -> 1 -> 2 -> 4\n    # 3 -> 1 -> 4 -> 2\n    # 3 -> 2 -> 1 -> 4\n    # 3 -> 2 -> 4 -> 1\n    # 3 -> 4 -> 1 -> 2\n    # 3 -> 4 -> 2 -> 1\n    # 4 -> 1 -> 2 -> 3\n    ", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\nimport sys\nimport random\n\nn = int(sys.stdin.readline())\nm = int(sys.stdin.readline())\n\ns = []\nt = []\n\nfor i in range(m):\n    s.append(int(sys.stdin.readline().split()[0]))\n    t.append(int(sys.stdin.readline().split()[0]))\n\nfor i in range(m):\n    if s[i] > t[i]:\n        s[i], t[i] = t[i], s[i]\n\nfor i in range(m):\n    for j in range(i+1, m):\n        if s[i] == s[j] and t[i] == t[j]:\n            s[i], t[i] = t[i], s[i]\n            s[j], t[j] = t[j], s[j]\n\nfor i in range(m):\n    for j in range(i+1, m):\n        if s[i] == s[j] and t[i] == t[j]:\n            s[i], t[i] = t[i], s[i]\n            s[j], t[j] = t[j], s[j]\n\nfor i in range(m):\n    for j in range(i+1, m):\n        if s[i] == s[j] and t[i] == t[j]:\n            s[i], t[i] = t[i], s[i]\n            s[j], t[j] = t[j], s[j]\n\nfor i in range(m):\n    for j in range(i+1, m):\n        if s["], "rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "train rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "time": [22.52374291419983, 42.34432792663574, 64.85510587692261, 75.32036018371582, 98.43724417686462, 121.6638240814209, 143.7773244380951], "sample times": 7}