{"codes": ["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import sys\n\nn = int(sys.stdin.readline().strip())\ns = sys.stdin.readline().strip()\n\ncolors = set()\nfor i in range(n):\n    if s[i] != s[i-1]:\n        colors.add(s[i-1])\n        colors.add(s[i])\n\ncolors = list(colors)\ncolors.sort()\n\nprint(\"\".join(colors))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\nimport sys\n\nn = int(sys.stdin.readline().strip())\ns = sys.stdin.readline().strip()\n\nd = {}\nfor i in range(n):\n    d[s[i]] = d.get(s[i], 0) + 1\n\nif len(d) == 1:\n    print(list(d.keys())[0])\nelif len(d) == 2:\n    if 'B' in d and 'G' in d:\n        print('R')\n    elif 'B' in d and 'R' in d:\n        print('G')\n    elif 'G' in d and 'R' in d:\n        print('B')\n    elif 'B' in d:\n        print('B')\n    elif 'G' in d:\n        print('G')\n    elif 'R' in d:\n        print('R')\nelif len(d) == 3:\n    if 'B' in d and 'G' in d and 'R' in d:\n        print('B')\n    elif 'B' in d and 'G' in d:\n        print('G')\n    elif 'B' in d and 'R' in d:\n        print('R')\n    elif 'G' in d and 'R' in d:\n        print('B')\n    elif 'B' in d:\n        print('B')\n    elif 'G' in d:\n        print('G')\n    elif 'R' in d:\n        print('R')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\ndef main():\n    n = int(input())\n    s = input()\n    colors = []\n    for i in range(n):\n        if s[i] not in colors:\n            colors.append(s[i])\n    colors.sort()\n    print(\"\".join(colors))\n\n\nif __name__ == '__main__':\n    main()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "#include<bits/stdc++.h>\nusing namespace std;\nint main()\n{\n    int n;\n    cin>>n;\n    string s;\n    cin>>s;\n    sort(s.begin(),s.end());\n    if(n==1)\n    {\n        cout<<s;\n        return 0;\n    }\n    if(n==2)\n    {\n        if(s[0]!=s[1])\n        {\n            cout<<\"G\";\n            return 0;\n        }\n        else\n        {\n            cout<<\"B\";\n            return 0;\n        }\n    }\n    if(n==3)\n    {\n        if(s[0]==s[1]&&s[1]==s[2])\n        {\n            cout<<\"B\";\n            return 0;\n        }\n        if(s[0]==s[1]&&s[1]!=s[2])\n        {\n            cout<<\"R\";\n            return 0;\n        }\n        if(s[0]!=s[1]&&s[1]==s[2])\n        {\n            cout<<\"G\";\n            return 0;\n        }\n        if(s[0]!=s[1]&&s[1]!=s[2])\n        {\n            cout<<\"B\";\n            return 0;\n        }\n    }\n    if(n==4)\n    {\n        if(s[0]==s[1]&&s[1]==s[2]&&s[2]==s[3])\n        {\n            cout<<\"B\";\n            return 0;\n        }\n        if(s[0]==s[1]&&s[1]==s[2]&&s[2]!=s[3])\n        {\n            cout<<\"R\";\n            return 0;\n        }\n        if(s[0]==s[1]&&s[1]!=s[2]&&s[2]==s[3])\n        {\n            cout<<\"G\";\n            return 0;\n        }\n        if(s[0]==s[1]&&s[1]!=s[2]&&s[2]!=s[3])\n        {\n            cout<<\"B\";\n            return 0;\n        }\n        if(s[0]!=s[1]&&s[1]"], "rewards": [0.0, 0.4782608695652174, 0.08695652173913043, 0.0, 0.0], "train rewards": [0.0, 0.21739130434782608, 0.4782608695652174, 0.0, 0.0], "time": [5.9327476024627686, 37.22964787483215, 68.72177791595459, 100.36592936515808, 131.96564483642578], "sample times": 5}