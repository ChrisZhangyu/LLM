{"codes": ["\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\nice = []\nfor i in range(n):\n    ice.append(list(sys.stdin.readline().strip()))\nr1, c1 = map(int, sys.stdin.readline().split())\nr2, c2 = map(int, sys.stdin.readline().split())\n\ndef dfs(r, c):\n    if ice[r][c] == 'X':\n        ice[r][c] = '.'\n        if r > 0:\n            dfs(r - 1, c)\n        if r < n - 1:\n            dfs(r + 1, c)\n        if c > 0:\n            dfs(r, c - 1)\n        if c < m - 1:\n            dfs(r, c + 1)\n\ndfs(r1 - 1, c1 - 1)\n\nif ice[r2 - 1][c2 - 1] == '.':\n    print('YES')\nelse:\n    print('", "import sys\n\nn, m = map(int, sys.stdin.readline().split())\nice = []\nfor i in range(n):\n    ice.append(list(sys.stdin.readline().strip()))\nr1, c1 = map(int, sys.stdin.readline().split())\nr2, c2 = map(int, sys.stdin.readline().split())\n\n\ndef dfs(r, c):\n    if ice[r][c] == 'X':\n        ice[r][c] = '.'\n        if r > 0:\n            dfs(r - 1, c)\n        if r < n - 1:\n            dfs(r + 1, c)\n        if c > 0:\n            dfs(r, c - 1)\n        if c < m - 1:\n            dfs(r, c + 1)\n\n\ndfs(r1 - 1, c1 - 1)\nif ice[r2 - 1][c2 - 1] == '.':\n    print('YES')\nelse:\n    print('", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "#include<bits/stdc++.h>\nusing namespace std;\nint n,m,r1,c1,r2,c2;\nchar a[510][510];\nint dx[4]={0,0,1,-1};\nint dy[4]={1,-1,0,0};\nbool check(int x,int y)\n{\n\tif(x<1||x>n||y<1||y>m||a[x][y]=='X')\n\t\treturn false;\n\treturn true;\n}\nbool dfs(int x,int y)\n{\n\tif(x==r2&&y==c2)\n\t\treturn true;\n\ta[x][y]='X';\n\tfor(int i=0;i<4;i++)\n\t{\n\t\tint xx=x+dx[i];\n\t\tint yy=y+dy[i];\n\t\tif(check(xx,yy))\n\t\t{\n\t\t\tif(dfs(xx,yy))\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn", "\ndef dfs(r, c):\n    if (r, c) == (r2, c2):\n        return True\n    if ice[r][c] == 'X':\n        ice[r][c] = '.'\n        if dfs(r - 1, c) or dfs(r + 1, c) or dfs(r, c - 1) or dfs(r, c + 1):\n            return True\n        else:\n            ice[r][c] = 'X'\n            return False\n    else:\n        ice[r][c] = 'X'\n        if dfs(r - 1, c) or dfs(r + 1, c) or dfs(r, c - 1) or dfs(r, c + 1):\n            return True\n        else:\n            ice[r][c] = '.'\n            return False\n\nif __name__ == '__main__':\n    n, m = map(int, input().split())\n    ice = [list(input()) for _ in range(n)]\n    r1, c1 = map(int, input().split", "#include <bits/stdc++.h>\nusing namespace std;\nint n,m,r1,c1,r2,c2;\nint main()\n{\n    cin>>n>>m;\n    char a[n+1][m+1];\n    for(int i=1;i<=n;i++)\n    {\n        for(int j=1;j<=m;j++)\n        {\n            cin>>a[i][j];\n        }\n    }\n    cin>>r1>>c1>>r2>>c2;\n    if(a[r1][c1]=='X'&&a[r2][c2]=='.')\n    {\n        cout<<\"YES\";\n    }\n    else\n    {\n        cout<<\"NO\";\n    }\n    return 0;\n}", "\ndef check(r1, c1, r2, c2):\n    if r1 == r2 and c1 == c2:\n        return True\n    if r1 > r2 or c1 > c2:\n        return False\n    if r1 == r2:\n        return check(r1, c1 + 1, r2, c2) or check(r1, c1 - 1, r2, c2)\n    if c1 == c2:\n        return check(r1 + 1, c1, r2, c2) or check(r1 - 1, c1, r2, c2)\n    return check(r1 + 1, c1, r2, c2) or check(r1 - 1, c1, r2, c2) or check(r1, c1 + 1, r2, c2) or check(r1, c1 - 1, r2, c2)\n\nr1, c1 = map(int, input().split())\nr2, c2 = map(int, input().split())\nprint(\"YES\" if check(r1,", "\n\ndef dfs(x, y):\n    if x < 0 or x >= n or y < 0 or y >= m:\n        return False\n    if grid[x][y] == 'X':\n        grid[x][y] = '.'\n        if dfs(x - 1, y) or dfs(x + 1, y) or dfs(x, y - 1) or dfs(x, y + 1):\n            return True\n        else:\n            return False\n    elif grid[x][y] == '.':\n        return dfs(x - 1, y) or dfs(x + 1, y) or dfs(x, y - 1) or dfs(x, y + 1)\n    else:\n        return False\n\n\nn, m = map(int, input().split())\ngrid = []\nfor i in range(n):\n    grid.append(input())\nr1, c1 = map(int, input().split())\nr2, c2 = map(int, input().split())\nif grid[r1 - 1][c1 - 1]"], "rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "train rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "time": [15.463858127593994, 31.607648134231567, 47.53958606719971, 63.31334948539734, 79.04775977134705, 91.58074402809143, 107.22712564468384, 123.01217770576477], "sample times": 8}