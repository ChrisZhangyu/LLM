{"codes": ["\nimport string\n\ndef check_password(password):\n    if len(password) < 5:\n        return \"Too weak\"\n    if not any(c in string.ascii_uppercase for c in password):\n        return \"Too weak\"\n    if not any(c in string.ascii_lowercase for c in password):\n        return \"Too weak\"\n    if not any(c in string.digits for c in password):\n        return \"Too weak\"\n    return \"Correct\"\n\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    password = input()\n\n    result = check_password(password)\n\n    fptr.write(result + '\\n')\n\n    fptr.close()\n\n\n-----Input-----\n\nThe first line contains a non-empty sequence of characters (at most 100 characters). Each character is either a large English letter, or a small English letter, or a digit, or one of characters: \"!\", \"?\", \".\", \",\", \"_\".\n\n\n-----Output-----\n\nIf the password is complex enough, print message \"Correct\" (without the quotes), otherwise print message \"Too weak\" (without the quotes).\n\n\n-----Examples-----\nInput\nabacaba\n\nOutput\nToo weak\n\nInput\nX12345\n\nOutput\nToo weak\n\nInput\nCONTEST_is_STARTED!!11\n\nOutput\nCorrect\nUse Standard Input format\n", "import string\n\ndef check_password(password):\n    if len(password) < 5:\n        return \"Too weak\"\n    if not any(c in string.ascii_uppercase for c in password):\n        return \"Too weak\"\n    if not any(c in string.ascii_lowercase for c in password):\n        return \"Too weak\"\n    if not any(c in string.digits for c in password):\n        return \"Too weak\"\n    return \"Correct\"\n\nif __name__ == \"__main__\":\n    password = input()\n    print(check_password(password))\nUse Standard Input format\n", "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint main()\n{\n    string s;\n    cin >> s;\n    if (s.size() < 5)\n    {\n        cout << \"Too weak\" << endl;\n        return 0;\n    }\n    bool flag = false;\n    for (int i = 0; i < s.size(); i++)\n    {\n        if (s[i] >= 'A' && s[i] <= 'Z')\n        {\n            flag = true;\n            break;\n        }\n        else if (s[i] >= 'a' && s[i] <= 'z')\n        {\n            flag = true;\n            break;\n        }\n        else if (s[i] >= '0' && s[i] <= '9')\n        {\n            flag = true;\n            break;\n        }\n    }\n    if (!flag)\n    {\n        cout << \"Too weak\" << endl;\n        return 0;\n    }\n    for (int i = 0; i < s.size(); i++)\n    {\n        if (s[i] >= 'A' && s[i] <= 'Z')\n        {\n            flag = true;\n            break;\n        }\n        else if (s[i] >= 'a' && s[i] <= 'z')\n        {\n            flag = true;\n            break;\n        }\n    }\n    if (!flag)\n    {\n        cout << \"Too weak\" << endl;\n        return 0;\n    }\n    for (int i = 0; i < s.size(); i++)\n    {\n        if (s[i] >= 'A' && s[i] <= 'Z')\n        {\n            flag = true;\n            break;\n        }\n        else if (s[i] >= 'a' && s[i] <= 'z')\n        {\n            flag = true;\n            break;\n        }\n    }\n    if (!flag)\n    {\n        cout << \"Too weak\" << endl;\n        return 0;\n    }\n    for (int i = 0; i < s.size(); i++)\n    {\n        if (s[i] >= 'A' && s[i] <= 'Z')\n        {\n            flag = true;\n            break;\n        }\n        else if (s[i] >= 'a' && s[i] <= 'z')\n        {\n            flag = true;\n            break;\n        }\n    }\n    if (!flag)\n    {\n        cout << \"Too weak\" << endl;\n        return 0;\n    }\n    cout << \"Correct\" << endl;\n    return 0;\n}\n\n\"\"\"", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import re\n\ndef check_password(password):\n    if len(password) < 5:\n        return \"Too weak\"\n    elif not re.search('[A-Z]', password):\n        return \"Too weak\"\n    elif not re.search('[a-z]', password):\n        return \"Too weak\"\n    elif not re.search('[0-9]', password):\n        return \"Too weak\"\n    else:\n        return \"Correct\"\n\nif __name__ == '__main__':\n    password = input()\n    print(check_password(password))\nUse Standard Input format\n", "\nimport re\n\ndef check_password(password):\n    if len(password) < 5:\n        return \"Too weak\"\n    elif not re.search('[A-Z]', password):\n        return \"Too weak\"\n    elif not re.search('[a-z]', password):\n        return \"Too weak\"\n    elif not re.search('[0-9]', password):\n        return \"Too weak\"\n    else:\n        return \"Correct\"\n\nif __name__ == '__main__':\n    password = input()\n    print(check_password(password))", "\ndef check_password(password):\n    if len(password) < 5:\n        return \"Too weak\"\n    elif not any(c.isupper() for c in password):\n        return \"Too weak\"\n    elif not any(c.islower() for c in password):\n        return \"Too weak\"\n    elif not any(c.isdigit() for c in password):\n        return \"Too weak\"\n    else:\n        return \"Correct\"\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    password = input()\n\n    result = check_password(password)\n\n    fptr.write(result + '\\n')\n\n    fptr.close()\n\"\"\"\n\n\ndef check_password(password):\n    if len(password) < 5:\n        return \"Too weak\"\n    elif not any(c.isupper() for c in password):\n        return \"Too weak\"\n    elif not any(c.islower() for c in password):\n        return \"Too weak\"\n    elif not any(c.isdigit() for c in password):\n        return \"Too weak\"\n    else:\n        return \"Correct\"\n\n\nif __name__ == \"__main__\":\n    fptr = open(os.environ[\"OUTPUT_PATH\"], \"w\")\n\n    password = input()\n\n    result = check_password(password)\n\n    fptr.write(result + \"\\n\")\n\n    fptr.close()"], "rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "train rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "time": [32.82911229133606, 60.496618032455444, 98.42330741882324, 136.74726676940918, 154.2303192615509, 170.392080783844, 192.86033821105957], "sample times": 7}