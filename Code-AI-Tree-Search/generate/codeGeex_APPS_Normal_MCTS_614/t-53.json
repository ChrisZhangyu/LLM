{"codes": ["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "#include<bits/stdc++.h>\nusing namespace std;\nint main()\n{\n    int n;\n    cin>>n;\n    string s;\n    cin>>s;\n    int b[n];\n    for(int i=0;i<n;i++)\n    {\n        cin>>b[i];\n    }\n    int ans=0;\n    for(int i=0;i<n;i++)\n    {\n        if(s[i]==s[n-i-1])\n        {\n            ans+=b[i];\n        }\n    }\n    cout<<ans<<endl;\n    return 0;\n}\n```", "\nimport sys\n\nn = int(sys.stdin.readline().strip())\ns = sys.stdin.readline().strip()\nb = sys.stdin.readline().strip().split()\nb = [int(i) for i in b]\n\nfor i in range(n // 2):\n    if s[i] != s[n - i - 1]:\n        b[i] = 0\n        b[n - i - 1] = 0\n\nprint(sum(b))", "\ndef is_antipalindromic(s):\n    return s == s[::-1]\n\ndef max_beauty(s):\n    n = len(s)\n    b = [0] * n\n    for i in range(n // 2):\n        if s[i] != s[n - i - 1]:\n            b[i] = 1\n            b[n - i - 1] = 1\n    return sum(b)\n\ndef main():\n    n = int(input())\n    s = input()\n    b = [int(x) for x in input().split()]\n    if is_antipalindromic(s):\n        print(sum(b))\n    else:\n        print(max_beauty(s))\n\nif __name__ == '__main__':\n    main()\n\n\"\"\"\n\n\ndef is_antipalindromic(s):\n    return s == s[::-1]\n\n\ndef max_beauty(s):\n    n = len(s)\n    b = [0] * n\n    for i in range(n // 2):\n        if s[i] != s[n - i - 1]:\n            b[i] = 1\n            b[n - i - 1] = 1\n    return sum(b)\n\n\ndef main():\n    n = int(input())\n    s = input()\n    b = [int(x) for x in input().split()]\n    if is_antipalindromic(s):\n        print(sum(b))\n    else:\n        print(max_beauty(s))\n\n\nif __name__ == \"__main__\":\n    main()\n\n\"\"\"\n\n\ndef is_antipalindromic(s):\n    return s == s[::-1]\n\n\ndef max_beauty(s):\n    n = len(s)\n    b = [0] * n\n    for i in range(n // 2):\n        if s[i] != s[n - i - 1]:\n            b[i] = 1\n            b[n - i - 1] = 1\n    return sum(b)\n\n\ndef main():\n    n = int(input())\n    s = input()\n    b = [int(x) for x in input().split()]\n    if is_antipalindromi\n\"\"\"", "import sys\n\nn = int(sys.stdin.readline().strip())\ns = sys.stdin.readline().strip()\nb = sys.stdin.readline().strip().split()\nb = [int(i) for i in b]\n\nfor i in range(n // 2):\n    if s[i] != s[n - i - 1]:\n        b[i] = 0\n        b[n - i - 1] = 0\n\nprint(sum(b))", "\n\n\"\"\"", "\n\n-----Input-----\n\nThe first line contains one integer n (2 \u2264 n \u2264 100, n is even) \u2014 the number of characters in s.\n\nThe second line contains the string s itself. It consists of only lowercase Latin letters, and it is guaranteed that its letters can be reordered to form an antipalindromic string.\n\nThe third line contains n integer numbers b_1, b_2, ..., b_{n} (1 \u2264 b_{i} \u2264 100), where b_{i} is the beauty of index i.\n\n\n-----Output-----\n\nPrint one number \u2014 the maximum possible beauty of t.\n\n\n-----Examples-----\nInput\n8\nabacabac\n1 1 1 1 1 1 1 1\n\nOutput\n8\n\nInput\n8\nabaccaba\n1 2 3 4 5 6 7 8\n\nOutput\n26\n\nInput\n8\nabacabca\n1 2 3 4 4 3 2 1\n\nOutput\n17\nUse Standard Input format", "#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main()\n{\n    int n;\n    cin >> n;\n    string s;\n    cin >> s;\n    vector<int> b(n);\n    for (int i = 0; i < n; i++)\n    {\n        cin >> b[i];\n    }\n    int ans = 0;\n    for (int i = 0; i < n; i++)\n    {\n        if (s[i] == s[n - i - 1])\n        {\n            ans += b[i];\n        }\n    }\n    cout << ans << endl;\n    return 0;\n}"], "rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "train rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "time": [31.853726863861084, 45.40080976486206, 56.917794704437256, 87.56322646141052, 98.45587158203125, 109.50487518310547, 130.1800377368927, 143.42922616004944], "sample times": 8}