{"codes": ["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import math\n\ndef is_prime(n):\n    if n == 2:\n        return True\n    if n % 2 == 0 or n <= 1:\n        return False\n\n    sqr = int(math.sqrt(n)) + 1\n\n    for divisor in range(3, sqr, 2):\n        if n % divisor == 0:\n            return False\n    return True\n\ndef get_next_prime(n):\n    if n % 2 == 0:\n        n += 1\n\n    while True:\n        if is_prime(n):\n            return n\n        n += 2\n\ndef get_smallest_multiple(n):\n    if n == 1:\n        return 1\n\n    prime = get_next_prime(n - 1)\n    while n % prime != 0:\n        prime = get_next_prime(prime)\n\n    return prime * get_smallest_multiple(n // prime)\n\ndef get_smallest_multiple_v2(n):\n    if n == 1:\n        return 1\n\n    prime = get_next_prime(n - 1)\n    while n % prime != 0:\n        prime = get_next_prime(prime)\n\n    return prime * get_smallest_multiple_v2(n // prime)\n\ndef get_smallest_multiple_v3(n):\n    if n == 1:\n        return 1\n\n    prime = get_next_prime(n - 1)\n    while n % prime != 0:\n        prime = get_next_prime(prime)\n\n    return prime * get_smallest_multiple_v3(n // prime)\n\ndef get_smallest_multiple_v4(n):\n    if n == 1:\n        return 1\n\n    prime = get_next_prime(n - 1)\n    while n % prime != 0:\n        prime = get_next_prime(prime)\n\n    return prime * get_smallest_multiple_v4(n // prime)\n\ndef get_smallest_multiple_v5(n):\n    if n == 1:\n        return 1\n\n    prime = get_next_prime(n - 1)\n", "def is_prime(n):\n    if n == 2:\n        return True\n    if n % 2 == 0 or n <= 1:\n        return False\n\n    sqr = int(n ** 0.5) + 1\n\n    for divisor in range(3, sqr, 2):\n        if n % divisor == 0:\n            return False\n    return True\n\n\ndef get_next_prime(n):\n    while True:\n        n += 1\n        if is_prime(n):\n            return n\n\n\ndef get_smallest_multiple(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 6\n    if n == 4:\n        return 24\n    if n == 5:\n        return 120\n    if n == 6:\n        return 720\n    if n == 7:\n        return 5040\n    if n == 8:\n        return 40320\n    if n == 9:\n        return 362880\n    if n == 10:\n        return 3628800\n    if n == 11:\n        return 39916800\n    if n == 12:\n        return 479001600\n    if n == 13:\n        return 6227020800\n    if n == 14:\n        return 87178291200\n    if n == 15:\n        return 1307674368000\n    if n == 16:\n        return 20922789888000\n    if n == 17:\n        return 355687428096000\n    if n == 18:\n        return 6402373705728000\n    if n == 19:\n        return 121645100408832000\n    if n == 20:\n        return ", "\nimport math\n\ndef is_prime(n):\n    if n == 2:\n        return True\n    if n % 2 == 0 or n <= 1:\n        return False\n\n    sqr = int(math.sqrt(n)) + 1\n\n    for divisor in range(3, sqr, 2):\n        if n % divisor == 0:\n            return False\n    return True\n\ndef get_next_prime(n):\n    if n == 2:\n        return 3\n    if n % 2 == 0:\n        n += 1\n    else:\n        n += 2\n\n    while True:\n        if is_prime(n):\n            return n\n        n += 2\n\ndef get_smallest_multiple(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 6\n    if n == 4:\n        return 12\n    if n == 5:\n        return 20\n    if n == 6:\n        return 30\n    if n == 7:\n        return 42\n    if n == 8:\n        return 56\n    if n == 9:\n        return 72\n    if n == 10:\n        return 90\n    if n == 11:\n        return 110\n    if n == 12:\n        return 132\n    if n == 13:\n        return 156\n    if n == 14:\n        return 182\n    if n == 15:\n        return 210\n    if n == 16:\n        return 240\n    if n == 17:\n        return 272\n    if n == 18:\n        return 306\n    if n == 19:\n        return 342\n    if n == 20:\n        return 380\n    if n == 21:\n        return 420\n    if n == 22:\n        return 462\n    if n == 23:\n        return 506\n    if n == 24:", "\ndef is_prime(n):\n    if n == 2:\n        return True\n    if n % 2 == 0 or n <= 1:\n        return False\n\n    sqr = int(n ** 0.5) + 1\n\n    for divisor in range(3, sqr, 2):\n        if n % divisor == 0:\n            return False\n    return True\n\n\ndef get_next_prime(n):\n    while True:\n        n += 1\n        if is_prime(n):\n            return n\n\n\ndef get_prev_prime(n):\n    while True:\n        n -= 1\n        if is_prime(n):\n            return n\n\n\ndef get_next_multiple_of_prime(n, p):\n    while True:\n        n += p\n        if is_prime(n):\n            return n\n\n\ndef get_prev_multiple_of_prime(n, p):\n    while True:\n        n -= p\n        if is_prime(n):\n            return n\n\n\ndef get_smallest_multiple_of_primes(primes):\n    if len(primes) == 1:\n        return primes[0]\n    if len(primes) == 2:\n        return get_next_multiple_of_prime(primes[0], primes[1])\n    if len(primes) == 3:\n        return get_next_multiple_of_prime(get_next_multiple_of_prime(primes[0], primes[1]), primes[2])\n    if len(primes) == 4:\n        return get_next_multiple_of_prime(get_next_multiple_of_prime(get_next_multiple_of_prime(primes[0], primes[1]), primes[2]), primes[3])\n    if len(primes) == 5:\n        return get_next_multiple_of_prime(get_next_multiple_of_prime(get_next_multiple_of_prime(get_next_multiple_of_prime(primes[0], primes[1]), primes[2]), primes[3]), primes[4])\n    if len(primes) == 6", "def prime(n):\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\ndef get_prime(n):\n    for i in range(2, n):\n        if prime(i) == True:\n            return i\n\ndef get_multiple(n, p):\n    if n % p == 0:\n        return n\n    else:\n        return n + p - n % p\n\nn = int(input())\np = get_prime(n)\nprint(get_multiple(n, p))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"], "rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.04], "train rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "time": [28.08725643157959, 57.42231202125549, 86.5087502002716, 115.55076503753662, 144.93055248260498, 174.4394519329071], "sample times": 6}