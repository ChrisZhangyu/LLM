{"codes": ["\nimport sys\n\nn, k = map(int, sys.stdin.readline().split())\n\ns = [sys.stdin.readline().strip() for _ in range(n - k + 1)]\n\nnames = []\n\nfor i in range(n - k + 1):\n    if s[i] == \"YES\":\n        names.append(chr(ord('A')", "import sys\n\nn, k = map(int, sys.stdin.readline().split())\n\nnames = []\n\nfor i in range(n - k + 1):\n    if sys.stdin.readline().strip() == \"YES\":\n        names.append(sys.stdin.readline().strip())\n    else:\n        names.append(sys.stdin.readline().", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "def solve():\n    n, k = map(int, input().split())\n    s = [input() for _ in range(n - k + 1)]\n    for i in range(n - k + 1):\n        if s[i] == \"NO\":\n            s[i] = \"\".join(random.choice(string.ascii_lowercase) for _ in range(10))", "\ndef is_valid(name):\n    if len(name) > 10 or len(name) < 1:\n        return False\n    if name[0] < 'A' or name[0] > 'Z':\n        return False\n    for i in range(1, len(name)):\n        if name[i] < 'a' or name[i] > 'z':\n            return False", "def is_valid(name):\n    for i in range(len(name) - 1):\n        if name[i].lower() == name[i + 1].lower():\n            return False\n    return True\n\nn, k = map(int, input().split())\n\nnames = []\nfor i in range(n - k + 1):\n    names.append(input())\n\nans =", "import itertools\n\nn, k = map(int, input().split())\n\ns = []\nfor i in range(n - k + 1):\n    s.append(input())\n\nl = []\nfor i in itertools.permutations(\"abcdefghijklmnopqrstuvwxyz\", 10):\n    flag = True\n    for j in range(", "def check_name(name):\n    if len(name) < 1 or len(name) > 10:\n        return False\n    if not name[0].isupper():\n        return False\n    for i in range(1, len(name)):\n        if not name[i].islower():\n            return False\n    return True\n\nn, k = map(int, input().split())\n"], "rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "train rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "time": [7.172622203826904, 14.274046897888184, 21.341644287109375, 28.483192682266235, 35.55802130699158, 42.737961530685425, 49.810163259506226, 56.940951347351074], "sample times": 8}