{"codes": ["\nimport sys\n\nn, x = map(int, sys.stdin.readline().split())\nvouchers = []\n\nfor i in range(n):\n    l, r, cost = map(int, sys.stdin.readline().split())\n    vouchers.append((l, r, cost))\n\nvouchers.sort(key=lambda x: x[0])\n\nans = -1\n\nfor i in range(n):\n    for j in range(i + 1, n):\n        if vouchers[i][1] < vouchers[j][0]:\n            if vouchers[i][1] - vouchers[i][0] + 1 + vouchers[j][1] - vouchers[j][0] + 1 == x:\n                ans = max(ans, vouchers[i][2] + vouchers[j][2])\n\nprint(ans)", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import sys\n\nn, x = map(int, sys.stdin.readline().split())\nvouchers = []\n\nfor i in range(n):\n    l, r, cost = map(int, sys.stdin.readline().split())\n    vouchers.append((l, r, cost))\n\nvouchers.sort(key=lambda x: x[0])\n\nans = -1\n\nfor i in range(n):\n    for j in range(i + 1, n):\n        if vouchers[j][0] > vouchers[i][1]:\n            if vouchers[j][0] - vouchers[i][1] + 1 == x:\n                if ans == -1:\n                    ans = vouchers[i][2] + vouchers[j][2]\n                else:\n                    ans = min(ans, vouchers[i][2] + vouchers[j][2])\n\nprint(ans)", "#include<bits/stdc++.h>\nusing namespace std;\nint main()\n{\n    int n,x;\n    cin>>n>>x;\n    int l[n+1],r[n+1],cost[n+1];\n    for(int i=1;i<=n;i++)\n    {\n        cin>>l[i]>>r[i]>>cost[i];\n    }\n    int ans=0;\n    for(int i=1;i<=n;i++)\n    {\n        for(int j=i+1;j<=n;j++)\n        {\n            if(r[i]<l[j]||r[j]<l[i])\n            {\n                ans=max(ans,cost[i]+cost[j]);\n            }\n        }\n    }\n    if(ans>=x)\n    {\n        cout<<ans;\n    }\n    else\n    {\n        cout<<-1;\n    }\n    return 0;\n}\n```\n", "\ndef main():\n    n, x = map(int, input().split())\n    vouchers = []\n    for i in range(n):\n        l, r, cost = map(int, input().split())\n        vouchers.append((l, r, cost))\n    vouchers.sort(key=lambda x: x[0])\n    res = []\n    for i in range(n):\n        if vouchers[i][0] > x:\n            break\n        for j in range(i + 1, n):\n            if vouchers[j][0] > x:\n                break\n            if vouchers[j][0] > vouchers[i][1]:\n                res.append(vouchers[i][2] + vouchers[j][2])\n    if len(res) >= 2:\n        print(min(res))\n    else:\n        print(-1)\n\n\nif __name__ == '__main__':\n    main()", "\nimport sys\n\ndef read_int():\n    return int(sys.stdin.readline().strip())\n\ndef read_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\nn, x = read_ints()\nvouchers = []\nfor i in range(n):\n    l, r, cost = read_ints()\n    vouchers.append((l, r, cost))\n\nvouchers.sort(key=lambda x: x[0])\n\nleft = 0\nright = len(vouchers) - 1\nwhile left < right:\n    if vouchers[left][0] + x - 1 < vouchers[right][0]:\n        left += 1\n    elif vouchers[left][0] + x - 1 > vouchers[right][1]:\n        right -= 1\n    else:\n        break\n\nif left == right:\n    print(-1)\nelse:\n    print(sum(vouchers[left][2] + vouchers[right][2]))\n    print(vouchers[left][0], vouchers[left][1])\n    print(vouchers[right][0], vouchers[right][1])"], "rewards": [0.85, 0.0, 0.4, 0.0, 0.0, 0.15], "train rewards": [0.8, 0.0, 0.45, 0.0, 0.0, 0.15], "time": [17.204076290130615, 35.42368936538696, 49.66418528556824, 67.96065163612366, 86.44273805618286, 104.60110425949097], "sample times": 6}