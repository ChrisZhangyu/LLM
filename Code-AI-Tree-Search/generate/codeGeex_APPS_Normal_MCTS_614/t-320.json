{"codes": ["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import sys\n\nn = int(sys.stdin.readline().strip())\na = []\nb = []\nfor i in range(n):\n    a.append(int(sys.stdin.readline().strip().split()[0]))\n    b.append(int(sys.stdin.readline().strip().split()[1]))\n\nif sum(a) % 2 == 0 and sum(b) % 2 == 0:\n    print(0)\nelif sum(a) % 2 != 0 and sum(b) % 2 != 0:\n    print(-1)\nelif sum(a) % 2 != 0 and sum(b) % 2 == 0:\n    print(1)\nelif sum(a) % 2 == 0 and sum(b) % 2 != 0:\n    print(1)", "#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <cmath>\n#include <algorithm>\n#include <cstdlib>\n#include <string>\n#include <vector>\n#include <map>\n#include <set>\n#include <list>\n#include <queue>\n#include <stack>\n#include <bitset>\n#include <deque>\n#include <ctime>\n#include <climits>\n#include <cctype>\n#include <cassert>\n#include <complex>\n#include <iomanip>\n#include <unordered_map>\n#include <utility>\n#include <tuple>\n#include <random>\n#include <coroutine>\n#include <array>\nusing namespace std;\ntypedef long long ll;\ntypedef long double ld;\ntypedef unsigned long long ull;\ntypedef pair<int, int> pii;\ntypedef pair<ll, ll> pll;\ntypedef pair<ld, ld> pld;\ntypedef pair<double, double> pdd;\ntypedef vector<int> vi;\ntypedef vector<ll> vll;\ntypedef vector<pii> vpii;\ntypedef vector<pll> vpll;\ntypedef vector<pld> vpld;\ntypedef vector<pdd> vpdd;\ntypedef vector<double> vd;\ntypedef vector<char> vc;\ntypedef vector<string> vs;\ntypedef vector<vector<int>> vvi;\ntypedef vector<vector<ll>> vvll;\ntypedef vector<vector<pii>> vvpii;\ntypedef vector<vector<pll>> vvpll;\ntypedef vector<vector<pld>> vvpld;\ntypedef vector<vector<pdd>> vvpdd;\ntypedef vector<vector<double>> vvd;\ntypedef vector<vector<char>> vvc;\ntypedef vector<vector<string", "\nimport sys\n\nn = int(sys.stdin.readline().strip())\na = []\nb = []\nfor i in range(n):\n    a.append(int(sys.stdin.readline().strip().split()[0]))\n    b.append(int(sys.stdin.readline().strip().split()[1]))\n\nif sum(a) % 2 == 0 and sum(b) % 2 == 0:\n    print(0)\nelif sum(a) % 2 != 0 and sum(b) % 2 != 0:\n    print(-1)\nelif sum(a) % 2 != 0 and sum(b) % 2 == 0:\n    print(1)\nelif sum(a) % 2 == 0 and sum(b) % 2 != 0:\n    print(1)\nelse:\n    for i in range(n):\n        if a[i] % 2 != 0 and b[i] % 2 == 0:\n            print(1)\n            break\n        elif a[i] % 2 == 0 and b[i] % 2 != 0:\n            print(1)\n            break\n        elif a[i] % 2 != 0 and b[i] % 2 != 0:\n            print(2)\n            break\n        else:\n            print(-1)\n            break", "\ndef domino():\n    n = int(input())\n    a = []\n    b = []\n    for i in range(n):\n        a.append(int(input().split()[0]))\n        b.append(int(input().split()[1]))\n    if sum(a) % 2 == 0 and sum(b) % 2 == 0:\n        print(0)\n    elif sum(a) % 2 != 0 and sum(b) % 2 != 0:\n        print(-1)\n    elif sum(a) % 2 != 0 and sum(b) % 2 == 0:\n        print(1)\n    elif sum(a) % 2 == 0 and sum(b) % 2 != 0:\n        print(1)\n    elif sum(a) % 2 != 0 and sum(b) % 2 != 0:\n        for i in range(n):\n            if a[i] > b[i]:\n                a[i] = a[i] - b[i]\n                b[i] = b[i] + a[i]\n            elif b[i] > a[i]:\n                b[i] = b[i] - a[i]\n                a[i] = a[i] + b[i]\n        if sum(a) % 2 == 0 and sum(b) % 2 == 0:\n            print(0)\n        elif sum(a) % 2 != 0 and sum(b) % 2 != 0:\n            print(-1)\n        elif sum(a) % 2 != 0 and sum(b) % 2 == 0:\n            print(1)\n        elif sum(a) % 2 == 0 and sum(b) % 2 != 0:\n            print(1)\n        elif sum(a) % 2 != 0 and sum(b) % 2 != 0:\n            for i in range(n):\n                if a[i] > b[i]:\n                    a[i] = a[i] - b[i]\n                    b[i] = b", "import math\nimport os\nimport random\nimport re\nimport sys\n\n\nif __name__ == '__main__':\n    n = int(input())\n    a = []\n    b = []\n    for i in range(n):\n        a.append(list(map(int, input().rstrip().split())))\n    for i in range(n):\n        b.append(list(map(int, input().rstrip().split())))\n    for i in range(n):\n        if (a[i][0] + b[i][0]) % 2 == 0 and (a[i][1] + b[i][1]) % 2 == 0:\n            print(0)\n        else:\n            print(-1)", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n# https://github.com/terryyin/leetcode\n# Time:  O(N)\n\n\nclass Solution(object):\n    def minTimeToMoveAllDominoes(self, dominoes):\n        \"\"\"\n        :type dominoes: List[List[int]]\n        :rtype: int\n        \"\"\"\n        n = len(dominoes)\n        a, b = 0, 0\n        for i in range(n):\n            if dominoes[i][0] > dominoes[i][1]:\n                dominoes[i][0], dominoes[i][1] = dominoes[i][1], dominoes[i][0]\n            if dominoes[i][0] % 2 == 0:\n                a += 1\n            if dominoes[i][1] % 2 == 0:\n                b += 1\n        if a == n or b == n:\n            return 0\n        return (n - max(a, b)) * 2\n\n\nif __name__ == '__main__':\n    print(Solution().minTimeToMoveAllDominoes([[1, 2], [2, 1], [3, 4], [5, 6]]))\n    print(Solution().minTimeToMoveAllDominoes([[1, 2], [1, 2], [1, 1], [1, 2], [2, 1]]))\n    print(Solution().minTimeToMoveAllDominoes([[1, 2], [2, 1]]))\n    print(Solution().minTimeToMoveAllDominoes([[1, 1], [2, 2], [3, 3], [4, 4], [5, 5]]))\n    print(Solution().minTimeToMoveAllDominoes([[1, 1], [1, 1], [1, 1], [1, 1], [1, 1]]))\n    print(Solution().minTimeToMoveAllDominoes"], "rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "train rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "time": [25.8711154460907, 47.14722204208374, 74.44607877731323, 94.48280215263367, 121.54716444015503, 143.31404995918274, 170.2619264125824], "sample times": 7}