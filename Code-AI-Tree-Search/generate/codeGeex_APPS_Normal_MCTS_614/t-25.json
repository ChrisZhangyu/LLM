{"codes": ["\nclass Solution(object):\n    def kMatrix(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: List[List[int]]\n        \"\"\"\n        matrix = [[0 for i in range(n)] for j in range(n)]\n        if n == 1:\n            matrix[0][0] = 1\n            return matrix\n        if n == 2:\n            matrix[0][0] = 1\n            matrix[1][1] = 1\n            return matrix\n        if n == 3:\n            matrix[0][0] = 1\n            matrix[1][1] = 1\n            matrix[2][2] = 1\n            return matrix\n        if n == 4:\n            matrix[0][0] = 1\n            matrix[1][1] = 1\n            matrix[2][2] = 1\n            matrix[3][3] = 1\n            return matrix\n        if n == 5:\n            matrix[0][0] = 1\n            matrix[1][1] = 1\n            matrix[2][2] = 1\n            matrix[3][3] = 1\n            matrix[4][4] = 1\n            return matrix\n        if n == 6:\n            matrix[0][0] = 1\n            matrix[1][1] = 1\n            matrix[2][2] = 1\n            matrix[3][3] = 1\n            matrix[4][4] = 1\n            matrix[5][5] = 1\n            return matrix\n        if n == 7:\n            matrix[0][0] = 1\n            matrix[1][1] = 1\n            matrix[2][2] = 1\n            matrix[3][3] = 1\n            matrix[4][4] = 1\n            matrix[5][5] = 1\n            matrix[6][6] = 1\n            return matrix\n        if n == 8:\n            matrix[0][0] = 1\n            matrix[1][1] = 1\n            matrix[2][2] = 1\n            matrix[3][3] = 1\n            matrix[4][4] = 1\n            matrix[5][5] = 1\n            matrix[6][6] = 1\n            matrix[7][7] = 1\n            return matrix\n        if n == 9:\n            matrix[0][0] = 1\n            matrix[1][1] = 1\n            matrix[2][2] = 1\n            matrix[3][3] = 1\n            matrix[4][4] = 1\n            matrix[5][5] = 1\n            matrix[6][6] = 1\n            matrix[7][7] = 1\n            matrix[8][8] = 1\n            return matrix", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import math\nimport os\nimport random\nimport re\nimport sys\n\n\n\nif __name__ == '__main__':\n    nk = input().split()\n\n    n = int(nk[0])\n\n    k = int(nk[1])\n\n    a = [[0 for i in range(n)] for j in range(n)]\n\n    for i in range(n):\n        a[i] = list(map(int, input().rstrip().split()))\n\n    for i in range(n):\n        for j in range(n):\n            if a[i][j] == 0:\n                a[i][j] = 1\n            else:\n                a[i][j] = 0\n\n    for i in range(n):\n        for j in range(n):\n            if a[i][j] == 0:\n                a[i][j] = 1\n            else:\n                a[i][j] = 0\n\n    for i in range(n):\n        for j in range(n):\n            if a[i][j] == 0:\n                a[i][j] = 1\n            else:\n                a[i][j] = 0\n\n    for i in range(n):\n        for j in range(n):\n            if a[i][j] == 0:\n                a[i][j] = 1\n            else:\n                a[i][j] = 0", "class Solution(object):\n    def kMatrix(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: List[List[int]]\n        \"\"\"\n        matrix = [[0 for i in range(n)] for j in range(n)]\n        if k == 0:\n            return matrix\n        if k == 1:\n            for i in range(n):\n                matrix[i][i] = 1\n            return matrix\n        if k == n:\n            for i in range(n):\n                matrix[i][i] = 1\n            for i in range(n):\n                matrix[i][n - i - 1] = 1\n            return matrix\n        if k == n * 2 - 1:\n            for i in range(n):\n                matrix[i][i] = 1\n            for i in range(n):\n                matrix[i][n - i - 1] = 1\n            for i in range(n):\n                matrix[n - i - 1][i] = 1\n            return matrix\n        if k == n * 3 - 2:\n            for i in range(n):\n                matrix[i][i] = 1\n            for i in range(n):\n                matrix[i][n - i - 1] = 1\n            for i in range(n):\n                matrix[n - i - 1][i] = 1\n            for i in range(n):\n                matrix[i][i] = 1\n            return matrix\n        if k == n * 4 - 3:\n            for i in range(n):\n                matrix[i][i] = 1\n            for i in range(n):\n                matrix[i][n - i - 1] = 1\n            for i in range(n):\n                matrix[n - i - 1][i] = 1\n            for i in range(n):\n                matrix[i][i] = 1\n            for i in range(n):\n                matrix[i][n - i - 1] = 1\n            return matrix\n        if k == n * 5 - 4:\n            for i in range(n):\n                matrix[i][i] = 1\n            for i in range(n):\n                matrix[i][n - i - 1] = 1\n            for i in range(n):\n                matrix[n - i - 1][i] = 1\n            for i in range(n):\n                matrix[i][i] = 1\n            for i in range(n):\n                matrix[i][n - i - 1] = 1\n            for i in range(n):\n                matrix[n - i - 1][i] = 1\n            return matrix\n        if k == n * 6 - 5:\n            for i in range(n):\n                matrix[i][i] = 1\n            for i in range(n):\n                matrix[i][n - i - 1] = 1\n            for i in range(n):\n                matrix[n - i - 1][i] = 1\n            for i in range(n):\n                matrix[", "\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n\n\nif __name__ == '__main__':\n    nk = input().split()\n\n    n = int(nk[0])\n\n    k = int(nk[1])\n\n    arr = [[0 for i in range(n)] for j in range(n)]\n\n    for i in range(k):\n        x, y = map(int, input().split())\n        arr[x - 1][y - 1] = 1\n        arr[y - 1][x - 1] = 1\n\n    for i in range(n):\n        for j in range(n):\n            print(arr[i][j], end=' ')\n        print()\n\n    for i in range(n):\n        for j in range(n):\n            if arr[i][j] != arr[j][i]:\n                print(-1)\n                break\n        else:\n            continue\n        break", "import sys\n\nn, k = map(int, sys.stdin.readline().split())\nmatrix = [[0 for i in range(n)] for j in range(n)]\nfor i in range(k):\n    x, y = map(int, sys.stdin.readline().split())\n    matrix[x - 1][y - 1] = 1\n    matrix[y - 1][x - 1] = 1\n\nfor i in range(n):\n    for j in range(n):\n        print(matrix[i][j], end=\" \")\n    print()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\nimport sys\n\nn, k = map(int, sys.stdin.readline().split())\nmatrix = [[0 for i in range(n)] for j in range(n)]\nfor i in range(k):\n    x, y = map(int, sys.stdin.readline().split())\n    matrix[x - 1][y - 1] = 1\n    matrix[y - 1][x - 1] = 1\n\nfor i in range(n):\n    for j in range(n):\n        print(matrix[i][j], end=\" \")\n    print()", "\n\ndef is_symmetrical(matrix):\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n\n\ndef is_lexicographically_greater(matrix1, matrix2):\n    n = len(matrix1)\n    for i in range(n):\n        for j in range(n):\n            if matrix1[i][j] > matrix2[i][j]:\n                return True\n            elif matrix1[i][j] < matrix2[i][j]:\n                return False\n    return False\n\n\ndef put_ones(matrix, k):\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 0:\n                matrix[i][j] = 1\n                k -= 1\n                if k == 0:\n                    return matrix\n    return -1\n\n\nn, k = list(map(int, input().split()))\nmatrix = []\nfor i in range(n):\n    matrix.append(list(map(int, input().split())))\n\nif is_symmetrical(matrix):\n    matrix = put_ones(matrix, k)\n    if matrix == -1:\n        print(-1)\n    else:\n        for i in range(n):\n            for j in range(n):\n                print(matrix[i][j], end=\" \")\n            print()\nelse:\n    print(-1)", "class Solution:\n    def kMatrix(self, n, k):\n        matrix = [[0 for i in range(n)] for j in range(n)]\n        if k == 0:\n            return matrix\n        if k == 1:\n            matrix[0][0] = 1\n            return matrix\n        if k == n:\n            for i in range(n):\n                matrix[i][i] = 1\n            return matrix\n        if k == n * 2:\n            for i in range(n):\n                matrix[i][i] = 1\n                matrix[i][n - i - 1] = 1\n            return matrix\n        if k == n * 3:\n            for i in range(n):\n                matrix[i][i] = 1\n                matrix[i][n - i - 1] = 1\n                matrix[i][i + 1] = 1\n            return matrix\n        if k == n * 4:\n            for i in range(n):\n                matrix[i][i] = 1\n                matrix[i][n - i - 1] = 1\n                matrix[i][i + 1] = 1\n                matrix[i][i + 2] = 1\n            return matrix\n        if k == n * 5:\n            for i in range(n):\n                matrix[i][i] = 1\n                matrix[i][n - i - 1] = 1\n                matrix[i][i + 1] = 1\n                matrix[i][i + 2] = 1\n                matrix[i][i + 3] = 1\n            return matrix\n        if k == n * 6:\n            for i in range(n):\n                matrix[i][i] = 1\n                matrix[i][n - i - 1] = 1\n                matrix[i][i + 1] = 1\n                matrix[i][i + 2] = 1\n                matrix[i][i + 3] = 1\n                matrix[i][i + 4] = 1\n            return matrix\n        if k == n * 7:\n            for i in range(n):\n                matrix[i][i] = 1\n                matrix[i][n - i - 1] = 1\n                matrix[i][i + 1] = 1\n                matrix[i][i + 2] = 1\n                matrix[i][i + 3] = 1\n                matrix[i][i + 4] = 1\n                matrix[i][i + 5] = 1\n            return matrix\n        if k == n * 8:\n            for i in range(n):\n                matrix[i][i] = 1\n                matrix[i][n - i - 1] = 1\n                matrix[i][i + 1] = 1\n                matrix[i][i + 2] = 1\n                matrix[i][i + 3] = 1\n                matrix[i][i + 4] = 1\n                matrix[i][i + 5] = 1\n                matrix[i][i + 6] = 1\n            return matrix\n        if", "import numpy as np\nn,k=map(int,input().split())\na=np.zeros((n,n),dtype=int)\nfor i in range(k):\n    x,y=map(int,input().split())\n    a[x-1][y-1]=1\nfor i in range(n):\n    for j in range(n):\n        if a[i][j]==0:\n            a[i][j]=1\n        else:\n            a[i][j]=0\nfor i in range(n):\n    for j in range(n):\n        print(a[i][j],end=\" \")\n    print()"], "rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.02564102564102564, 0.02564102564102564, 0.0, 0.0, 0.0], "train rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0641025641025641, 0.0641025641025641, 0.0, 0.0, 0.0], "time": [37.07006311416626, 77.35026359558105, 97.08032608032227, 137.8827829360962, 153.59168004989624, 193.81789231300354, 217.89093852043152, 239.22059202194214, 279.3939914703369, 295.07060408592224], "sample times": 10}