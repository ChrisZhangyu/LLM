{"codes": ["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import sys\n\nn, k = [int(x) for x in sys.stdin.readline().split()]\na = [int(x) for x in sys.stdin.readline().split()]\n\nans = 0\nfor i in range(n + 1):\n    if abs(a[i]) > k:\n        break\n    if i == n:\n        ans += 1\n    else:\n        for j in range(i + 1, n + 1):\n            if abs(a[j]) > k:\n                break\n            a[i], a[j] = a[j], a[i]", "class Solution:\n    def waysToMakeFair(self, n, k, a):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :type a: List[int]\n        :rtype: int\n        \"\"\"", "\nimport sys\n\nn, k = [int(x) for x in sys.stdin.readline().split()]\na = [int(x) for x in sys.stdin.readline().split()]\n\nans = 0\nfor i in range(len(a)):\n    if a[i] == 0:\n        continue\n    if a[i] < 0:\n        a[i] = -a[i]\n    if a[i] % 2 == 0:\n        a[i] = a[i] // 2\n        ans += 1\n    if a[i] % 3 == ", "\ndef main():\n    n, k = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    if a[n] == 0:\n        print(0)\n        return\n    if a[n - 1] == 0:\n        print(0)\n        return\n    if a[n - 2] == 0:\n        print(0)\n        return\n    if a[n - 3] == 0:\n        print(0)\n        return\n    if a[n - 4] == 0:\n        print(0)", "\ndef get_coefficients():\n    n, k = map(int, input().split())\n    coefficients = list(map(int, input().split()))\n    return n, k, coefficients\n\n\ndef get_ways(n, k, coefficients):\n    ways = 0\n    for i in range(len(coefficients)):\n        if abs(coefficients[i]) > k:\n            return 0\n    if coefficients[n] == 0:\n        return 0\n    for i in range(len(coefficients)):\n        if coefficients[i] == 0:\n            continue\n        new_coefficients ="], "rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "train rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "time": [12.112046003341675, 22.19027280807495, 32.25044918060303, 42.26036715507507, 52.288339614868164, 62.37961792945862], "sample times": 6}