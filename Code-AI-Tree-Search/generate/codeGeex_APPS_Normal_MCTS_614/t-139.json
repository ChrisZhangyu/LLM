{"codes": ["\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\ngraph = {}\nfor i in range(m):\n    u, v = map(int, sys.stdin.readline().split())\n    if u not in graph:\n        graph[u] = [v]\n    else:\n        graph[u].append(v)\n    if v not in graph:\n        graph[v] = [u]\n    else:\n        graph[v].append(u)\n\ndef dfs(u, visited):\n    if u in visited:\n        return False\n    visited.add(u)\n    if u in graph:\n        for v in graph[u]:\n            if not dfs(v, visited):\n                return False\n    return True\n\nvisited = set()\nfor i in range(1, n + 1):\n    if i not in visited:\n        if not dfs(i, visited):\n            print(\"NO\")\n            sys.exit()\nprint(\"YES\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\nclass Solution(object):\n    def solve(self, cipher):\n        \"\"\"\n        main solution function\n        :param cipher: the cipher\n        \"\"\"\n        # TODO\n\n\nif __name__ == \"__main__\":\n    import sys\n\n    f = open(\"1.in\", \"r\")\n    # f = sys.stdin\n    testcases = int(f.readline().strip())\n\n    for t in xrange(testcases):\n        cipher = f.readline().strip()\n\n        # solve\n        s = \"%s\\n\" % (Solution().solve(cipher))\n        print s,", "#include<bits/stdc++.h>\nusing namespace std;\nint main()\n{\n    int n,m;\n    scanf(\"%d%d\",&n,&m);\n    int a,b;\n    while(m--)\n    {\n        scanf(\"%d%d\",&a,&b);\n        if(a==b)\n        {\n            printf(\"NO\\n\");\n            return 0;\n        }\n    }\n    printf(\"YES\\n\");\n    return 0;\n}", "import sys\n\nn, m = map(int, sys.stdin.readline().split())\ngraph = {}\nfor i in range(m):\n    u, v = map(int, sys.stdin.readline().split())\n    if u not in graph:\n        graph[u] = [v]\n    else:\n        graph[u].append(v)\n    if v not in graph:\n        graph[v] = [u]\n    else:\n        graph[v].append(u)\n\nvisited = [0] * (n + 1)\n\n\ndef dfs(u):\n    visited[u] = 1\n    for v in graph[u]:\n        if visited[v] == 0:\n            if dfs(v) == False:\n                return False\n        elif visited[v] == 1:\n            return False\n    visited[u] = 2\n    return True\n\n\nif dfs(1) == False:\n    print(\"NO\")\nelse:\n    print(\"YES\")\n\n\n\n\n# import sys\n\n# n, m = map(int, sys.stdin.readline().split())\n# graph = {}\n# for i in range(m):\n#     u, v = map(int, sys.stdin.readline().split())\n#     if u not in graph:\n#         graph[u] = [v]\n#     else:\n#         graph[u].append(v)\n#     if v not in graph:\n#         graph[v] = [u]\n#     else:\n#         graph[v].append(u)\n\n# visited = [0] * (n + 1)\n\n\n# def dfs(u):\n#     visited[u] = 1\n#     for v in graph[u]:\n#         if visited[v] == 0:\n#             if dfs(v) == False:\n#                 return False\n#         elif visited[v] == 1:\n#             return False\n#     visited[u] = 2\n#     return True\n\n\n# if dfs(1) == False:\n#     print(\"NO\")\n# else:\n#     print(\"YES\")", "\n\nclass Solution(object):\n    def solve(self, cipher):\n        \"\"\"\n        main solution function\n        :param cipher: the cipher\n        \"\"\"\n        # TODO\n\n\nif __name__ == \"__main__\":\n    import sys\n\n    f = open(\"1.in\", \"r\")\n    # f = sys.stdin\n    testcases = int(f.readline().strip())\n\n    for t in xrange(testcases):\n        n, m = map(int, f.readline().strip().split(\" \"))\n        cipher = map(int, f.readline().strip().split(\" \"))\n\n        # solve\n        s = \"%s\\n\" % (Solution().solve(cipher))\n        print s,"], "rewards": [0.4, 0.0, 0.0, 0.0, 0.37777777777777777, 0.0], "train rewards": [0.4090909090909091, 0.0, 0.0, 0.0, 0.3409090909090909, 0.0], "time": [32.95714521408081, 37.20310378074646, 48.7173855304718, 57.45724654197693, 86.97473859786987, 99.09156250953674], "sample times": 6}