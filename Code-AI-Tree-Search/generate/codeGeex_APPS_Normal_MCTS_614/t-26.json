{"codes": ["import math\nx, y, z = map(float, input().split())\na1 = math.pow(x, math.pow(y, z))\na2 = math.pow(x, math.pow(z, y))\na3 = math.pow(math.pow(x, y), z)\na4 = math.pow(math.pow(x, z), y)\na5 = math.pow(y, math.pow(x, z))\na6 = math.pow(y, math.pow(z, x))\na7 = math.pow(math.pow(y, x), z)\na8 = math.pow(math.pow(y, z), x)\na9 = math.pow(z, math.pow(x, y))\na10 = math.pow(z, math.pow(y, x))\na11 = math.pow(math.pow(z, x), y)\na12 = math.pow(math.pow(z, y), x)\nm = max(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12)\nif m == a1:\n    print(\"x^y^z\")\nelif m == a2:\n    print(\"x^z^y\")\nelif m == a3:\n    print(\"(", "\nimport math\n\nx = float(input())\ny = float(input())\nz = float(input())\n\na1 = math.pow(x, math.pow(y, z))\na2 = math.pow(x, math.pow(z, y))\na3 = math.pow(math.pow(x, y), z)\na4 = math.pow(math.pow(x, z), y)\na5 = math.pow(y, math.pow(x, z))\na6 = math.pow(y, math.pow(z, x))\na7 = math.pow(math.pow(y, x), z)\na8 = math.pow(math.pow(y, z), x)\na9 = math.pow(z, math.pow(x, y))\na10 = math.pow(z, math.pow(y, x))\na11 = math.pow(math.pow(z, x), y)\na12 = math.pow(math.pow(z, y), x)\n\nm = max(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12)\n\nif m == a1:\n    print(\"x^y^z\")\nelif m == a2:\n    print(\"x^z^y\")\n", "#include <iostream>\n#include <cmath>\nusing namespace std;\nint main()\n{\n    double x, y, z;\n    cin >> x >> y >> z;\n    double a1 = pow(x, y) * pow(z, 1);\n    double a2 = pow(x, z) * pow(y, 1);\n    double a3 = pow(pow(x, y), z);\n    double a4 = pow(pow(x, z), y);\n    double a5 = pow(y, x) * pow(z, 1);\n    double a6 = pow(y, z) * pow(x, 1);\n    double a7 = pow(pow(y, x), z);\n    double a8 = pow(pow(y, z), x);\n    double a9 = pow(z, x) * pow(y, 1);\n    double a10 = pow(z, y) * pow(x, 1);\n    double a11 = pow(pow(z, x), y);\n    double a12 = pow(pow(z, y), x);\n    double m = max(a1, max(a2, max(a3, max(a4, max(a5, max(a6, max(a7, max(a8, max(a9, max(a10, max(a11, a", "import math\n\nx = float(input())\ny = float(input())\nz = float(input())\n\na1 = math.pow(x, y)\na2 = math.pow(x, z)\na3 = math.pow(math.pow(x, y), z)\na4 = math.pow(math.pow(x, z), y)\na5 = math.pow(y, x)\na6 = math.pow(y, z)\na7 = math.pow(math.pow(y, x), z)\na8 = math.pow(math.pow(y, z), x)\na9 = math.pow(z, x)\na10 = math.pow(z, y)\na11 = math.pow(math.pow(z, x), y)\na12 = math.pow(math.pow(z, y), x)\n\nm = max(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12)\n\nif m == a1:\n    print(\"x^y^z\")\nelif m == a2:\n    print(\"x^z^y\")\nelif m == a3:\n    print(\"(x^y)^z\")\nelif m == a4:\n    print(\"(x^z)^y\")\nelif", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```", "import sys\n\nx, y, z = map(float, sys.stdin.readline().split())\n\na1 = x ** y ** z\na2 = x ** z ** y\na3 = (x ** y) ** z\na4 = (x ** z) ** y\na5 = y ** x ** z\na6 = y ** z ** x\na7 = (y ** x) ** z\na8 = (y ** z) ** x\na9 = z ** x ** y\na10 = z ** y ** x\na11 = (z ** x) ** y\na12 = (z ** y) ** x\n\nm = max(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12)\n\nfor i in range(1, 13):\n    if a[i] == m:\n        print(i)\n        break", "\n#include <iostream>\n#include <cmath>\nusing namespace std;\nint main()\n{\n    double x, y, z;\n    cin >> x >> y >> z;\n    double a1 = pow(x, y) * pow(z, 1);\n    double a2 = pow(x, z) * pow(y, 1);\n    double a3 = pow(pow(x, y), z);\n    double a4 = pow(pow(x, z), y);\n    double a5 = pow(y, x) * pow(z, 1);\n    double a6 = pow(y, z) * pow(x, 1);\n    double a7 = pow(pow(y, x), z);\n    double a8 = pow(pow(y, z), x);\n    double a9 = pow(z, x) * pow(y, 1);\n    double a10 = pow(z, y) * pow(x, 1);\n    double a11 = pow(pow(z, x), y);\n    double a12 = pow(pow(z, y), x);\n    double m = max(a1, max(a2, max(a3, max(a4, max(a5, max(a6, max(a7, max(a8, max(a9, max(a10, max(a11,", "import math\n\nx, y, z = map(float, input().split())\n\na1 = math.pow(x, math.pow(y, z))\na2 = math.pow(x, math.pow(z, y))\na3 = math.pow(math.pow(x, y), z)\na4 = math.pow(math.pow(x, z), y)\na5 = math.pow(y, math.pow(x, z))\na6 = math.pow(y, math.pow(z, x))\na7 = math.pow(math.pow(y, x), z)\na8 = math.pow(math.pow(y, z), x)\na9 = math.pow(z, math.pow(x, y))\na10 = math.pow(z, math.pow(y, x))\na11 = math.pow(math.pow(z, x), y)\na12 = math.pow(math.pow(z, y), x)\n\nm = max(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12)\n\nif m == a1:\n    print(\"x^y^z\")\nelif m == a2:\n    print(\"x^z^y\")\nelif m == a3:\n"], "rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "train rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "time": [18.748167991638184, 37.65124177932739, 56.85453748703003, 75.61101603507996, 80.21389245986938, 99.88187527656555, 119.0630214214325, 137.4548943042755], "sample times": 8}