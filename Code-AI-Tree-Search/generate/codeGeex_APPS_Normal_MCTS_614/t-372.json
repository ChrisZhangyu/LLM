{"codes": ["\nfrom math import sqrt\n\nx1, y1, r1 = list(map(int, input().split()))\nx2, y2, r2 = list(map(int, input().split()))\n\nd = sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)\n\nif d > r1 + r2:\n    print(0)\nelif d < abs(r1 - r2):\n    print(0)\nelse:\n    print(pi * min(r1, r2) ** 2)", "\nimport math\n\nx1, y1, r1 = [int(i) for i in input().split()]\nx2, y2, r2 = [int(i) for i in input().split()]\n\nd = math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)\n\nif d > r1 + r2:\n    print(0)\nelif d < abs(r1 - r2):\n    print(math.pi * min(r1, r2) ** 2)\nelse:\n    print(math.pi * (r1 + r2 - d) ** 2 / 2)", "\n\n-----Input-----\n\nThe first line contains three integers x_1, y_1, r_1 ( - 10^9 \u2264 x_1, y_1 \u2264 10^9, 1 \u2264 r_1 \u2264 10^9) \u2014 the position of the center and the radius of the first circle.\n\nThe second line contains three integers x_2, y_2, r_2 ( - 10^9 \u2264 x_2, y_2 \u2264 10^9, 1 \u2264 r_2 \u2264 10^9) \u2014 the position of the center and the radius of the second circle.\n\n\n-----Output-----\n\nPrint the area of the intersection of the circles. The answer will be considered correct if the absolute or relative error doesn't exceed 10^{ - 6}.\n\n\n-----Examples-----\nInput\n0 0 4\n6 0 4\n\nOutput\n7.25298806364175601379\n\nInput\n0 0 5\n11 0 5\n\nOutput\n0.00000000000000000000\nUse Standard Input format", "import math\n\nx1, y1, r1 = [int(i) for i in input().split()]\nx2, y2, r2 = [int(i) for i in input().split()]\n\nd = math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)\nif d > r1 + r2:\n    print(0)\nelif d < abs(r1 - r2):\n    print(math.pi * min(r1, r2) ** 2)\nelse:\n    print(math.pi * (r1 + r2 - d) ** 2 / 2)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "from math import sqrt\n\nx1, y1, r1 = list(map(int, input().split()))\nx2, y2, r2 = list(map(int, input().split()))\n\nd = sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)\n\nif d > r1 + r2:\n    print(0)\nelif d < abs(r1 - r2):\n    print(0)\nelse:\n    print(pi * min(r1, r2) ** 2)", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\nimport math\n\ndef dist(x1, y1, x2, y2):\n    return math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)\n\ndef circle_area(x, y, r):\n    return math.pi * r ** 2\n\ndef circle_intersection(x1, y1, r1, x2, y2, r2):\n    d = dist(x1, y1, x2, y2)\n    if d > r1 + r2:\n        return 0\n    if d < abs(r1 - r2):\n        return circle_area(x1, y1, r1) + circle_area(x2, y2, r2)\n    if d == 0 and r1 == r2:\n        return circle_area(x1, y1, r1) + circle_area(x2, y2, r2)\n    \n    a = (r1 ** 2 - r2 ** 2 + d ** 2) / (2 * d)\n    h = math.sqrt(r1 ** 2 - a ** 2)\n    x3 = x1 + a * (x2 - x1) / d\n    y3 = y1 + a * (y2 - y1) / d\n    x4 = x3 + h * (y2 - y1) / d\n    y4 = y3 - h * (x2 - x1) / d\n    x5 = x3 - h * (y2 - y1) / d\n    y5 = y3 + h * (x2 - x1) / d\n    return circle_area(x1, y1, r1) + circle_area(x2, y2, r2) - circle_area(x4, y4, r1) - circle_area(x5, y5, r1)\n\nx1, y1, r1 = list(map(int, input().split()))\nx2, y2, r2 = list(map(int, input().split()))\n\nprint(round(circle_intersection(x1, y1, r1, x2, y2, r2), 6))\n\n\n-----Input-----\n\nThe first line contains three integers x_1, y_1, r_1 ( - 10^9 \u2264 x_1, y_1 \u2264 10^9, 1 \u2264 r_1 \u2264 10^9) \u2014 the position of the center and the radius of the first circle.\n\nThe second line contains three integers x_2, y_2, r_2 ( - 10^9 \u2264 x_2, y_2 \u2264 10^9, 1 \u2264 r_2 \u2264 10^9) \u2014 the position of the center and the radius of the second circle.\n\n\n-----Output-----\n\nPrint the area of the intersection of the circles. The answer will be considered correct if the absolute or relative error doesn't", "\nimport math\n\ndef circle_intersection(x1, y1, r1, x2, y2, r2):\n    d = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)\n    if d > r1 + r2:\n        return 0\n    if d < abs(r1 - r2):\n        return 0\n    if d == 0 and r1 == r2:\n        return 0\n    else:\n        a = (r1 ** 2 - r2 ** 2 + d ** 2) / (2 * d)\n        h = math.sqrt(r1 ** 2 - a ** 2)\n        x3 = x1 + a * (x2 - x1) / d\n        y3 = y1 + a * (y2 - y1) / d\n        x_ = x3 + h * (y2 - y1) / d\n        y_ = y3 - h * (x2 - x1) / d\n\n        x4 = x3 + h * (y1 - y2) / d\n        y4 = y3 - h * (x1 - x2) / d\n\n        return math.pi * (r1 ** 2 - a ** 2) / 2 + math.pi * (r2 ** 2 - a ** 2) / 2\n\nx1, y1, r1 = list(map(int, input().split()))\nx2, y2, r2 = list(map(int, input().split()))\n\nprint(circle_intersection(x1, y1, r1, x2, y2, r2))\n\n\"\"\"\n\n\ndef circle_intersection(x1, y1, r1, x2, y2, r2):\n    d = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)\n    if d > r1 + r2:\n        return 0\n    if d < abs(r1 - r2):\n        return 0\n    if d == 0 and r1 == r2:\n        return 0\n    else:\n        a = (r1 ** 2 - r2 ** 2 + d ** 2) / (2 * d)\n        h = math.sqrt(r1 ** 2 - a ** 2)\n        x3 = x1 + a * (x2 - x1) / d\n        y3 = y1 + a * (y2 - y1) / d\n        x_ = x3 + h * (y2 - y1) / d\n        y_ = y3 - h * (x2 - x1) / d\n\n        x4 = x3 + h * (y1 - y2) / d\n        y4 = y3 - h * (x1 - x2) / d\n\n        return math.pi * (r1 ** 2 - a ** 2) / 2 + math.pi * (r2 ** 2 - a", "import math\n\ndef dist(x1, y1, x2, y2):\n    return math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)\n\nx1, y1, r1 = list(map(int, input().split()))\nx2, y2, r2 = list(map(int, input().split()))\n\nd = dist(x1, y1, x2, y2)\n\nif d > r1 + r2:\n    print(0)\nelif d < abs(r1 - r2):\n    print(math.pi * min(r1, r2) ** 2)\nelse:\n    print(math.pi * (r1 + r2 - d) ** 2 / 2)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"], "rewards": [0.0, 0.07407407407407407, 0.0, 0.07407407407407407, 0.0, 0.0, 0.0, 0.0, 0.07407407407407407], "train rewards": [0.1111111111111111, 0.4444444444444444, 0.0, 0.4444444444444444, 0.1111111111111111, 0.0, 0.0, 0.0, 0.4444444444444444], "time": [17.691038131713867, 38.694223403930664, 75.4458839893341, 112.17024183273315, 130.08670926094055, 166.59552454948425, 203.13122510910034, 239.68920373916626, 276.5838303565979], "sample times": 9}