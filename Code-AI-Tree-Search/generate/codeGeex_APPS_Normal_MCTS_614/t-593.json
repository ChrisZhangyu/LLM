{"codes": ["\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\na = []\nfor i in range(m):\n    a.append(list(map(int, sys.stdin.readline().split())))\n\nfor i in range(m):\n    for j in range(n):\n        if a[i][j] == max(a[i]):\n            a[i][j] = 1\n        else:\n            a[i][j] = 0\n\nfor i in range(m):\n    for j in range(n):\n        if a[i][j] == max(a[i]):\n            a[i][j] = 1\n        else:\n            a[i][j] = 0\n\nfor i in range(m):\n    for j in range(n):\n        if a[i][j] == max(a[i]):\n            a[i][j] = 1\n        else:\n            a[i][j] = 0\n\nfor i in range(m):\n    for j in range(n):\n        if a[i][j] == max(a[i]):\n            a[i][j] = 1\n        else:\n            a[i][j] = 0\n\nfor i in range(m):\n    for j in range(n):\n        if a[i][j] == max(a[i]):\n            a[i][j] = 1\n        else:\n            a[i][j] = 0\n\nfor i in range(m):\n    for j in range(n):\n        if a[i][j] == max", "import sys\nn, m = map(int, sys.stdin.readline().split())\na = []\nfor i in range(m):\n    a.append(list(map(int, sys.stdin.readline().split())))\nfor i in range(m):\n    for j in range(n):\n        if a[i][j] == max(a[i]):\n            a[i][j] = 1\n        else:\n            a[i][j] = 0\nfor i in range(m):\n    for j in range(n):\n        if a[i][j] == max(a[i]):\n            a[i][j] = 1\n        else:\n            a[i][j] = 0\nfor i in range(m):\n    for j in range(n):\n        if a[i][j] == max(a[i]):\n            a[i][j] = 1\n        else:\n            a[i][j] = 0\nfor i in range(m):\n    for j in range(n):\n        if a[i][j] == max(a[i]):\n            a[i][j] = 1\n        else:\n            a[i][j] = 0\nfor i in range(m):\n    for j in range(n):\n        if a[i][j] == max(a[i]):\n            a[i][j] = 1\n        else:\n            a[i][j] = 0\nfor i in range(m):\n    for j in range(n):\n        if a[i][j] == max(a[i]):\n           ", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "class Solution(object):\n    defelection(self, n, m, a):\n        \"\"\"\n        :type n: int\n        :type m: int\n        :type a: List[List[int]]\n        :rtype: int\n        \"\"\"\n        for i in range(m):\n            for j in range(n):\n                if a[i][j] == 0:\n                    a[i][j] = -1\n        for i in range(m):\n            for j in range(n):\n                if a[i][j] == -1:\n                    for k in range(m):\n                        if a[k][j] != -1:\n                            a[i][j] = a[k][j]\n                            break\n        for i in range(m):\n            for j in range(n):\n                if a[i][j] == -1:\n                    for k in range(n):\n                        if a[i][k] != -1:\n                            a[i][j] = a[i][k]\n                            break\n        for i in range(m):\n            for j in range(n):\n                if a[i][j] == -1:\n                    for k in range(m):\n                        if a[k][j] != -1:\n                            a[i][j] = a[k][j]\n                            break\n        for i in range(m):\n            for j in range(n):\n                if a[i][j] == -1:\n                    for k in range(n):\n                        if a[i][k] != -1:\n                            a[i][j] = a[", "\ndef main():\n    n, m = map(int, input().split())\n    a = []\n    for i in range(m):\n        a.append(list(map(int, input().split())))\n    b = []\n    for i in range(m):\n        b.append(list(map(int, input().split())))\n    for i in range(m):\n        for j in range(n):\n            if a[i][j] > b[i][j]:\n                b[i][j] = a[i][j]\n    for i in range(m):\n        for j in range(n):\n            if a[i][j] > b[i][j]:\n                b[i][j] = a[i][j]\n    for i in range(m):\n        for j in range(n):\n            if a[i][j] > b[i][j]:\n                b[i][j] = a[i][j]\n    for i in range(m):\n        for j in range(n):\n            if a[i][j] > b[i][j]:\n                b[i][j] = a[i][j]\n    for i in range(m):\n        for j in range(n):\n            if a[i][j] > b[i][j]:\n                b[i][j] = a[i][j]\n    for i in range(m):\n        for j in range(n):\n            if a[i][j] > b[i][j]:\n                b[i][j] = a[i][j]\n    for i in range(m):\n        for j in range(n):", "class Solution:\n    def qsort(self, arr):\n        if len(arr) <= 1:\n            return arr\n        else:\n            pivot = arr[0]\n            less = [i for i in arr[1:] if i <= pivot]\n            greater = [i for i in arr[1:] if i > pivot]\n            return self.qsort(less) + [pivot] + self.qsort(greater)\n\n    def qsort2(self, arr):\n        if len(arr) <= 1:\n            return arr\n        else:\n            pivot = arr[0]\n            less = [i for i in arr[1:] if i <= pivot]\n            greater = [i for i in arr[1:] if i > pivot]\n            return self.qsort2(less) + [pivot] + self.qsort2(greater)\n\n    def qsort3(self, arr):\n        if len(arr) <= 1:\n            return arr\n        else:\n            pivot = arr[0]\n            less = [i for i in arr[1:] if i <= pivot]\n            greater = [i for i in arr[1:] if i > pivot]\n            return self.qsort3(less) + [pivot] + self.qsort3(greater)\n\n    def qsort4(self, arr):\n        if len(arr) <= 1:\n            return arr\n        else:\n            pivot = arr[0]\n            less = [i for i in arr[1:] if i <= pivot]\n            greater =", "import sys\n\nn, m = map(int, sys.stdin.readline().split())\na = []\nfor i in range(m):\n    a.append(list(map(int, sys.stdin.readline().split())))\n\nfor i in range(m):\n    for j in range(n):\n        if a[i][j] == max(a[i]):\n            a[i][j] = 0\n\nfor i in range(m):\n    for j in range(n):\n        if a[i][j] == max(a[i]):\n            a[i][j] = 1\n\nfor i in range(m):\n    for j in range(n):\n        if a[i][j] == max(a[i]):\n            a[i][j] = 2\n\nfor i in range(m):\n    for j in range(n):\n        if a[i][j] == max(a[i]):\n            a[i][j] = 3\n\nfor i in range(m):\n    for j in range(n):\n        if a[i][j] == max(a[i]):\n            a[i][j] = 4\n\nfor i in range(m):\n    for j in range(n):\n        if a[i][j] == max(a[i]):\n            a[i][j] = 5\n\nfor i in range(m):\n    for j in range(n):\n        if a[i][j] == max(a[i]):\n            a[i][j] = 6\n\nfor i in range(m):\n    for j", "\n\ndef main():\n    n, m = map(int, input().split())\n    a = []\n    for i in range(m):\n        a.append(list(map(int, input().split())))\n    b = []\n    for i in range(m):\n        b.append(list(map(int, input().split())))\n    c = []\n    for i in range(m):\n        c.append(list(map(int, input().split())))\n    d = []\n    for i in range(m):\n        d.append(list(map(int, input().split())))\n    e = []\n    for i in range(m):\n        e.append(list(map(int, input().split())))\n    f = []\n    for i in range(m):\n        f.append(list(map(int, input().split())))\n    g = []\n    for i in range(m):\n        g.append(list(map(int, input().split())))\n    h = []\n    for i in range(m):\n        h.append(list(map(int, input().split())))\n    i = []\n    for i in range(m):\n        i.append(list(map(int, input().split())))\n    j = []\n    for i in range(m):\n        j.append(list(map(int, input().split())))\n    k = []\n    for i in range(m):\n        k.append(list(map(int, input().split())))\n    l = []\n    for i in range(m):\n        l.append(list(map(int, input().split())))\n"], "rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "train rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "time": [21.053174018859863, 42.681097984313965, 64.3594536781311, 86.00677490234375, 107.45467209815979, 128.9730567932129, 150.75258922576904, 172.43282270431519], "sample times": 8}