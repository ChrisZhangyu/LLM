{"codes": ["\nimport sys\n\nn, t = map(int, sys.stdin.readline().split())\ncount = 0\nfor i in range(t):\n    count += 1\n    for j in range(1, n + 1):\n        if j % 2 == 1:\n            if j == n:\n                count += 1\n            else:\n                count += 1\n        else:\n            if j == 1:\n                count += 1\n            else:\n                count += 1\nprint(count)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "#include<iostream>\nusing namespace std;\nint main()\n{\n    int n,t;\n    cin>>n>>t;\n    int sum=0;\n    for(int i=1;i<=t;i++)\n    {\n        sum+=n;\n        n-=2;\n    }\n    cout<<sum;\n    return 0;\n}\n\"\"\"", "import sys\n\nn, t = map(int, sys.stdin.readline().split())\n\ncount = 0\n\nfor i in range(t):\n    count += 1\n    for j in range(n):\n        if j == 0:\n            if count == 1:\n                print(1)\n            else:\n                print(0)\n        else:\n            if count == 1:\n                print(2)\n            elif count == 2:\n                print(3)\n            elif count == 3:\n                print(4)\n            elif count == 4:\n                print(5)\n            elif count == 5:\n                print(6)\n            elif count == 6:\n                print(7)\n            elif count == 7:\n                print(8)\n            elif count == 8:\n                print(9)\n            elif count == 9:\n                print(10)\n            elif count == 10:\n                print(11)", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\ndef champagne_tower(n, t):\n    champagne = [0] * (n + 1)\n    champagne[0] = 1\n    for i in range(t):\n        for j in range(n, 0, -1):\n            champagne[j] = max(0, (champagne[j] - 1) / 2) + max(0, (champagne[j - 1] - 1) / 2)\n    return sum(champagne)\n\n\ndef champagne_tower(n, t):\n    champagne = [0] * (n + 1)\n    champagne[0] = 1\n    for i in range(t):\n        for j in range(n, 0, -1):\n            champagne[j] = max(0, (champagne[j] - 1) / 2) + max(0, (champagne[j - 1] - 1) / 2)\n    return sum(champagne)\n\n\ndef champagne_tower(n, t):\n    champagne = [0] * (n + 1)\n    champagne[0] = 1\n    for i in range(t):\n        for j in range(n, 0, -1):\n            champagne[j] = max(0, (champagne[j] - 1) / 2) + max(0, (champagne[j - 1] - 1) / 2)\n    return sum(champagne)\n\n\ndef champagne_tower(n, t):\n    champagne = [0] * (n + 1)\n    champagne[0] = 1\n    for i in range(t):\n        for j in range(n, 0, -1):\n            champagne[j] = max(0, (champagne[j] - 1) / 2) + max(0, (champagne[j - 1] - 1) / 2)\n    return sum(champagne)", "#include <bits/stdc++.h>\nusing namespace std;\nint main()\n{\n    int n,t;\n    cin>>n>>t;\n    int ans=0;\n    for(int i=1;i<=n;i++)\n    {\n        if(i==1)\n        {\n            ans+=1;\n        }\n        else\n        {\n            ans+=2*i-1;\n        }\n    }\n    cout<<ans;\n    return 0;\n}\n\"\"\"", "\ndef glass(n, t):\n    if n == 1:\n        return 1\n    else:\n        return glass(n - 1, t) + glass(n - 2, t) + glass(n - 3, t) + glass(n - 4, t) + glass(n - 5, t) + glass(n - 6, t) + glass(n - 7, t) + glass(n - 8, t) + glass(n - 9, t) + glass(n - 10, t) + glass(n - 11, t) + glass(n - 12, t) + glass(n - 13, t) + glass(n - 14, t) + glass(n - 15, t) + glass(n - 16, t) + glass(n - 17, t) + glass(n - 18, t) + glass(n - 19, t) + glass(n - 20, t) + glass(n - 21, t) + glass(n - 22, t) + glass(n - 23, t) + glass(n - 24, t) + glass(n - 25, t) + glass(n - 26, t) + glass(n - 27, t) + glass(n - 28, t) + glass(n - 29, t) + glass(n - 30, t) + glass(n - 31, t) + glass(n - 32, t) + glass(n - 33, t) + glass(n - 34, t) + glass(n - 35, t) + glass(n - 36, t) + glass(n - 37, t) + glass(n - 38, t) + glass(n - 39, t) + glass(n - 40, t) + glass(n - 41, t) + glass(n - 42, t) + glass(n - 43, t) + glass(n - 44, t) + glass(n - 45, t) + glass(n - 46, t) + glass(", "#!/usr/bin/python\n\nimport sys\n\nn, t = map(int, sys.stdin.readline().split())\n\ncount = 0\n\nfor i in range(t):\n    count += 1\n    for j in range(1, n + 1):\n        if j % 2 == 0:\n            count += 1\n        else:\n            count -= 1\n        if count == n:\n            break\n\nprint(count)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"], "rewards": [0.01639344262295082, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04918032786885246], "train rewards": [0.03333333333333333, 0.0, 0.016666666666666666, 0.0, 0.0, 0.0, 0.0, 0.05], "time": [31.3059561252594, 39.01119613647461, 52.82917809486389, 82.41175842285156, 108.58499145507812, 117.33592224121094, 146.4305293560028, 175.57224321365356], "sample times": 8}