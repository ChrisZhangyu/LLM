{"codes": ["\n#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint main()\n{\n    int n;\n    cin >> n;\n    string s;\n    cin >> s;\n    int len = 0;\n    for (int i = 0; i < n; i++)\n    {\n        int count = 1;\n        for (int j = i + 1; j < n; j++)\n        {\n            if (s[i] == s[j])\n            {\n                count++;\n            }\n            else\n            {\n                break;\n            }\n        }\n        if (count > 1)\n        {\n            if (len < count)\n            {\n                len = count;\n            }\n        }\n    }\n    cout << len;\n    return 0;\n}\n\n\"\"\"", "import sys\n\nN = int(sys.stdin.readline().strip())\nS = sys.stdin.readline().strip()\n\ncount = {}\nfor i in range(N):\n    if S[i] in count:\n        count[S[i]] += 1\n    else:\n        count[S[i]] = 1\n\nmax_len = 0\nfor key in count:\n    if count[key] >= 2:\n        max_len = max(max_len, len(key))\n\nprint(max_len)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "class Solution(object):\n    def maxLengthBetweenEqualCharacters(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        dic = {}\n        for i in range(len(s)):\n            if s[i] not in dic:\n                dic[s[i]] = [i]\n            else:\n                dic[s[i]].append(i)\n        res = 0\n        for key in dic:\n            if len(dic[key]) > 1:\n                res = max(res, dic[key][-1] - dic[key][0] - 1)\n        return res\n\n\n# 2nd solution\nclass Solution(object):\n    def maxLengthBetweenEqualCharacters(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        dic = {}\n        for i in range(len(s)):\n            if s[i] not in dic:\n                dic[s[i]] = [i]\n            else:\n                dic[s[i]].append(i)\n        res = 0\n        for key in dic:\n            if len(dic[key]) > 1:\n                res = max(res, dic[key][-1] - dic[key][0] - 1)\n        return res\n\n\n# 3rd solution\nclass Solution(object):\n    def maxLengthBetweenEqualCharacters(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        dic = {}\n        for i in range(len(s)):\n            if s[i] not in dic:\n                dic[s[i]] = [i]\n            else:\n                dic[s[i]].append(i)\n        res = 0\n        for key in dic:\n            if len(dic[key]) > 1:\n                res = max(res, dic[key][-1] - dic[key][0] - 1)\n        return res", "\nimport sys\n\nN = int(sys.stdin.readline().strip())\nS = sys.stdin.readline().strip()\n\ncount = {}\n\nfor i in range(N):\n    if S[i] in count:\n        count[S[i]] += 1\n    else:\n        count[S[i]] = 1\n\nfor i in range(N):\n    if count[S[i]] > 1:\n        count[S[i]] -= 1\n    else:\n        del count[S[i]]\n\nif len(count) == 0:\n    print(0)\nelse:\n    print(max(count.values()))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\nclass Solution(object):\n    def maxLengthBetweenEqualCharacters(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        dic = {}\n        for i in range(len(s)):\n            if s[i] not in dic:\n                dic[s[i]] = [i]\n            else:\n                dic[s[i]].append(i)\n        res = 0\n        for key in dic:\n            if len(dic[key]) >= 2:\n                res = max(res, dic[key][-1] - dic[key][0] - 1)\n        return res\n\n\n# 2nd solution\nclass Solution(object):\n    def maxLengthBetweenEqualCharacters(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        dic = {}\n        res = 0\n        for i in range(len(s)):\n            if s[i] not in dic:\n                dic[s[i]] = [i]\n            else:\n                dic[s[i]].append(i)\n        for key in dic:\n            if len(dic[key]) >= 2:\n                res = max(res, dic[key][-1] - dic[key][0] - 1)\n        return res\n\n\n# 3rd solution\nclass Solution(object):\n    def maxLengthBetweenEqualCharacters(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        dic = {}\n        res = 0\n        for i in range(len(s)):\n            if s[i] not in dic:\n                dic[s[i]] = [i]\n            else:\n                dic[s[i]].append(i)\n        for key in dic:\n            if len(dic[key]) >= 2:\n                res = max(res, dic[key][-1] - dic[key][0] - 1)\n        return res", "class Solution:\n    def findSubstringInWraproundString(self, p):\n        \"\"\"\n        :type p: str\n        :rtype: int\n        \"\"\"\n        if not p:\n            return 0\n        d = collections.defaultdict(int)\n        for i in range(len(p)):\n            if i > 0 and (ord(p[i]) - ord(p[i - 1]) == 1 or ord(p[i]) - ord(p[i - 1]) == -25):\n                d[p[i - 1]] += 1\n            else:\n                d[p[i]] += 1\n        return max(d.values() or [0])", "\n\ndef main():\n    n = int(input())\n    s = input()\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if s[i:j] == s[i:j][::-1]:\n                count = max(count, j - i)\n    print(count)\n\n\nif __name__ == \"__main__\":\n    main()"], "rewards": [0.0, 0.05714285714285714, 0.0, 0.0, 0.05714285714285714, 0.0, 0.0, 0.0], "train rewards": [0.0, 0.02857142857142857, 0.0, 0.0, 0.02857142857142857, 0.0, 0.0, 0.0], "time": [11.748783349990845, 45.60670328140259, 80.47100472450256, 107.8364508152008, 142.86591577529907, 170.64255690574646, 180.99896621704102, 193.88614153862], "sample times": 8}