{"codes": ["\nimport sys\n\nn = int(sys.stdin.readline().strip())\n\nboard = []\nfor i in range(n):\n    board.append(list(map(int, sys.stdin.readline().strip().split())))\n\ndef knight_moves(x, y):\n    moves = [(-2, -1), (-2, 1), (-1, -2), (-1, 2), (1, -2), (1, 2), (2, -1), (2, 1)]\n    return moves\n\n\ndef bishop_moves(x, y):\n    moves = [(-1, -1), (-1, 1), (1, -1), (1, 1)]\n    return moves\n\n\ndef rook_moves(x, y):\n    moves = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    return moves\n\n\ndef get_moves(piece, x, y):\n    if piece == 1:\n        return knight_moves(x, y)\n    elif piece == 2:\n        return bishop_moves(x, y)\n    elif piece == 3:\n        return rook_moves(x, y)\n    else:\n        return []\n\n\ndef get_moves_count(piece, x, y):\n    moves = get_m", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import sys\n\nn = int(sys.stdin.readline().strip())\n\nboard = []\nfor i in range(n):\n    board.append(list(map(int, sys.stdin.readline().strip().split())))\n\ndef knight_moves(x, y):\n    moves = [(2, 1), (2, -1), (-2, 1), (-2, -1), (1, 2), (1, -2), (-1, 2), (-1, -2)]\n    return moves\n\n\ndef bishop_moves(x, y):\n    moves = [(1, 1), (1, -1), (-1, 1), (-1, -1)]\n    return moves\n\n\ndef rook_moves(x, y):\n    moves = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    return moves\n\n\ndef get_moves(piece, x, y):\n    if piece == 1:\n        return knight_moves(x, y)\n    elif piece == 2:\n        return bishop_moves(x, y)\n    elif piece == 3:\n        return rook_moves(x, y)\n    else:\n        return []\n\n\ndef get_moves_count(piece, x, y):\n    moves = get_moves", "def knight_moves(n):\n    moves = [(1, 2), (1, -2), (-1, 2), (-1, -2), (2, 1), (2, -1), (-2, 1), (-2, -1)]\n    for i in range(n):\n        for j in range(n):\n            for move in moves:\n                x = i + move[0]\n                y = j + move[1]\n                if 0 <= x < n and 0 <= y < n:\n                    print(x + 1, y + 1)\nknight_moves(int(input()))", "\ndef knight_moves(n):\n    moves = [(1, 2), (1, -2), (-1, 2), (-1, -2), (2, 1), (2, -1), (-2, 1), (-2, -1)]\n    for i in range(n):\n        for j in range(n):\n            for move in moves:\n                x = i + move[0]\n                y = j + move[1]\n                if 0 <= x < n and 0 <= y < n:\n                    print(x, y)\n\n\nknight_moves(3)", "\n\ndef knight_moves(x, y):\n    moves = [(2, 1), (2, -1), (-2, 1), (-2, -1), (1, 2), (1, -2), (-1, 2), (-1, -2)]\n    return [(x + dx, y + dy) for (dx, dy) in moves]\n\n\ndef knight_traverse(n):\n    board = [[0 for _ in range(n)] for _ in range(n)]\n    board[0][0] = 1\n    queue = [(0, 0, 1)]\n    while queue:\n        x, y, steps = queue.pop(0)\n        if x == n - 1 and y == n - 1:\n            return steps\n        for nx, ny in knight_moves(x, y):\n            if 0 <= nx < n and 0 <= ny < n and board[nx][ny] == 0:\n                queue.append((nx, ny, steps + 1))\n                board[nx][ny] = board[x][y]\n    return -1\n\n\nn = int(input())\nprint(knight_traverse(n))", "import math\n\nn = int(input())\n\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\n\n# print(a)\n\ndef get_distance(x1, y1, x2, y2):\n    return math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)\n\n\ndef get_min_distance(x1, y1, x2, y2):\n    return min(get_distance(x1, y1, x2, y2), get_distance(x1, y1, x2, -y2), get_distance(x1, y1, -x2, y2),\n               get_distance(x1, y1, -x2, -y2))\n\n\ndef get_max_distance(x1, y1, x2, y2):\n    return max(get_distance(x1, y1, x2, y2), get_distance(x1, y1, x2, -y2), get_distance(x1, y1, -x2, y2),\n               get_distance(x1, y1, -x2, -y2))\n\n\ndef get_sum_distance(x1, y1, x2, y2):\n    return get_distance(x1, y1, x2, y2) + get"], "rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "train rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "time": [20.175360679626465, 40.416728258132935, 60.44600057601929, 79.49132227897644, 98.42398071289062, 118.63992118835449, 139.16494607925415], "sample times": 7}