{"codes": ["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import sys\n\nn, m, p = [int(x) for x in sys.stdin.readline().split()]\ncoins = []\nfor i in range(m):\n    coins.append([int(x) for x in sys.stdin.readline().split()[1:]])\n\ndef dfs(node, coins, time):\n    if node == n:\n        if time * p <= sum(coins):\n            return sum(coins)\n        else:\n            return sum(coins) - (time * p - sum(coins))\n    else:\n        res = 0\n        for i in range(len(coins)):\n            if coins[i][0] == node:\n                res = max(res, dfs(coins[i][1], coins[:i] + coins[i + 1:], time + 1))\n        return res\n\nprint(dfs(1, coins, 0))", "#include <bits/stdc++.h>\nusing namespace std;\nint main()\n{\n    int n,m,p;\n    cin>>n>>m>>p;\n    int a[m+1],b[m+1],c[m+1];\n    for(int i=1;i<=m;i++)\n    {\n        cin>>a[i]>>b[i]>>c[i];\n    }\n    int dp[n+1];\n    memset(dp,0,sizeof(dp));\n    for(int i=1;i<=m;i++)\n    {\n        for(int j=a[i];j<=b[i];j++)\n        {\n            dp[b[i]]=max(dp[b[i]],dp[a[i]]+c[i]);\n        }\n    }\n    if(dp[n]<=p*m)\n    {\n        cout<<-1;\n    }\n    else\n    {\n        cout<<dp[n]-p*m;\n    }\n    return 0;\n}\n\n\"\"\"", "\nimport sys\n\nn, m, p = [int(x) for x in sys.stdin.readline().split()]\n\nedges = []\nfor i in range(m):\n    a, b, c = [int(x) for x in sys.stdin.readline().split()]\n    edges.append((a, b, c))\n\n\ndef dfs(node, coins):\n    if node == n:\n        return coins\n    else:\n        return max(dfs(edges[i][1], coins + edges[i][2]) for i in range(len(edges)) if edges[i][0] == node)\n\n\nprint(dfs(1, 0))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main()\n{\n    int n, m, p;\n    cin >> n >> m >> p;\n    vector<vector<pair<int, int>>> edges(n + 1);\n    for (int i = 0; i < m; i++)\n    {\n        int a, b, c;\n        cin >> a >> b >> c;\n        edges[a].push_back(make_pair(b, c));\n    }\n    vector<int> dp(n + 1, 0);\n    queue<int> q;\n    q.push(1);\n    dp[1] = 0;\n    while (!q.empty())\n    {\n        int u = q.front();\n        q.pop();\n        for (int i = 0; i < edges[u].size(); i++)\n        {\n            int v = edges[u][i].first;\n            int c = edges[u][i].second;\n            dp[v] = max(dp[v], dp[u] + c);\n            q.push(v);\n        }\n    }\n    if (dp", "import sys\n\ndef main():\n    n, m, p = [int(x) for x in sys.stdin.readline().split()]\n    coins = []\n    for i in range(m):\n        a, b, c = [int(x) for x in sys.stdin.readline().split()]\n        coins.append((a, b, c))\n    \n    dp = [[0 for i in range(p + 1)] for j in range(n + 1)]\n    for i in range(1, n + 1):\n        dp[i][0] = 0\n    \n    for i in range(1, n + 1):\n        for j in range(1, p + 1):\n            dp[i][j] = dp[i - 1][j]\n            for a, b, c in coins:\n                if a == i:\n                    dp[i][j] = max(dp[i][j], dp[b][j - c] + c)\n                elif b == i:\n                    dp[i][j] = max(dp[i][j], dp[a][j - c] + c)\n    \n    if"], "rewards": [0.0, 0.13333333333333333, 0.0, 0.0, 0.0, 0.0], "train rewards": [0.0, 0.10344827586206896, 0.0, 0.0, 0.0, 0.0], "time": [17.114024877548218, 33.99566960334778, 54.45682644844055, 71.08064413070679, 87.26655316352844, 103.637455701828], "sample times": 6}