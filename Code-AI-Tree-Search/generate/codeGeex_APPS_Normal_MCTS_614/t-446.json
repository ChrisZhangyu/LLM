{"codes": ["\nimport sys\n\nn = int(sys.stdin.readline().strip())\n\nk = 0\n\nwhile n % 2 == 0:\n    k += 1\n    n //= 2\n\nif n == 1:\n    print(1)\nelse:\n    print(n * 2 ** k - 1)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import math\n\ndef is_beautiful(n):\n    binary = bin(n)[2:]\n    ones = binary.count('1')\n    zeros = binary.count('0')\n    return ones + zeros == math.ceil(math.log(n, 2)) + 1\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\nn = int(input())\n\nfor i in range(n, 0, -1):\n    if is_beautiful(i) and is_beautiful(n // i):\n        print(gcd(i, n // i))\n        break", "\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\nn = int(input())\na = 1\nb = 1\nfor i in range(1, n + 1):\n    a = a * 2 + 1\n    b = b * 2\nprint(gcd(a, b))", "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\ndef lcm(a, b):\n    return (a * b) / gcd(a, b)\n\nn = int(input())\nfor i in range(2, n + 1):\n    if n % i == 0:\n        print(lcm(i, n // i))\n        break\n\"\"\"\n\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\n\ndef lcm(a, b):\n    return (a * b) / gcd(a, b)\n\n\nn = int(input())\nfor i in range(2, n + 1):\n    if n % i == 0:\n        print(lcm(i, n // i))\n        break", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\ndef is_beautiful(n):\n    s = str(bin(n))[2:]\n    return s.count('1') == 2 and s.count('0') == 2\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\nn = int(input())\nfor i in range(1, n + 1):\n    if is_beautiful(i) and is_beautiful(n // i):\n        print(gcd(i, n // i))", "import sys\n\nn = int(sys.stdin.readline().strip())\n\ndef is_beautiful(n):\n    binary = bin(n)[2:]\n    ones = binary.count('1')\n    zeros = binary.count('0')\n    return ones + zeros == len(binary) - 1 and zeros % 2 == 1\n\nwhile n % 2 == 0:\n    n //= 2\n\nwhile n > 1:\n    if is_beautiful(n):\n        break\n    else:\n        n -= 1\n\nprint(n)\n\"\"\"\n\n\ndef is_beautiful(n):\n    binary = bin(n)[2:]\n    ones = binary.count(\"1\")\n    zeros = binary.count(\"0\")\n    return ones + zeros == len(binary) - 1 and zeros % 2 == 1\n\n\nwhile n % 2 == 0:\n    n //= 2\n\nwhile n > 1:\n    if is_beautiful(n):\n        break\n    else:\n        n -= 1\n\nprint(n)", "\ndef get_divisors(n):\n    divisors = []\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if i != n // i:\n                divisors.append(n // i)\n    divisors.sort()\n    return divisors\n\n\ndef get_beautiful_divisors(n):\n    divisors = get_divisors(n)\n    beautiful_divisors = []\n    for divisor in divisors:\n        if bin(divisor)[2:].count(\"1\") == 2:\n            beautiful_divisors.append(divisor)\n    return beautiful_divisors\n\n\nn = int(input())\nbeautiful_divisors = get_beautiful_divisors(n)\nprint(max(beautiful_divisors))", "\nimport math\n\nn = int(input())\n\ndef is_beautiful(n):\n    binary = bin(n)[2:]\n    ones = binary.count('1')\n    zeros = binary.count('0')\n    return ones + zeros == math.ceil(math.log(n, 2)) + 1 and ones == math.floor(math.log(n, 2)) + 1\n\ndef find_beautiful_divisor(n):\n    for i in range(n, 1, -1):\n        if is_beautiful(i) and n % i == 0:\n            return i\n\nprint(find_beautiful_divisor(n))\n\n\"\"\"\n\n\ndef is_beautiful(n):\n    binary = bin(n)[2:]\n    ones = binary.count(\"1\")\n    zeros = binary.count(\"0\")\n    return ones + zeros == math.ceil(math.log(n, 2)) + 1 and ones == math.floor(math.log(n, 2)) + 1\n\n\ndef find_beautiful_divisor(n):\n    for i in range(n, 1, -1):\n        if is_beautiful(i) and n % i == 0:\n            return i\n\n\nprint(find_beautiful_divisor(n))", "def is_beautiful(n):\n    s = str(bin(n))[2:]\n    return s.count('1') == 2 and s.count('0') == 2\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\nn = int(input())\n\nfor i in range(1, n + 1):\n    if is_beautiful(i) and is_beautiful(n // i):\n        print(gcd(i, n // i))\n        break\n\"\"\"\n\n\ndef is_beautiful(n):\n    s = str(bin(n))[2:]\n    return s.count(\"1\") == 2 and s.count(\"0\") == 2\n\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\n\nn = int(input())\nfor i in range(1, n + 1):\n    if is_beautiful(i) and is_beautiful(n // i):\n        print(gcd(i, n // i))\n        break"], "rewards": [0.12, 0.48, 0.48, 0.0, 0.0, 0.0, 0.0, 0.04, 0.0, 0.0], "train rewards": [0.041666666666666664, 0.375, 0.375, 0.0, 0.0, 0.0, 0.0, 0.08333333333333333, 0.0, 0.0], "time": [36.37389636039734, 46.75329852104187, 57.8029842376709, 74.08536219596863, 111.36816024780273, 120.26104974746704, 136.90985012054443, 151.7133505344391, 169.54828453063965, 185.6845359802246], "sample times": 10}