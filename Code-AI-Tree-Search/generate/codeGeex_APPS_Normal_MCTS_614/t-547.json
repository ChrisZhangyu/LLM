{"codes": ["\nimport sys\n\nn, k = map(int, sys.stdin.readline().split())\npasswords = []\nfor i in range(n):\n    passwords.append(sys.stdin.readline().strip())\ncodehorses_password = sys.stdin.readline().strip()\n\nbest_case = 0\nworst_case = 0\n\nfor password in passwords:\n    if password == codehorses_password:\n        best_case += 1\n        worst_case += 1\n    else:\n        if len(password) < len(codehorses_password):\n            best_case += len(codehorses_password) - len(password)\n            worst_case += len(codehorses_password) - len(password)\n        elif len(password) > len(codehorses_password):\n            best_case += len(password) - len(codehorses_password)\n            worst_case += len(password) - len(codehorses_password)\n        else:\n            best_case += 1\n", "import sys\n\nn, k = map(int, sys.stdin.readline().split())\npasswords = []\nfor i in range(n):\n    password = sys.stdin.readline().strip()\n    passwords.append(password)\ncodehorses_password = sys.stdin.readline().strip()\n\nbest_case = 0\nworst_case = 0\n\nfor password in passwords:\n    if password == codehorses_password:\n        best_case += 1\n        worst_case += 1\n    else:\n        if len(password) < len(codehorses_password):\n            best_case += len(codehorses_password) - len(password)\n            worst_case += len(codehorses_password) - len(password)\n        elif len(password) > len(codehorses_password):\n            best_case += len(password) - len(codehorses_password)\n            worst_case += len(password) - len(codehorses_password)\n        else:\n            best_", "#include<bits/stdc++.h>\nusing namespace std;\nint main()\n{\n    int n,k;\n    cin>>n>>k;\n    vector<string>a;\n    for(int i=0;i<n;i++)\n    {\n        string s;\n        cin>>s;\n        a.push_back(s);\n    }\n    string s;\n    cin>>s;\n    int ans1=0,ans2=0;\n    for(int i=0;i<n;i++)\n    {\n        if(a[i].size()==s.size())\n        {\n            ans1=1;\n            break;\n        }\n    }\n    for(int i=0;i<n;i++)\n    {\n        if(a[i]==s)\n        {\n            ans2=1;\n            break;\n        }\n    }\n    for(int i=0;i<n;i++)\n    {\n        if(a[i].size()==s.size())\n        ", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\n#include<bits/stdc++.h>\nusing namespace std;\nint main()\n{\n    int n,k;\n    cin>>n>>k;\n    string s;\n    vector<string> a;\n    for(int i=0;i<n;i++)\n    {\n        cin>>s;\n        a.push_back(s);\n    }\n    string s1;\n    cin>>s1;\n    int ans1=0,ans2=0;\n    for(int i=0;i<n;i++)\n    {\n        if(a[i].size()==s1.size())\n        {\n            ans1=1;\n            break;\n        }\n    }\n    for(int i=0;i<n;i++)\n    {\n        if(a[i]==s1)\n        {\n            ans2=1;\n            break;\n        }\n    }\n    for(int i=0;i<n;i++)\n    {\n        if(a[i]==s1)", "#include <bits/stdc++.h>\nusing namespace std;\nint main()\n{\n    int n,k;\n    cin>>n>>k;\n    string s;\n    vector<string> v;\n    for(int i=0;i<n;i++)\n    {\n        cin>>s;\n        v.push_back(s);\n    }\n    cin>>s;\n    int ans1=0,ans2=0;\n    for(int i=0;i<n;i++)\n    {\n        if(s==v[i])\n        {\n            ans1=1;\n            break;\n        }\n    }\n    if(ans1==0)\n    {\n        for(int i=0;i<n;i++)\n        {\n            if(s.size()==v[i].size())\n            {\n                ans1=1;\n                break;\n            }\n        }\n    }\n    if(ans1==0)\n    {\n        for(int i=0;i<n;i"], "rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "train rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "time": [14.598668813705444, 29.487175703048706, 44.31128168106079, 59.123496770858765, 74.07083010673523, 88.6068823337555], "sample times": 6}