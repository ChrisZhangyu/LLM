{"codes": ["\nimport re\n\ns = input()\nn = int(input())\n\nfor i in range(n):\n    login = input()\n    if re.search(s, login):\n        print(\"No\")\n        break\nelse:\n    print(\"Yes\")", "import re\n\ndef is_similar(login, existing_logins):\n    for existing_login in existing_logins:\n        if re.search(r'[a-z]', existing_login) and re.search(r'[A-Z]', existing_login) and re.search(r'[0-9]', existing_login) and re.search(r'[^a-zA-Z0-9_]', existing_login):\n            if re.sub(r'[a-z]', lambda x: x.group(0).upper(), existing_login) == login or re.sub(r'[A-Z]', lambda x: x.group(0).lower(), existing_login) == login or re.sub(r'[0-9]', lambda x: str(9 - int(x.group(0))), existing_login) == login or re.sub(r'[^a-zA-Z0-9_]', lambda x: chr(ord(x.group(0)) + 32) if x.group(0).islower() else chr(ord(x.group(0)) - 32), existing_login) ==", "\ndef is_similar(login):\n    for i in range(len(login)):\n        for j in range(i + 1, len(login)):\n            if login[i] == login[j]:\n                continue\n            if login[i].isupper() and login[j].islower():\n                continue\n            if login[i].islower() and login[j].isupper():\n                continue\n            if login[i].isdigit() and login[j].isalpha():\n                continue\n            if login[i].isalpha() and login[j].isdigit():\n                continue\n            if login[i] == 'O' and login[j] == '0':\n                continue\n            if login[i] == '0' and login[j] == 'O':\n                continue\n            if login[i] == '1' and (login[j] == 'l' or login[j] == 'I' or login[j] == 'i'):\n                continue\n            if login[i] == 'l' or login[i] == 'I' or login[i] == 'i' and login[j] == '1':\n                continue\n            return True\n    return False\n\nif __name__ ==", "class Solution(object):\n    def check_login(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        for i in range(len(s)):\n            for j in range(i + 1, len(s) + 1):\n                if s[i:j] == s[j:]:\n                    return False\n        return True", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\nimport sys\n\ns = sys.stdin.readline().strip()\nn = int(sys.stdin.readline().strip())\n\nfor i in range(n):\n    login = sys.stdin.readline().strip()\n    if s == login:\n        print(\"No\")\n        sys.exit(0)\n\nprint(\"Yes\")", "\nimport re\n\ndef is_similar(login, existing_logins):\n    for existing_login in existing_logins:\n        if re.match(r'^' + login + r'$', existing_login):\n            return True\n        if re.match(r'^' + login.upper() + r'$', existing_login):\n            return True\n        if re.match(r'^' + login.lower() + r'$', existing_login):\n            return True\n        if re.match(r'^' + login.lower().replace('o', '0') + r'$', existing_login):\n            return True\n        if re.match(r'^' + login.upper().replace('O', '0') + r'$', existing_login):\n            return True\n        if re.match(r'^' + login.upper().replace('O', '1') + r'$', existing_login):\n            return True\n        if re.match(r'^' + login.upper().replace('O', 'l') + r'$', existing_login):\n            return True\n        if re.match(r'^' + login.upper().replace('O', 'I') + r'$', existing_", "\nimport string\n\ns = input()\nn = int(input())\nl = []\nfor i in range(n):\n    l.append(input())\n\nfor i in l:\n    if s == i:\n        print(\"No\")\n        break\nelse:\n    print(\"Yes\")"], "rewards": [0.09090909090909091, 0.0, 0.0, 0.0, 0.0, 0.09090909090909091, 0.0, 0.09090909090909091], "train rewards": [0.6190476190476191, 0.0, 0.0, 0.0, 0.0, 0.5714285714285714, 0.0, 0.5714285714285714], "time": [16.129040718078613, 33.035149574279785, 49.513641119003296, 61.074312925338745, 77.6202700138092, 90.15971899032593, 106.5983510017395, 123.00694131851196], "sample times": 8}