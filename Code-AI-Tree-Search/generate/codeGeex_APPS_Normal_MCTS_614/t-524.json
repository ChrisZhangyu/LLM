{"codes": ["\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input().strip())\n\n    a = list(map(int, input().rstrip().split()))\n\n    result = solve(n, a)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import math\nimport os\nimport random\nimport re\nimport sys\n\n\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input().strip())\n\n    a = list(map(int, input().rstrip().split()))\n\n    result = solve(n, a)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()", "#include<bits/stdc++.h>\nusing namespace std;\nint main()\n{\n    int n;\n    cin>>n;\n    int a[n];\n    for(int i=0;i<n;i++)\n    {\n        cin>>a[i];\n    }\n    sort(a,a+n);\n    int ans=0;\n    for(int i=1;i<n;i++)\n    {\n        if(a[i]==a[i-1])\n        {\n            ans++;\n        }\n    }\n    cout<<ans<<endl;\n    return 0;\n}", "\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    dp = [0] * n\n    dp[0] = 1\n    for i in range(1, n):\n        dp[i] = dp[i - 1] + 1\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = min(dp[i], dp[j] + 1)\n    print(dp[n - 1])\n\n\nif __name__ == '__main__':\n    main()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\nimport sys\n\nn = int(sys.stdin.readline().strip())\na = [int(x) for x in sys.stdin.readline().strip().split()]\n\ndp = [0] * n\ndp[0] = 0\n\nfor i in range(1, n):\n    if a[i] == 1:\n        dp[i] = dp[i - 1] + 1\n    else:\n        dp[i] = min(dp[i - 1] + 1, dp[i - 1] + 2)\n\nfor i in range(2, n):\n    if a[i] == 1:\n        dp[i] = min(dp[i], dp[i - 2] + 1)\n    else:\n        dp[i] = min(dp[i], dp[i - 2] + 2)\n\nprint(dp[n - 1])", "import sys\n\nn = int(sys.stdin.readline().strip())\na = [int(x) for x in sys.stdin.readline().strip().split()]\n\ndp = [0] * n\ndp[0] = 0\n\nfor i in range(1, n):\n    if a[i] == 1:\n        dp[i] = dp[i - 1] + 1\n    else:\n        dp[i] = min(dp[i - 1] + 1, dp[i - 1] + 2)\n\nfor i in range(2, n):\n    if a[i] == 1:\n        dp[i] = min(dp[i], dp[i - 2] + 1)\n    else:\n        dp[i] = min(dp[i], dp[i - 2] + 2)\n\nprint(dp[n - 1])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\n\ndef power_sequence():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    ans = 0\n    for i in range(n):\n        if a[i] == 1:\n            continue\n        if a[i] == a[i - 1]:\n            ans += 1\n        else:\n            ans += a[i] - a[i - 1] - 1\n    return ans\n\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    result = power_sequence()\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()"], "rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "train rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "time": [27.023658752441406, 33.956684589385986, 61.678364276885986, 71.33290076255798, 98.6434268951416, 112.27684187889099, 139.21183705329895, 150.49546194076538], "sample times": 8}