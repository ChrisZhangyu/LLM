{"codes": ["\nclass Solution(object):\n    def check_bracket_sequence(self, bracket_sequence):\n        \"\"\"\n        :type bracket_sequence: str\n        :rtype: bool\n        \"\"\"\n        stack = []\n        for bracket in bracket_sequence:\n            if bracket == '(':\n                stack.append(bracket)\n            else:\n                if len(stack) == 0:\n                    return False\n                stack.pop()\n        return len(stack) == 0\n\n    def arithmeticExpression(self, cnt1, cnt2, cnt3, cnt4):\n        \"\"\"\n        :type cnt1: int\n        :type cnt2: int\n        :type cnt3: int\n        :type cnt4: int\n        :rtype: bool\n        \"\"\"\n        bracket_sequence = ''\n        if cnt1 > 0:\n            bracket_sequence += '(' * cnt1\n        if cnt2 > 0:\n            bracket_sequence += ')' * cnt2\n        if cnt3 > 0:\n            bracket_sequence += '(' * cnt3\n        if cnt4 > 0:\n            bracket_sequence += ')' * cnt4\n        return self.check_bracket_sequence(bracket_sequence)\n\n\nif __name__ == '__main__':\n    solution = Solution()\n    print solution.arithmeticExpression(3, 1, 4, 3)\n    print solution.arithmeticExpression(0, 0, 0, 0)\n    print solution.arithmeticExpression(1, 2, 3, 4)", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```", "class Solution(object):\n    def check_bracket_sequence(self, bracket_sequence):\n        \"\"\"\n        :type bracket_sequence: str\n        :rtype: bool\n        \"\"\"\n        stack = []\n        for bracket in bracket_sequence:\n            if bracket == '(':\n                stack.append(bracket)\n            else:\n                if len(stack) == 0:\n                    return False\n                else:\n                    stack.pop()\n        if len(stack) == 0:\n            return True\n        else:\n            return False\n\n    def check_regular_bracket_sequence(self, bracket_sequences):\n        \"\"\"\n        :type bracket_sequences: List[str]\n        :rtype: bool\n        \"\"\"\n        for bracket_sequence in bracket_sequences:\n            if not self.check_bracket_sequence(bracket_sequence):\n                return False\n        return True\n\n    def check_bracket_sequences(self, cnt1, cnt2, cnt3, cnt4):\n        \"\"\"\n        :type cnt1: int\n        :type cnt2: int\n        :type cnt3: int\n        :type cnt4: int\n        :rtype: bool\n        \"\"\"\n        bracket_sequences = []\n        for i in range(cnt1):\n            bracket_sequences.append('(((')\n        for i in range(cnt2):\n            bracket_sequences.append('()()')\n        for i in range(cnt3):\n            bracket_sequences.append('))(')\n        for i in range(cnt4):\n            bracket_sequences.append('))))')\n        return self.check_regular_bracket_sequence(bracket_sequences)", "import sys\n\ncnt_1, cnt_2, cnt_3, cnt_4 = map(int, sys.stdin.readlines())\n\nif cnt_1 == 0 and cnt_2 == 0 and cnt_3 == 0 and cnt_4 == 0:\n    print(1)\nelif cnt_1 == 0 and cnt_2 == 0 and cnt_3 == 0 and cnt_4 == 1:\n    print(1)\nelif cnt_1 == 0 and cnt_2 == 0 and cnt_3 == 1 and cnt_4 == 0:\n    print(1)\nelif cnt_1 == 0 and cnt_2 == 0 and cnt_3 == 1 and cnt_4 == 1:\n    print(1)\nelif cnt_1 == 0 and cnt_2 == 1 and cnt_3 == 0 and cnt_4 == 0:\n    print(1)\nelif cnt_1 == 0 and cnt_2 == 1 and cnt_3 == 0 and cnt_4 == 1:\n    print(1)\nelif cnt_1 == 0 and cnt_2 == 1 and cnt_3 == 1 and cnt_4 == 0:\n    print(1)\nelif cnt_1 == 0 and cnt_2 == 1 and cnt_3 == 1 and cnt_4 == 1:\n    print(1)\nelif cnt_1 == 1 and cnt_2 == 0 and cnt_3 == 0 and cnt_4 == 0:\n    print(1)\nelif cnt_1 == 1 and cnt_2 == 0 and cnt_3 == 0 and cnt_4 == 1:\n    print(1)\nelif cnt_1 == 1 and cnt_2 == 0 and cnt_3 == 1 and cnt_4 == 0:\n    print(1)\nelif cnt_1 == 1 and cnt_2 == 0 and cnt_3 == 1 and cnt_4 == 1:\n    print(1)\nelif cnt_1 == 1 and cnt_2 == 1", "\nimport sys\n\ncnt_1, cnt_2, cnt_3, cnt_4 = map(int, sys.stdin.readlines())\n\nif cnt_1 == 0 and cnt_2 == 0 and cnt_3 == 0 and cnt_4 == 0:\n    print(1)\nelif cnt_1 == 0 and cnt_2 == 0 and cnt_3 == 0 and cnt_4 != 0:\n    print(1)\nelif cnt_1 == 0 and cnt_2 == 0 and cnt_3 != 0 and cnt_4 == 0:\n    print(1)\nelif cnt_1 == 0 and cnt_2 == 0 and cnt_3 != 0 and cnt_4 != 0:\n    print(1)\nelif cnt_1 == 0 and cnt_2 != 0 and cnt_3 == 0 and cnt_4 == 0:\n    print(1)\nelif cnt_1 == 0 and cnt_2 != 0 and cnt_3 == 0 and cnt_4 != 0:\n    print(1)\nelif cnt_1 == 0 and cnt_2 != 0 and cnt_3 != 0 and cnt_4 == 0:\n    print(1)\nelif cnt_1 == 0 and cnt_2 != 0 and cnt_3 != 0 and cnt_4 != 0:\n    print(1)\nelif cnt_1 != 0 and cnt_2 == 0 and cnt_3 == 0 and cnt_4 == 0:\n    print(1)\nelif cnt_1 != 0 and cnt_2 == 0 and cnt_3 == 0 and cnt_4 != 0:\n    print(1)\nelif cnt_1 != 0 and cnt_2 == 0 and cnt_3 != 0 and cnt_4 == 0:\n    print(1)\nelif cnt_1 != 0 and cnt_2 == 0 and cnt_3 != 0 and cnt_4 != 0:\n    print(1)\nelif cnt_1 != 0 and cnt_2 != ", "class Solution:\n    def check_bracket_sequence(self, bracket_sequence):\n        stack = []\n        for bracket in bracket_sequence:\n            if bracket == '(':\n                stack.append(bracket)\n            elif bracket == ')':\n                if len(stack) == 0:\n                    return False\n                stack.pop()\n        return len(stack) == 0\n\n    def check_regular_bracket_sequence(self, bracket_sequences):\n        for bracket_sequence in bracket_sequences:\n            if not self.check_bracket_sequence(bracket_sequence):\n                return False\n        return True\n\n    def checkBrackets(self, cnt1, cnt2, cnt3, cnt4):\n        bracket_sequences = []\n        if cnt1 > 0:\n            bracket_sequences.append('(((')\n        if cnt2 > 0:\n            bracket_sequences.append('()()')\n        if cnt3 > 0:\n            bracket_sequences.append('))(')\n        if cnt4 > 0:\n            bracket_sequences.append('))')\n        return self.check_regular_bracket_sequence(bracket_sequences)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\n\nclass Solution(object):\n    def check_bracket_sequence(self, bracket_sequence):\n        \"\"\"\n        :type bracket_sequence: str\n        :rtype: bool\n        \"\"\"\n        stack = []\n        for bracket in bracket_sequence:\n            if bracket == '(':\n                stack.append(bracket)\n            elif bracket == ')':\n                if len(stack) == 0:\n                    return False\n                else:\n                    stack.pop()\n        if len(stack) == 0:\n            return True\n        else:\n            return False\n\n    def check_bracket_sequences(self, bracket_sequences):\n        \"\"\"\n        :type bracket_sequences: List[str]\n        :rtype: bool\n        \"\"\"\n        for bracket_sequence in bracket_sequences:\n            if not self.check_bracket_sequence(bracket_sequence):\n                return False\n        return True"], "rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "train rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "time": [22.069140434265137, 28.008814573287964, 54.266128063201904, 84.97096157073975, 114.57621383666992, 143.7034502029419, 173.31682586669922], "sample times": 7}