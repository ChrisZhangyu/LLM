{"codes": ["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import sys\n\nn, m = map(int, sys.stdin.readline().split())\ngrid = []\nfor i in range(n):\n    grid.append(list(sys.stdin.readline().strip()))\n\ndef check(x, y, n, m):\n    for i in range(x, x + n):\n        for j in range(y, y + m):\n            if grid[i][j] == '*':\n                return False\n    return True\n\ndef find(n, m):\n    for i in range(1, min(n, m) + 1):\n        if check(0, 0, i, i):\n            return i\n\nprint(find(n, m))", "\ndef main():\n    n, m = [int(i) for i in input().split()]\n    arr = []\n    for i in range(n):\n        arr.append(list(input()))\n\n    for i in range(n):\n        for j in range(m):\n            if arr[i][j] == '*':\n                arr[i][j] = 1\n            else:\n                arr[i][j] = 0\n\n    for i in range(m):\n        for j in range(n):\n            if arr[j][i] == '*':\n                arr[j][i] = 1\n            else:\n                arr[j][i] = 0\n\n    for i in range(n):\n        for j in range(m):\n            if arr[i][j] == 1:\n                arr[i][j] = 1\n            else:\n                arr[i][j] = 0\n\n    for i in range(m):\n        for j in range(n):\n            if arr[j][i] == 1:\n                arr[j][i] = 1\n            else:\n                arr[j][i] = 0\n\n    for i in range(n):\n        for j in range(m):\n            if arr[i][j] == 1:\n                arr[i", "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint main()\n{\n    int n, m;\n    cin >> n >> m;\n    string s[n];\n    for (int i = 0; i < n; i++)\n    {\n        cin >> s[i];\n    }\n    for (int i = 0; i < n; i++)\n    {\n        for (int j = 0; j < m; j++)\n        {\n            if (s[i][j] == '*')\n            {\n                if (i == 0 || s[i - 1][j] == '.')\n                {\n                    if (j == 0 || s[i][j - 1] == '.')\n                    {\n                        if (i == n - 1 || s[i + 1][j] == '.')\n                        {\n                            if (j == m - 1 || s[i][j + 1] == '.')\n                            {\n                                cout << min(n, m) << endl;\n                                return 0;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return 0;\n}", "\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\ngrid = []\nfor i in range(n):\n    grid.append(sys.stdin.readline().strip())\n\ndef check(x, y, n, m):\n    for i in range(x, x + n):\n        for j in range(y, y + m):\n            if grid[i][j] == '*':\n                return False\n    return True\n\ndef find(n, m):\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                if check(i, j, n, m):\n                    return n\n                if check(i, j, m, n):\n                    return m\n    return 1\n\nprint(find(n, m))", "\ndef solution(n, m, matrix):\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == '*':\n                matrix[i][j] = 1\n            else:\n                matrix[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 1:\n                matrix[i][j] = 0\n            else:\n                matrix[i][j] = 1\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 1:\n                matrix[i][j] = 0\n            else:\n                matrix[i][j] = 1\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 1:\n                matrix[i][j] = 0\n            else:\n                matrix[i][j] = 1\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 1:\n                matrix[i][j] = 0\n            else:\n                matrix[i][j] = 1\n    for i in range(n):\n        for j in range(m):\n            if", "#!/usr/bin/env python3\n\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\n\nstars = []\n\nfor i in range(n):\n    stars.append(sys.stdin.readline().strip())\n\n\ndef is_star(x, y):\n    return stars[x][y] == '*'\n\n\ndef is_empty(x, y):\n    return stars[x][y] == '.'\n\n\ndef is_border(x, y):\n    return x == 0 or x == n - 1 or y == 0 or y == m - 1\n\n\ndef is_valid(x, y):\n    return x >= 0 and x < n and y >= 0 and y < m\n\n\ndef is_valid_star(x, y):\n    return is_valid(x, y) and is_star(x, y)\n\n\ndef is_valid_empty(x, y):\n    return is_valid(x, y) and is_empty(x, y)\n\n\ndef is_valid_border(x, y):\n    return is_valid(x, y) and is_border(x, y)\n\n\ndef is_valid_border_star(x, y):\n    return is_valid(x, y) and is_border("], "rewards": [0.0, 0.10256410256410256, 0.0, 0.0, 0.1282051282051282, 0.0, 0.0], "train rewards": [0.0, 0.1282051282051282, 0.0, 0.0, 0.28205128205128205, 0.0, 0.0], "time": [17.986212730407715, 37.29362630844116, 57.42323040962219, 75.93078923225403, 95.43811655044556, 115.11393284797668, 134.52138781547546], "sample times": 7}