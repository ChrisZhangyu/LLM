{"codes": ["\nclass Solution(object):\n    def maxNumOfPaintedFences(self, n, q):\n        \"\"\"\n        :type n: int\n        :type q: int\n        :rtype: int\n        \"\"\"\n        painters = []\n        for i in range(q):\n            l, r = map(int, raw_input().strip().split())\n            painters.append((l, r))\n        painters.sort(key=lambda x: x[1])\n        painters.sort(key=lambda x: x[0])\n        painted = [0] * n\n        for l, r in painters:\n            for i in range(l - 1, r):\n                if not painted[i]:\n                    painted[i] = 1\n                    break\n        return sum(painted)\n\n\n\nclass Solution(object):\n    def maxNumOfPaintedFences(self, n, q):\n        \"\"\"\n        :type n: int\n        :type q: int\n        :rtype: int\n        \"\"\"\n        painters = []\n        for i in range(q):\n            l, r = map(int, raw_input().strip().split())\n            painters.append((l, r))\n        painters.sort(key=lambda x: x[1])\n        painters.sort(key=lambda x: x[0])\n        painted = [0] * n\n        for l, r in painters:\n            for i in range(l - 1, r):\n                if not painted[i]:\n                    painted[i] = 1\n                    break\n        return sum(painted)", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "#include<bits/stdc++.h>\nusing namespace std;\nint main()\n{\n    int n,q;\n    cin>>n>>q;\n    int l[q],r[q];\n    for(int i=0;i<q;i++)\n    {\n        cin>>l[i]>>r[i];\n    }\n    sort(l,l+q);\n    sort(r,r+q);\n    int ans=0;\n    for(int i=0;i<q-2;i++)\n    {\n        ans+=r[i+2]-l[i]-1;\n    }\n    cout<<ans;\n    return 0;\n}", "\nimport sys\n\nn, q = map(int, sys.stdin.readline().split())\n\npainters = []\n\nfor i in range(q):\n    painters.append(list(map(int, sys.stdin.readline().split())))\n\npainters.sort(key=lambda x: x[1])\npainters.sort(key=lambda x: x[0])\n\npainted = [0] * (n + 1)\n\nfor i in range(q - 2):\n    painters[i][1] = min(painters[i][1], painters[i + 1][0] - 1)\n\nfor i in range(q - 2):\n    painters[i][0] = max(painters[i][0], painters[i + 1][1] + 1)\n\nfor i in range(q - 2):\n    for j in range(painters[i][0], painters[i][1] + 1):\n        painted[j] = 1\n\nfor i in range(1, n + 1):\n    if painted[i] == 1:\n        painted[i] = 0\n    else:\n        painted[i] = 1\n\nprint(painted.count(1))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import sys\n\nn, q = map(int, sys.stdin.readline().split())\n\npainters = []\nfor i in range(q):\n    l, r = map(int, sys.stdin.readline().split())\n    painters.append((l, r))\n\npainters.sort()\n\npainted = [0] * (n + 1)\nfor l, r in painters:\n    for i in range(l, r + 1):\n        painted[i] = 1\n\ncount = 0\nfor i in range(1, n + 1):\n    if painted[i] == 1:\n        count += 1\n\nprint(count)\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $q$ ($3 \\le n, q \\le 5000$) \u2014 the number of sections and the number of painters availible for hire, respectively.\n\nThen $q$ lines follow, each describing one of the painters: $i$-th line contains two integers $l_i$ and $r_i$ ($1 \\le l_i \\le r_i \\le n$).\n\n\n-----Output-----\n\nPrint one integer \u2014 maximum number of painted sections if you hire $q - 2$ painters.\n\n\n-----Examples-----\nInput\n7 5\n1 4\n4 5\n5 6\n6 7\n3 5\n\nOutput\n7\n\nInput\n4 3\n1 1\n2 2\n3 4\n\nOutput\n2\n\nInput\n4 4\n1 1\n2 2\n2 3\n3 4\n\nOutput\n3", "\n\ndef main():\n    n, q = map(int, input().split())\n    painters = []\n    for i in range(q):\n        l, r = map(int, input().split())\n        painters.append((l, r))\n    painters.sort(key=lambda x: x[1])\n    painters.append((n + 1, n + 1))\n    painters.sort(key=lambda x: x[0])\n    painters.pop(0)\n    painters.pop()\n    painters.append((0, 0))\n    painters.sort(key=lambda x: x[1])\n    painters.pop(0)\n    painters.sort(key=lambda x: x[0])\n    painters.pop()\n    painters.append((0, 0))\n    painters.sort(key=lambda x: x[1])\n    painters.pop(0)\n    painters.sort(key=lambda x: x[0])\n    painters.pop()\n    painters.append((0, 0))\n    painters.sort(key=lambda x: x[1])\n    painters.pop(0)\n    painters.sort(key=lambda x: x[0])\n    painters.pop()\n    painters.append((0, 0))\n    painters.sort(key=lambda x: x[1])\n    painters.pop(0)\n    painters.sort(key=lambda x: x[0])\n    painters.pop()\n    painters.append((0, 0))\n    painters.sort(key=lambda x: x[1])\n    painters.pop(0)\n    painters.sort(key=lambda x: x[0])\n    painters.pop()\n    painters.append((0, 0))\n    painters.sort(key=lambda x: x[1])\n    painters.pop(0)\n    painters.sort(key=lambda x: x[0])\n    painters.pop()\n    painters.append((0, 0))\n    painters.sort(key=lambda x: x[1])\n    painters.pop(0)\n    painters.sort(key=lambda x: x[0])\n    painters.pop()\n    painters.append((0, 0))\n    painters.sort(key=lambda x: x[1])\n    painters.pop(0)\n    painters.sort("], "rewards": [0.0, 0.0, 0.0, 0.2153846153846154, 0.0, 0.0], "train rewards": [0.0, 0.0, 0.0, 0.2248062015503876, 0.0, 0.0], "time": [22.55919051170349, 57.40344214439392, 68.0700855255127, 102.24008345603943, 125.56846404075623, 159.61568665504456], "sample times": 6}