{"codes": ["\nimport sys\n\nn, k = map(int, sys.stdin.readline().split())\nroses = list(map(int, sys.stdin.readline().split()))\ncolors = sys.stdin.readline().strip()\n\nroses.sort(reverse=True)\ncolors = ''.join(sorted(colors, reverse=True))\n\nif n < k:\n    print(-1)\n    sys.exit(0)\n\nif len(set(colors)) == 1:\n    print(-1)\n    sys.exit(0)\n\nif len(set(roses)) == 1:\n    print(roses[0] * k)\n    sys.exit(0)\n\nmax_sum = 0\nfor i in range(n - k + 1):\n    max_sum = max(max_sum, sum(roses[i:i + k]))\n\nprint(max_sum)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\ndef read_input():\n    n, k = map(int, input().split())\n    b = list(map(int, input().split()))\n    c = input()\n    return n, k, b, c\n\n\ndef max_total_beauty(n, k, b, c):\n    if k == 0:\n        return 0\n    if k == n:\n        return sum(b)\n    if k == 1:\n        return b[0]\n    if k == 2:\n        return max(b[0], b[1])\n    if k == 3:\n        return max(b[0] + b[1], b[0] + b[2], b[1] + b[2])\n    if k == 4:\n        return max(b[0] + b[1] + b[2], b[0] + b[1] + b[3], b[0] + b[2] + b[3], b[1] + b[2] + b[3])\n    if k == 5:\n        return max(b[0] + b[1] + b[2] + b[3], b[0] + b[1] + b[2] + b[4], b[0] + b[1] + b[3] + b[4], b[0] + b[2] + b[3] + b[4], b[1] + b[2] + b[3] + b[4])\n    if k == 6:\n        return max(b[0] + b[1]", "import sys\n\nn, k = map(int, sys.stdin.readline().split())\nroses = list(map(int, sys.stdin.readline().split()))\ncolors = sys.stdin.readline().strip()\n\nroses.sort(reverse=True)\ncolors = ''.join(sorted(colors, reverse=True))\n\nif n < k:\n    print(-1)\n    sys.exit(0)\n\nif len(set(colors)) == 1:\n    print(-1)\n    sys.exit(0)\n\nres = 0\nfor i in range(k):\n    res += roses[i]\n    if colors[i] == 'W':\n        break\n\nprint(res)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "#include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;\n\nint main()\n{\n    int n, k;\n    cin >> n >> k;\n    int b[n];\n    string c;\n    for (int i = 0; i < n; i++)\n    {\n        cin >> b[i];\n    }\n    cin >> c;\n    sort(b, b + n);\n    sort(c.begin(), c.end());\n    int ans = 0;\n    for (int i = 0; i < n; i++)\n    {\n        if (c[i] == 'R')\n        {\n            ans += b[i];\n            k--;\n            if (k == 0)\n            {\n                break;\n            }\n        }\n    }\n    if (k > 0)\n    {\n        for (int i = 0; i < n; i++)\n        {\n            if (c[i] == 'O')\n            {\n                ans += b[i];\n                k--;\n                if (k == 0)\n                {\n                    break;\n                }\n            }\n        }\n    }\n    if (k > 0)\n    {\n        for (int i = 0; i < n; i++)\n        {\n            if (c[i] == 'W')\n            {\n                ans += b[i];\n                k--;\n                if (k == 0)\n                {\n                    break;\n                }\n            }\n        }\n    ", "\ndef max_beauty(n, k, b, c):\n    \"\"\"\n    :type n: int\n    :type k: int\n    :type b: list[int]\n    :type c: list[str]\n    :rtype: int\n    \"\"\"\n    if k == 0:\n        return 0\n    if k == n:\n        return sum(b)\n    if k == 1:\n        return b[0]\n    if k == n - 1:\n        return max(b)\n    if k == n - 2:\n        return max(b[0], b[1])\n    if k == n - 3:\n        return max(b[0], b[1], b[2])\n    if k == n - 4:\n        return max(b[0], b[1], b[2], b[3])\n    if k == n - 5:\n        return max(b[0], b[1], b[2], b[3], b[4])\n    if k == n - 6:\n        return max(b[0], b[1], b[2], b[3], b[4], b[5])\n    if k == n - 7:\n        return max(b[0], b[1], b[2], b[3], b[4], b[5], b[6])\n    if k == n - 8:\n        return max(b[0], b[1], b[2], b[3], b[4], b[5], b[6], b[7])\n    if k ==", "\n\ndef read_input():\n    n, k = map(int, input().split())\n    b = list(map(int, input().split()))\n    c = input()\n    return n, k, b, c\n\n\ndef read_output(n, k, b, c):\n    if n < k:\n        return -1\n    if k == 1:\n        return b[k - 1]\n    if k == n:\n        return sum(b)\n    if k == n - 1:\n        return max(b[k - 1], b[k])\n    if k == n - 2:\n        return max(b[k - 1], b[k], b[k + 1])\n    if k == n - 3:\n        return max(b[k - 1], b[k], b[k + 1], b[k + 2])\n    if k == n - 4:\n        return max(b[k - 1], b[k], b[k + 1], b[k + 2], b[k + 3])\n    if k == n - 5:\n        return max(b[k - 1], b[k], b[k + 1], b[k + 2], b[k + 3], b[k + 4])\n    if k == n - 6:\n        return max(b[k - 1], b[k], b[k + 1], b[k + 2], b[k + 3], b[k + 4], b[k + 5])"], "rewards": [0.8, 0.0, 0.0, 0.4, 0.0, 0.0, 0.0], "train rewards": [0.5833333333333334, 0.0, 0.0, 0.375, 0.0, 0.0, 0.0], "time": [22.335740089416504, 43.32994842529297, 64.33988857269287, 85.57174253463745, 106.808176279068, 127.68256425857544, 148.47017312049866], "sample times": 7}