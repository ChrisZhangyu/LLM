{"codes": ["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import sys\n\nn, k = map(int, sys.stdin.readline().split())\np = list(map(int, sys.stdin.readline().split()))\nc = list(map(int, sys.stdin.readline().split()))\n\ndp = [0] * n\ndp[p[0] - 1] = c[p[0] - 1]\n\nfor i in range(1, n):\n    dp[i] = max(dp[p[i] - 1] + c[p[i] - 1], dp[i - 1])\n\nprint(dp[n - 1])", "class Solution(object):\n    def maxScore(self, n, k, p, c):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :type p: List[int]\n        :type c: List[int]\n        :rtype: int\n        \"\"\"\n        p = [0] + p\n        c = [0] + c\n        dp = [[0] * n for _ in range(k + 1)]\n        for i in range(1, k + 1):\n            for j in range(1, n + 1):\n                dp[i][p[j]] = max(dp[i][p[j]], dp[i - 1][j] + c[j])\n        return dp[k][1]\n\n\nclass Solution(object):\n    def maxScore(self, n, k, p, c):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :type p: List[int]\n        :type c: List[int]\n        :rtype: int\n        \"\"\"\n        p = [0] + p\n        c = [0] + c\n        dp = [0] * n\n        for i in range(1, k + 1):\n            for j in range(", "\n\"\"\"", "\ndef main():\n    n, k = map(int, input().split())\n    p = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n\n    dp = [[0 for _ in range(k + 1)] for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        dp[i][1] = c[p[i - 1] - 1]\n\n    for i in range(2, k + 1):\n        for j in range(1, n + 1):\n            dp[j][i] = max(dp[p[j - 1] - 1][i - 1] + c[p[j - 1] - 1], dp[j][i - 1])\n\n    print(dp[n][k])\n\n\nif __name__ == \"__main__\":\n    main()", "class Solution:\n    def maximumScore(self, n, k, p, c):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :type p: List[int]\n        :type c: List[int]\n        :rtype: int\n        \"\"\"\n        p = [0] + p\n        c = [0] + c\n        dp = [[0] * n for _ in range(k + 1)]\n        for i in range(1, k + 1):\n            for j in range(1, n + 1):\n                dp[i][p[j]] = max(dp[i][p[j]], dp[i - 1][j] + c[j])\n        return max(dp[k])\n\n\nclass Solution:\n    def maximumScore(self, n, k, p, c):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :type p: List[int]\n        :type c: List[int]\n        :rtype: int\n        \"\"\"\n        p = [0] + p\n        c = [0] + c\n        dp = [[0] * n for _ in range(k + 1)]\n        for i in range(1, k + 1):\n            ", "\n\"\"\"\n\n\ndef main():\n    n, k = map(int, input().split())\n    p = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        dp[i][1] = c[p[i - 1] - 1]\n    for i in range(2, k + 1):\n        for j in range(1, n + 1):\n            dp[j][i] = max(dp[p[j - 1] - 1][i - 1] + c[j - 1], dp[j][i - 1])\n    print(dp[n][k])\n\n\nif __name__ == \"__main__\":\n    main()", "import math\n\nn, k = [int(x) for x in input().split()]\np = [int(x) for x in input().split()]\nc = [int(x) for x in input().split()]\n\ndp = [0] * n\ndp[p[0] - 1] = c[p[0] - 1]\n\nfor i in range(1, n):\n    dp[i] = max(dp[p[i] - 1] + c[p[i] - 1], dp[i - 1])\n\nprint(dp[n - 1])"], "rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "train rewards": [0.0, 0.047619047619047616, 0.0, 0.0, 0.0, 0.0, 0.0, 0.047619047619047616], "time": [17.768763065338135, 34.95708894729614, 52.46483588218689, 65.48995971679688, 83.05703234672546, 100.69513177871704, 113.72510480880737, 131.36030077934265], "sample times": 8}