{"codes": ["\nclass Solution(object):\n    def colorTheLightsabers(self, n, m, lightsabers):\n        \"\"\"\n        :type n: int\n        :type m: int\n        :type lightsabers: List[int]\n        :rtype: bool\n        \"\"\"\n        counts = [0] * m\n        for lightsaber in lightsabers:\n            counts[lightsaber - 1] += 1\n\n        if sum(counts) != n:\n            return False\n\n        for i in range(m):\n            if counts[i] == 0:\n                continue\n            for j in range(i + 1, m):\n                if counts[j] == 0:\n                    continue\n                if (counts[i] - counts[j]) % 2 == 0:\n                    counts[i] -= counts[j]\n                    counts[j] = 0\n                else:\n                    counts[j] -= counts[i]\n                    counts[i] = 0\n\n        for i in range(m):\n            if counts[i] != 0:\n                return False\n\n        return True", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\ndef main():\n    n, m = map(int, input().split())\n    colors = list(map(int, input().split()))\n    counts = list(map(int, input().split()))\n\n    colors.sort()\n    counts.sort()\n\n    for i in range(m):\n        if colors[i] != counts[i]:\n            print(\"NO\")\n            return\n\n    print(\"YES\")\n\n\nif __name__ == \"__main__\":\n    main()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "def main():\n    n, m = map(int, input().split())\n    colors = list(map(int, input().split()))\n    counts = list(map(int, input().split()))\n\n    colors.sort()\n    counts.sort()\n\n    for i in range(m):\n        if colors[i] != counts[i]:\n            print(\"NO\")\n            return\n\n    print(\"YES\")\n\n\nif __name__ == '__main__':\n    main()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "class Solution(object):\n    def colorTheLightsabers(self, n, m, colors, counts):\n        \"\"\"\n        :type n: int\n        :type m: int\n        :type colors: List[int]\n        :type counts: List[int]\n        :rtype: bool\n        \"\"\"\n        colors = sorted(colors)\n        counts = sorted(counts)\n        for i in range(len(counts)):\n            if counts[i] == 0:\n                continue\n            for j in range(i + 1, len(counts)):\n                if counts[j] == 0:\n                    continue\n                for k in range(j + 1, len(counts)):\n                    if counts[k] == 0:\n                        continue\n                    for l in range(k + 1, len(counts)):\n                        if counts[l] == 0:\n                            continue\n                        if colors[i] == colors[j] and colors[j] == colors[k] and colors[k] == colors[l]:\n                            return True\n                        elif colors[i] == colors[j] and colors[j] == colors[k]:\n                            return True\n                        elif colors[i] == colors[j]:\n                            return True\n                        elif colors[j] == colors[k]:\n                            return True\n                        elif colors[k] == colors[l]:\n                            return True\n                        elif colors[i] == colors[k]:\n                            return True\n                        elif colors[i] == colors[l]:\n                            return True\n                        elif colors[j] == colors[l]:\n                            return True\n        return False", "\n\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    for i in range(m):\n        if b[i] > n:\n            print(\"NO\")\n            return\n    for i in range(n):\n        if a[i] > m:\n            print(\"NO\")\n            return\n    for i in range(m):\n        for j in range(n):\n            if a[j] == i + 1 and b[i] > 0:\n                b[i] -= 1\n    for i in range(m):\n        if b[i] > 0:\n            print(\"NO\")\n            return\n    print(\"YES\")\n\n\nif __name__ == \"__main__\":\n    main()\n\n\"\"\"\n\n\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    for i in range(m):\n        if b[i] > n:\n            print(\"NO\")\n            return\n    for i in range(n):\n        if a[i] > m:\n            print(\"NO\")\n            return\n    for i in range(m):\n        for j in range(n):\n            if a[j] == i + 1 and b[i] > 0:\n                b[i] -= 1\n    for i in range(m):\n        if b[i] > 0:\n            print(\"NO\")\n            return\n    print(\"YES\")\n\n\nif __name__ == \"__main__\":\n    main()", "def lightsabers(n, m, colors, counts):\n    \"\"\"\n    :param n: number of lightsabers\n    :param m: number of colors\n    :param colors: list of lightsaber colors\n    :param counts: list of lightsaber counts for each color\n    :return: YES or NO\n    \"\"\"\n    colors.sort()\n    counts.sort()\n    for i in range(len(counts)):\n        if counts[i] > n:\n            return \"NO\"\n    for i in range(len(colors) - 1):\n        if colors[i] == colors[i + 1]:\n            return \"NO\"\n    for i in range(len(counts) - 1):\n        if counts[i] == counts[i + 1]:\n            return \"NO\"\n    for i in range(len(counts) - 1):\n        if counts[i] > counts[i + 1]:\n            return \"NO\"\n    for i in range(len(colors) - 1):\n        if colors[i] > colors[i + 1]:\n            return \"NO\"\n    for i in range(len(counts) - 1):\n        if counts[i] < counts[i + 1]:\n            return \"NO\"\n    for i in range(len(colors) - 1):\n        if colors[i] < colors[i + 1]:\n            return \"NO\"\n    for i in range(len(counts) - 1):\n        if counts[i] != counts[i + 1]:\n            return \"NO\"\n    for i in range(len(colors) - 1):\n        if colors[i] != colors[i + 1]:\n            return \"NO\"\n    for i in range(len(counts) - 1):\n        if counts[i] == counts[i + 1]:\n            return \"NO\"\n    for i in range(len(colors) - 1):\n        if colors[i] == colors[i + 1]:\n            return \"NO\"\n    for i in range(len(counts) - 1):\n        if counts[i] > counts[i + 1]:\n            return \"NO\"\n    for i in range(len(colors) - 1):\n        if colors[i] > colors[i + 1]:\n            return \"NO\"\n    for i in range(len(counts) - 1):\n        if counts[i] < counts[i + 1]:\n            return \"NO\"\n    for i in range(len(colors) - 1):\n", "\ndef lightsabers(n, m, colors, counts):\n    \"\"\"\n    :type n: int\n    :type m: int\n    :type colors: List[int]\n    :type counts: List[int]\n    :rtype: bool\n    \"\"\"\n    colors = sorted(colors)\n    counts = sorted(counts)\n    for i in range(len(colors)):\n        if counts[i] > n - sum(counts[:i]):\n            return False\n    return True", "\n\nclass Solution(object):\n    def colorTheLightsabers(self, n, m, colors, counts):\n        \"\"\"\n        :type n: int\n        :type m: int\n        :type colors: List[int]\n        :type counts: List[int]\n        :rtype: bool\n        \"\"\"\n        colors = sorted(colors)\n        counts = sorted(counts)\n        for i in range(n):\n            if colors[i] != colors[i-1] and counts[colors[i-1]-1] > 0:\n                counts[colors[i-1]-1] -= 1\n            if colors[i] != colors[i-1] and counts[colors[i]-1] > 0:\n                counts[colors[i]-1] -= 1\n            if colors[i] == colors[i-1] and counts[colors[i]-1] > 0:\n                counts[colors[i]-1] -= 1\n            if colors[i] == colors[i-1] and counts[colors[i]-1] > 0:\n                counts[colors[i]-1] -= 1\n            if colors[i] == colors[i-1] and counts[colors[i]-1] > 0:\n                counts[colors[i]-1] -= 1\n            if colors[i] == colors[i-1] and counts[colors[i]-1] > 0:\n                counts[colors[i]-1] -= 1\n            if colors[i] == colors[i-1] and counts[colors[i]-1] > 0:\n                counts[colors[i]-1] -= 1\n            if colors[i] == colors[i-1] and counts[colors[i]-1] > 0:\n                counts[colors[i]-1] -= 1\n            if colors[i] == colors[i-1] and counts[colors[i]-1] > 0:\n                counts[colors[i]-1] -= 1\n            if colors[i] == colors[i-1] and counts[colors[i]-1] > 0:\n                counts[colors[i]-1] -= 1\n            if colors[i] == colors[i-1] and counts[colors[i]-1] > 0:\n                counts[colors[i]-1] -= 1\n            if colors[i] == colors[i-"], "rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "train rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "time": [17.201948881149292, 50.342215061187744, 83.62681603431702, 117.00400614738464, 141.58513259887695, 164.68669295310974, 197.84233951568604, 213.33800768852234, 246.31554198265076], "sample times": 9}