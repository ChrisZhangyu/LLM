{"codes": ["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        int m = in.nextInt();\n        char[][] arr = new char[n][m];\n        for (int i = 0; i < n; i++) {\n            String s = in.next();\n            for (int j = 0; j < m; j++) {\n                arr[i][j] = s.charAt(j);\n            }\n        }\n        boolean[][] visited = new boolean[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (arr[i][j] == 'X' && !visited[i][j]) {\n                    visited[i][j] = true;\n                    dfs(arr, visited, i, j);\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (arr[i][j] == 'X' && !visited[i][j]) {\n                    System.out.println(\"NO\");\n                    return;\n                }\n            }\n        }\n        System.out.println(\"YES\");\n    }\n\n    private static void dfs(char[][] arr, boolean[][] visited, int i, int j) {\n        if (i < 0 || i >= arr.length || j < 0 || j >= arr[0].length) {\n            return;\n        ", "def check(a,b):\n    for i in range(len(a)):\n        for j in range(len(a[0])):\n            if a[i][j]=='X' and b[i][j]=='X':\n                return False\n    return True\n\nn,m=map(int,input().split())\na=[]\nb=[]\nfor i in range(n):\n    a.append(input())\nfor i in range(n):\n    b.append(input())\nif check(a,b):\n    print('YES')\nelse:\n    print('NO')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\ndef check(a,b):\n    for i in range(len(a)):\n        for j in range(len(a[0])):\n            if a[i][j]=='X' and b[i][j]=='X':\n                return False\n    return True\n\nn,m=map(int,input().split())\na=[]\nb=[]\nfor i in range(n):\n    a.append(input())\nfor i in range(n):\n    b.append(input())\nif check(a,b):\n    print('YES')\nelse:\n    print('NO')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import sys\n\nn, m = map(int, sys.stdin.readline().split())\npuzzle = []\nfor i in range(n):\n    puzzle.append(list(sys.stdin.readline().strip()))\n\n\ndef check_puzzle(puzzle):\n    for i in range(n):\n        for j in range(m):\n            if puzzle[i][j] == 'X' and puzzle[i][j+1] == 'X' and puzzle[i][j+2] == 'X' and puzzle[i+1][j] == 'X' and puzzle[i+1][j+1] == 'X' and puzzle[i+1][j+2] == 'X' and puzzle[i+2][j] == 'X' and puzzle[i+2][j+1] == 'X' and puzzle[i+2][j+2] == 'X':\n                return True\n    return False\n\n\ndef check_puzzle2(puzzle):\n    for i in range(n):\n        for j in range(m):\n            if puzzle[i][j] == 'X' and puzzle[i][j+1] == 'X' and puzzle[i][j+2] == 'X' and puzzle[i][j+3] == 'X' and puzzle[i+1][j] == 'X' and puzzle[i+1][j+1] == 'X' and puzzle[i+1][j+2] == 'X' and puzzle[i+1][j+3] == 'X' and puzzle[i+2][j] == 'X' and puzzle[i+2][j+1] == 'X' and puzzle[i+2][j+2] == 'X' and puzzle[i+2][j", "\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\npuzzle = []\nfor i in range(n):\n    puzzle.append(list(sys.stdin.readline().strip()))\n\ndef check(puzzle):\n    for i in range(n):\n        for j in range(m):\n            if puzzle[i][j] == 'X':\n                return False\n    return True\n\ndef dfs(puzzle, i, j):\n    if i < 0 or i >= n or j < 0 or j >= m:\n        return False\n    if puzzle[i][j] == '.':\n        puzzle[i][j] = 'X'\n        if dfs(puzzle, i + 1, j) or dfs(puzzle, i - 1, j) or dfs(puzzle, i, j + 1) or dfs(puzzle, i, j - 1):\n            return True\n        else:\n            puzzle[i][j] = '.'\n            return False\n    else:\n        return False\n\nfor i in range(n):\n    for j in range(m):\n        if puzzle[i][j] == 'X':\n            puzzle[i][j] = '.'\n            if dfs(puzzle, i, j):\n                if check(puzzle):\n                    print('YES')\n                    sys.exit(0)\n            puzzle[i][j] = 'X'\n\nprint('NO')", "\ndef isRectangle(n,m,puzzle):\n    for i in range(n):\n        for j in range(m):\n            if puzzle[i][j]=='X':\n                if puzzle[i][j+1]=='X':\n                    if puzzle[i+1][j]=='X':\n                        if puzzle[i+1][j+1]=='X':\n                            return True\n                        else:\n                            return False\n                    else:\n                        return False\n                else:\n                    return False\n            else:\n                continue\n    return False\n\nif __name__=='__main__':\n    n,m=map(int,input().split())\n    puzzle=[]\n    for i in range(n):\n        puzzle.append(input())\n    if isRectangle(n,m,puzzle):\n        print('YES')\n    else:\n        print('NO')\n\n\"\"\"\n\n\ndef isRectangle(n, m, puzzle):\n    for i in range(n):\n        for j in range(m):\n            if puzzle[i][j] == \"X\":\n                if puzzle[i][j + 1] == \"X\":\n                    if puzzle[i + 1][j] == \"X\":\n                        if puzzle[i + 1][j + 1] == \"X\":\n                            return True\n                        else:\n                            return False\n                    else:\n                        return False\n                else:\n                    return False\n            else:\n                continue\n    return False\n\n\nif __name__ == \"__main__\":\n    n, m = map(int, input().split())\n    puzzle = []\n    for i in range(n):\n        pu", "\n\ndef main():\n    n, m = [int(x) for x in input().split()]\n    grid = []\n    for i in range(n):\n        grid.append(input())\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'X':\n                grid[i][j] = 1\n            else:\n                grid[i][j] = 0\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                grid[i][j] = 0\n            else:\n                grid[i][j] = 1\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                grid[i][j] = 0\n            else:\n                grid[i][j] = 1\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                grid[i][j] = 0\n            else:\n                grid[i][j] = 1\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                grid[i][j] = 0\n            else:\n                grid[i][j] = 1\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                grid[i][j] = 0\n            else:\n                grid[i][j] = 1\n\n    for i in range(n):\n        for j in"], "rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.9629629629629629, 0.0, 0.0], "train rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.7037037037037037, 0.0, 0.0], "time": [22.434458255767822, 45.4663622379303, 68.65456175804138, 91.53717517852783, 114.51094198226929, 137.61976766586304, 161.13072037696838, 184.32248854637146], "sample times": 8}