{"codes": ["\nimport sys\n\nn = int(sys.stdin.readline().strip())\n\nedges = []\n\nfor i in range(n-1):\n    edges.append([int(x) for x in sys.stdin.readline().strip().split()])\n\ndef is_valid(x, y):\n    for i in range(n-1):\n        if (x[edges[i][0]-1] - x[edges[i][1]-1]) * (y[edges[i][0]-1] - y[edges[i][1]-1]) != (x[edges[i][1]-1] - x[edges[i][0]-1]) * (y[edges[i][1]-1] - y[edges[i][0]-1]):\n            return False\n    return True\n\ndef dfs(x, y, i):\n    if i == n:\n        if is_valid(x, y):\n            print(\"YES\")\n            for j in range(n):\n                print(x[j], y[j])\n            sys.exit(0)\n        else:\n            return\n    x[i] = 0\n    y[i] = 0\n    dfs(x, y, i+1)\n    x[i] = 0\n    y[i] = 1\n    dfs(x, y, i+1)\n    x[i] = 1\n    y[i] = 0\n    dfs(x, y, i+1)\n    x[i] = -1\n    y[i] = 1\n    dfs(x, y, i+1)\n    x[i] = ", "import sys\nimport math\n\nn = int(sys.stdin.readline().strip())\nedges = []\nfor i in range(n-1):\n    edges.append([int(x) for x in sys.stdin.readline().strip().split()])\n\ndef check(x, y):\n    for i in range(n-1):\n        if (x[edges[i][0]-1]-x[edges[i][1]-1])*(x[edges[i+1][0]-1]-x[edges[i+1][1]-1]) + (y[edges[i][0]-1]-y[edges[i][1]-1])*(y[edges[i+1][0]-1]-y[edges[i+1][1]-1]) < 0:\n            return False\n    return True\n\nx = [0 for i in range(n)]\ny = [0 for i in range(n)]\n\nfor i in range(n):\n    x[i] = int(math.sqrt(i+1))\n    y[i] = int(math.sqrt(i+1))\n\nif check(x, y):\n    for i in range(n):\n        print(x[i], y[i])\nelse:\n    print(\"NO\")", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```", "#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn=35;\nint n;\nint u[maxn],v[maxn];\nlong long x[maxn],y[maxn];\nint main()\n{\n\tcin>>n;\n\tfor(int i=1;i<n;i++)\n\t{\n\t\tcin>>u[i]>>v[i];\n\t}\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tfor(int j=1;j<=n;j++)\n\t\t{\n\t\t\tx[i]=0;\n\t\t\ty[i]=0;\n\t\t}\n\t}\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tfor(int j=1;j<=n;j++)\n\t\t{\n\t\t\tx[i]=0;\n\t\t\ty[i]=0;\n\t\t}\n\t}\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tfor(int j=1;j<=n;j++)\n\t\t{\n\t\t\tx[i]=0;\n\t\t\ty[i]=0;\n\t\t}\n\t}\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tfor(int j=1;j<=n;j++)\n\t\t{\n\t\t\tx[i]=0;\n\t\t\ty[i]=0;\n\t\t}\n\t}\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tfor(int j=1;j<=n;j++)\n\t\t{", "import math\n\nn = int(input())\nedges = []\nfor i in range(n - 1):\n    edges.append(list(map(int, input().split())))\n\n\ndef check(x, y):\n    for i in range(n - 1):\n        if x[edges[i][0] - 1] - x[edges[i][1] - 1] == 0 and y[edges[i][0] - 1] - y[edges[i][1] - 1] == 0:\n            return False\n        if x[edges[i][0] - 1] - x[edges[i][1] - 1] == y[edges[i][0] - 1] - y[edges[i][1] - 1]:\n            return False\n    return True\n\n\nx = [0] * n\ny = [0] * n\nfor i in range(n):\n    x[i] = int(input())\n    y[i] = int(input())\n\nif check(x, y):\n    print(\"YES\")\n    for i in range(n):\n        print(x[i], y[i])\nelse:\n    print(\"NO\")", "\ndef check(x, y):\n    for i in range(1, n):\n        if (x[i] - x[i - 1]) * (y[i] - y[i - 1]) != (x[i - 1] - x[i - 2]) * (y[i - 1] - y[i - 2]):\n            return False\n    return True\n\n\nn = int(input())\nx = [0] * (n + 1)\ny = [0] * (n + 1)\nfor i in range(1, n + 1):\n    x[i], y[i] = map(int, input().split())\nif not check(x, y):\n    print(\"NO\")\nelse:\n    print(\"YES\")\n    for i in range(1, n + 1):\n        print(x[i], y[i])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import sys\n\nn = int(sys.stdin.readline().strip())\nedges = []\nfor i in range(n - 1):\n    edges.append(list(map(int, sys.stdin.readline().strip().split())))\n\ndef dfs(node, parent, visited):\n    visited[node] = True\n    for i in range(len(edges)):\n        if edges[i][0] == node and edges[i][1] != parent:\n            dfs(edges[i][1], node, visited)\n    return visited\n\nvisited = [False] * n\nvisited = dfs(1, -1, visited)\nif False in visited:\n    print(\"NO\")\nelse:\n    print(\"YES\")\n    for i in range(n):\n        if edges[i][0] == 1:\n            print(0, 0)\n        elif edges[i][0] == 2:\n            print(1, 0)\n        elif edges[i][0] == 3:\n            print(0, 1)\n        elif edges[i][0] == 4:\n            print(2, 0)\n        elif edges[i][0] == 5:\n            print(1, -1)\n        elif edges[i][0] == 6:\n            print(-1, 1)\n        elif edges[i][0] == 7:\n            print(0, 2)"], "rewards": [0.0, 0.4230769230769231, 0.0, 0.0, 0.0, 0.0, 0.4230769230769231], "train rewards": [0.0, 0.16, 0.0, 0.0, 0.0, 0.0, 0.16], "time": [24.740761041641235, 47.77836322784424, 52.156474590301514, 75.28688049316406, 94.30353093147278, 117.49123930931091, 140.39047408103943], "sample times": 7}