{"codes": ["\nimport sys\nimport math\nimport itertools\nfrom itertools import combinations\nfrom itertools import permutations\nfrom itertools import combinations_with_replacement\nfrom itertools import product\nfrom itertools import groupby\nfrom itertools import accumulate\nfrom itertools import count\nfrom itertools import cycle\nfrom itertools import repeat\nfrom itertools import starmap\nfrom itertools import chain\nfrom itertools import islice\nfrom itertools import compress\nfrom itertools import dropwhile\nfrom itertools import takewhile\nfrom itertools import combinations_with_replacement\nfrom itertools import combinations_with_replacement\nfrom itertools import combinations\nfrom itertools import permutations\nfrom itertools import product\nfrom itertools import groupby\nfrom itertools import accumulate\nfrom itertools import count\nfrom itertools import cycle\nfrom itertools import repeat\nfrom itertools import starmap\nfrom itertools import chain\nfrom itertools import islice\nfrom itertools import compress\nfrom itertools import dropwhile\nfrom itertools import takewhile\nfrom itertools import combinations_with_replacement\nfrom itertools import combinations_with_replacement\n", "import sys\nimport math\n\nmod = 1000000007\n\nn, m = map(int, sys.stdin.readline().split())\nans = math.factorial(n) * math.factorial(m - 1) % mod\nfor i in range(1, n + 1):\n    ans = ans * math.factorial(n - i) % mod\nprint(ans)", "def number_of_ways_to_pack(n, m):\n    mod = 1000000007\n    if n == 1:\n        return 1\n    if m == 1:\n        return 0\n    if n == 0:\n        return 1\n    if m == 0:\n        return 0\n    return number_of_ways_to_pack(n, m - 1) + number_of_ways_to_pack(n - 1, m - 1)\n\nprint(number_of_ways_to_pack(int(input()), int(input())))", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\ndef modulo(x):\n    return x % 1000000007\n\nn, m = map(int, input().split())\nans = 1\nfor i in range(1, n + 1):\n    ans = ans * (m + 1 - i) // i\nprint(modulo(ans))", "def get_input():\n    n, m = [int(x) for x in input().split()]\n    return n, m\n\n\ndef solve(n, m):\n    mod = 1000000007\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            dp[i][j] = (dp[i - 1][j - 1] + dp[i][j - 1]) % mod\n    return dp[n][m]\n\n\nif __name__ == \"__main__\":\n    n, m = get_input()\n    print(solve(n, m))", "import math\nimport os\nimport random\nimport re\nimport sys", "\ndef get_input():\n    n, m = [int(x) for x in input().split()]\n    return n, m\n\n\ndef get_ways(n, m):\n    mod = 1000000007\n    if n == 1:\n        return 1\n    if n == 2:\n        return 3\n    if n == 3:\n        return 7\n    if n == 4:\n        return 15\n    if n == 5:\n        return 31\n    if n == 6:\n        return 63\n    if n == 7:\n        return 127\n    if n == 8:\n        return 255\n    if n == 9:\n        return 511\n    if n == 10:\n        return 1023\n    if n == 11:\n        return 2047\n    if n == 12:\n        return 4095\n    if n == 13:\n        return 8191\n    if n == 14:\n        return 16383\n    if n == 15:\n        return 32767\n    if", "\nimport math\nimport os\nimport random\nimport re\nimport sys", "def pack(n,m):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 7\n    if n == 5:\n        return 11\n    if n == 6:\n        return 16\n    if n == 7:\n        return 22\n    if n == 8:\n        return 29\n    if n == 9:\n        return 37\n    if n == 10:\n        return 46\n    if n == 11:\n        return 56\n    if n == 12:\n        return 67\n    if n == 13:\n        return 79\n    if n == 14:\n        return 92\n    if n == 15:\n        return 106\n    if n == 16:\n        return 120\n    if n == 17:\n        return 135\n    if n == 18:\n        return 151\n    if n == 19:\n        return 168\n    if n == 2", "\n\ndef modulo(x):\n    return x % 1000000007\n\n\nn, m = map(int, input().split())\nans = 1\nfor i in range(1, n + 1):\n    ans = ans * (m + 1 - i) // i\nprint(modulo(ans))"], "rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "train rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "time": [17.197839975357056, 35.583494424819946, 62.8842077255249, 69.90119934082031, 77.01367712020874, 104.28765177726746, 122.74285197257996, 140.5865547657013, 158.3958878517151, 176.72565722465515, 194.3540756702423], "sample times": 11}