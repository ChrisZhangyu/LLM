{"codes": ["\nimport sys\n\nn, k = map(int, sys.stdin.readline().split())\nmain_courses = list(map(int, sys.stdin.readline().split()))\n\ngraph = [[] for i in range(n)]\n\nfor i in range(n):\n    line = list(map(int, sys.stdin.readline().split()))\n    for j in range(len(line)):\n        graph[line[j] - 1].append(i)\n\nvisited = [0 for i in range(n)]\n\n\ndef dfs(i):\n    visited[i] = 1\n    for j in graph[i]:\n        if visited[j] == 0:\n            dfs(j)\n\n\ncount = 0\n\nfor i in range(n):\n    if visited[i] == 0:\n        dfs(i)\n        count += 1\n\nif count < k:\n    print(-1)\nelse:\n    print(count)\n    for i in range(k):\n        print(main_courses[i])", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import sys\n\nn, k = map(int, sys.stdin.readline().split())\nmain_courses = list(map(int, sys.stdin.readline().split()))\n\ngraph = [[] for i in range(n)]\n\nfor i in range(n):\n    line = list(map(int, sys.stdin.readline().split()))\n    for j in range(len(line)):\n        graph[line[j] - 1].append(i)\n\nvisited = [False] * n\n\n\ndef dfs(i):\n    visited[i] = True\n    for j in graph[i]:\n        if not visited[j]:\n            dfs(j)\n\n\ncount = 0\nfor i in range(n):\n    if not visited[i]:\n        dfs(i)\n        count += 1\n\nif count < k:\n    print(-1)\nelse:\n    print(count)\n    for i in range(k):\n        print(main_courses[i])", "#include<bits/stdc++.h>\nusing namespace std;\nint main()\n{\n\tint n,k;\n\tcin>>n>>k;\n\tvector<int>a;\n\tfor(int i=1;i<=k;i++)\n\t{\n\t\tint x;\n\t\tcin>>x;\n\t\ta.push_back(x);\n\t}\n\tvector<vector<int> >b;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tint x;\n\t\tcin>>x;\n\t\tvector<int>c;\n\t\tfor(int j=1;j<=x;j++)\n\t\t{\n\t\t\tint y;\n\t\t\tcin>>y;\n\t\t\tc.push_back(y);\n\t\t}\n\t\tb.push_back(c);\n\t}\n\tvector<int>d;\n\tfor(int i=0;i<b.size();i++)\n\t{\n\t\tfor(int j=0;j<b[i].size();j++)\n\t\t{\n\t\t\td.push_back(b[i][j]);\n\t\t}\n\t}\n\tsort(d", "\ndef dfs(i):\n    visited[i] = 1\n    for j in graph[i]:\n        if visited[j] == 0:\n            dfs(j)\n    stack.append(i)\n\ndef topological_sort():\n    for i in range(1, n + 1):\n        if visited[i] == 0:\n            dfs(i)\n\nn, k = map(int, input().split())\ngraph = [[] for _ in range(n + 1)]\nvisited = [0] * (n + 1)\nstack = []\n\nfor i in range(1, n + 1):\n    x = int(input())\n    for j in range(x):\n        y = int(input())\n        graph[y].append(i)\n\ntopological_sort()\n\nif len(stack) < k:\n    print(-1)\nelse:\n    print(len(stack))\n    for i in range(k):\n        print(stack[i], end=' ')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    main_courses = list(map(int, sys.stdin.readline().split()))\n    courses = [[] for _ in range(n)]\n    for i in range(n):\n        courses[i] = list(map(int, sys.stdin.readline().split()))\n\n    visited = [0] * n\n    for i in main_courses:\n        visited[i - 1] = 1\n\n    count = 0\n    for i in range(n):\n        if visited[i] == 1:\n            count += 1\n            for j in courses[i]:\n                if visited[j - 1] == 0:\n                    visited[j - 1] = 1\n\n    if count < k:\n        print(-1)\n    else:\n        print(count)\n        for i in range(n):\n            if visited[i] == 1:\n                print(i + 1)\n\n\nif __name__ == '__main__':\n    main()"], "rewards": [0.3516483516483517, 0.0, 0.3516483516483517, 0.0, 0.0, 0.0], "train rewards": [0.14285714285714285, 0.0, 0.14285714285714285, 0.0, 0.01098901098901099, 0.0], "time": [16.353924036026, 33.92731523513794, 50.05502390861511, 68.32416868209839, 85.56642413139343, 102.60916948318481], "sample times": 6}