{"codes": ["import sys\n\nn, k = map(int, sys.stdin.readline().split())\nr, s, p = map(int, sys.stdin.readline().split())\nt = sys.stdin.readline().strip()\n\ndp = [0] * (n + 1)\n\nfor i in range(1, n + 1):\n    if t[i - 1] == 'r':\n        dp[i] = dp[i - 1] + r\n    elif t[i - 1] == 's':\n        dp[i] = dp[i - 1] + s\n    elif t[i - 1] == 'p':\n        dp[i] = dp[i - 1] + p\n\nfor i in range(k + 1, n + 1):\n    if t[i - 1] == 'r':\n        dp[i] = max(dp[i], dp[i - k - 1] - r)\n    elif t[i - 1] == 's':\n        dp[i] = max(dp[i], dp[i - k - 1] - s)\n    elif t[i - 1] == 'p':\n        dp[i] = max(dp[i], dp[i - k - 1] - p)\n\nprint(dp[n])", "\nimport sys\n\nn, k = map(int, sys.stdin.readline().split())\nr, s, p = map(int, sys.stdin.readline().split())\nt = sys.stdin.readline().strip()\n\ndp = [0] * (n + 1)\n\nfor i in range(1, n + 1):\n    if t[i - 1] == 'r':\n        dp[i] = dp[i - 1] + r\n    elif t[i - 1] == 's':\n        dp[i] = dp[i - 1] + s\n    elif t[i - 1] == 'p':\n        dp[i] = dp[i - 1] + p\n\nfor i in range(k + 1, n + 1):\n    if t[i - 1] == 'r':\n        dp[i] = max(dp[i], dp[i - k - 1] - r)\n    elif t[i - 1] == 's':\n        dp[i] = max(dp[i], dp[i - k - 1] - s)\n    elif t[i - 1] == 'p':\n        dp[i] = max(dp[i], dp[i - k - 1] - p)\n\nprint(dp[n])", "#include<bits/stdc++.h>\nusing namespace std;\nint main()\n{\n    int n,k;\n    cin>>n>>k;\n    int r,s,p;\n    cin>>r>>s>>p;\n    string t;\n    cin>>t;\n    int ans=0;\n    for(int i=1;i<=n;i++)\n    {\n        if(i<=k)\n        {\n            if(t[i-1]=='r')\n            {\n                ans+=r;\n            }\n            else if(t[i-1]=='p')\n            {\n                ans+=p;\n            }\n            else\n            {\n                ans+=s;\n            }\n        }\n        else\n        {\n            if(t[i-1-k]=='r')\n            {\n                ans+=s;\n            }\n            else if(t[i-1-k]=='p')\n            {\n                ans+=r;\n            }\n            else\n            {\n                ans+=p;\n            }\n        }\n    }\n    cout<<ans<<endl;\n    return 0;\n}\n```", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\n\"\"\"", "#include <bits/stdc++.h>\nusing namespace std;\nint main()\n{\n    int n, k;\n    cin >> n >> k;\n    int r, s, p;\n    cin >> r >> s >> p;\n    string t;\n    cin >> t;\n    int ans = 0;\n    for (int i = 0; i < n; i++)\n    {\n        if (i < k)\n        {\n            if (t[i] == 'r')\n            {\n                ans += r;\n            }\n            else if (t[i] == 'p')\n            {\n                ans += p;\n            }\n            else\n            {\n                ans += s;\n            }\n        }\n        else\n        {\n            if (t[i] == 'r')\n            {\n                ans += s;\n            }\n            else if (t[i] == 'p')\n            {\n                ans += r;\n            }\n            else\n            {\n                ans += p;\n            }\n        }\n    }\n    cout << ans << endl;\n    return 0;\n}\n\"\"\"", "import math\nimport os\nimport random\nimport re\nimport sys\n\ndef maximumScore(n, k, r, s, p, t):\n    score = [0, 0, 0]\n    for i in range(n):\n        if t[i] == 'r':\n            score[0] += r\n        elif t[i] == 's':\n            score[1] += s\n        elif t[i] == 'p':\n            score[2] += p\n        else:\n            continue\n        for j in range(k):\n            if t[i] == t[i-j-1]:\n                score[0] = 0\n                score[1] = 0\n                score[2] = 0\n                break\n    return max(score)\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nk = input().split()\n\n    n = int(nk[0])\n\n    k = int(nk[1])\n\n    rs = input().split()\n\n    r = int(rs[0])\n\n    s = int(rs[1])\n\n    p = int(rs[2])\n\n    t = input()\n\n    result = maximumScore(n, k, r, s, p, t)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()"], "rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "train rewards": [0.034482758620689655, 0.034482758620689655, 0.0, 0.0, 0.0, 0.0, 0.0], "time": [20.404791116714478, 42.068681478500366, 60.11628007888794, 80.48428130149841, 101.01783776283264, 117.02638959884644, 137.57509469985962], "sample times": 7}