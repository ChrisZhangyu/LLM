{"codes": ["\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\ns = list(map(int, sys.stdin.readline().split()))\n\n\ndef check(x):\n    global n, m, s\n    cnt = 0\n    for i in range(n + 1):\n        if s[i] == 1:\n            cnt += 1\n        if cnt > x:\n            return False\n    return True\n\n\ndef dfs(x):\n    global n, m, s\n    if x == m:\n        if check(x):\n            print(\" \".join(map(str, ans)))\n            sys.exit(0)\n        else:\n            return\n    for i in range(1, m + 1):\n        ans.append(i)\n        dfs(x + 1)\n        ans.pop()\n\n\nans = []\ndfs(0)\nprint(-1)\n\n\n\n\n# import sys\n\n# n, m = map(int, sys.stdin.readline().split())\n# s = list(map(int, sys.stdin.readline().split()))\n\n\n# def dfs(x):\n#     global n, m, s\n#     if x == m:\n\n# ans = []\n# dfs(0)\n# print(-1)", "import sys\n\nn, m = map(int, sys.stdin.readline().split())\ns = list(map(int, sys.stdin.readline().split()))\n\n\ndef check(s, n, m):\n    for i in range(n + 1):\n        if s[i] == 1:\n            return False\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if s[(i + j) % (n + 1)] == 1:\n                return False\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            for k in range(1, n + 1):\n                if s[(i + j + k) % (n + 1)] == 1:\n                    return False\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            for k in range(1, n + 1):\n                for l in range(1, n + 1):\n                    if s[(i + j + k + l) % (n + 1)] == 1:\n                        return False\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            for k in range(1, n + 1):\n                for l in range(1, n + 1):\n                    for m in range(1, n + 1):\n                        if s[(i + j + k + l + m) % (n + 1)] == 1:\n                            return False\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            for k in range(1, n + 1):\n                for l in range(1, n + 1):\n                    for m in range(", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "#!/usr/bin/env python3\n\nimport sys\n\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    s = sys.stdin.readline().strip()\n\n    dp = [[-1] * (m + 1) for _ in range(n + 1)]\n    dp[0][1] = 0\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            dp[i][j] = dp[i - 1][j]\n            if s[i - 1] == '1':\n                dp[i][j] = max(dp[i][j], dp[i - 1][j - i])\n            else:\n                dp[i][j] = max(dp[i][j], dp[i - 1][j - i] + 1)\n\n    if dp[n][m] == -1:\n        print(-1)\n    else:\n        print(' '.join(map(str, get_path(dp, n, m))))\n\n\ndef get_path(dp, n, m):\n    path = []\n    i, j = n, m\n    while i > 0:\n        path.append(j)\n        j = dp[i][j]\n        i -= 1\n    return path[::-1]\n\n\nif __name__ == '__main__':\n    main()", "\n\"\"\"", "\n\"\"\"\n\n\ndef main():\n    n, m = [int(x) for x in input().split()]\n    s = [int(x) for x in input().split()]\n\n\nif __name__ == \"__main__\":\n    main()", "import sys\nimport itertools\n\nN, M = map(int, sys.stdin.readline().split())\nS = list(map(int, sys.stdin.readline().split()))\n\ndef check(seq):\n    cur = 0\n    for i in seq:\n        cur += i\n        if cur > N:\n            return False\n        if S[cur] == 1:\n            return False\n    return True\n\nif S[0] == 1 or S[N] == 1:\n    print(-1)\n    sys.exit(0)\n\nfor i in range(1, N + 1):\n    if S[i] == 1:\n        S[i] = 0\n\nfor i in range(1, N + 1):\n    if S[i] == 1:\n        S[i] = 0\n\nfor i in range(1, N + 1):\n    if S[i] == 1:\n        S[i] = 0\n\nfor i in range(1, N + 1):\n    if S[i] == 1:\n        S[i] = 0\n\nfor i in range(1, N + 1):\n    if S[i] == 1:\n        S[i] = 0\n\nfor i in range(1, N + 1):\n    if S[i] == 1:\n        S[i] = 0\n\nfor i in range(1, N + 1):\n    if S[i] == 1:\n        S[i] = 0\n\nfor i in range(1, N + 1):\n    if S[i] == 1:\n        S[i] = 0\n\nfor i in range(1, N + 1):\n    if S[i] == 1:\n        S[i] = 0\n\nfor i in range(1, N + 1):\n    if S"], "rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "train rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "time": [16.916231632232666, 42.83128261566162, 68.19089865684509, 88.01693439483643, 93.55719470977783, 109.39182138442993, 134.45873856544495], "sample times": 7}