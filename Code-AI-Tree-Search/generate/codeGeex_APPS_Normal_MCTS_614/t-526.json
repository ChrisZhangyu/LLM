{"codes": ["\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\na = []\nfor i in range(n):\n    a.append(list(map(int, sys.stdin.readline().split())))\n\nfor i in range(n):\n    for j in range(m):\n        if a[i][j] == 0:\n            a[i][j] = 1024\n\nfor i in range(n):\n    for j in range(m):\n        for k in range(m):\n            if k != j:\n                a[i][j] = a[i][j] ^ a[i][k]\n\nfor i in range(n):\n    for j in range(m):\n        if a[i][j] > 0:\n            print(\"TAK\")\n            for k in range(m):\n                if k != j:\n                    print(a[i][k], end=\" \")\n            break\n    else:\n        print(\"NIE\")", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import sys\n\nn, m = map(int, sys.stdin.readline().split())\na = []\nfor i in range(n):\n    a.append(list(map(int, sys.stdin.readline().split())))\n\nfor i in range(n):\n    for j in range(m):\n        if a[i][j] == 0:\n            a[i][j] = -1\n\nfor i in range(n):\n    for j in range(m):\n        for k in range(m):\n            if a[i][j] != -1 and a[i][k] != -1:\n                a[i][j] = a[i][j] ^ a[i][k]\n\nfor i in range(n):\n    for j in range(m):\n        if a[i][j] > 0:\n            print(\"TAK\")\n            for k in range(m):\n                if a[i][k] != -1:\n                    print(a[i][k], end=\" \")\n            break\n    if a[i][j] > 0:\n        break\nelse:\n    print(\"NIE\")", "def main():\n    n, m = map(int, input().split())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, input().split())))\n\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 0:\n                return \"NIE\"\n\n    for i in range(n):\n        for j in range(m):\n            for k in range(j + 1, m):\n                if a[i][j] & a[i][k] == 0:\n                    return \"NIE\"\n\n    for i in range(n):\n        for j in range(m):\n            for k in range(i + 1, n):\n                if a[i][j] & a[k][j] == 0:\n                    return \"NIE\"\n\n    for i in range(n):\n        for j in range(m):\n            for k in range(i + 1, n):\n                for l in range(j + 1, m):\n                    if a[i][j] & a[k][l] == 0:\n                        return \"NIE\"\n\n    for i in range(n):\n        for j in range(m):\n            for k in range(i + 1, n):\n                for l in range(j + 1, m):\n                    for", "\ndef main():\n    n, m = map(int, input().split())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, input().split())))\n\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 0:\n                return \"NIE\"\n\n    for i in range(n):\n        for j in range(m):\n            for k in range(j + 1, m):\n                if a[i][j] & a[i][k] == 0:\n                    return \"NIE\"\n\n    for i in range(m):\n        for j in range(n):\n            for k in range(j + 1, n):\n                if a[j][i] & a[k][i] == 0:\n                    return \"NIE\"\n\n    for i in range(m):\n        for j in range(n):\n            for k in range(j + 1, n):\n                if a[j][i] & a[k][i] == 0:\n                    return \"NIE\"\n\n    for i in range(m):\n        for j in range(n):\n            for k in range(j + 1, n):\n                if a[j][i] & a[k][i] == 0:\n                    return \"NIE\"\n\n    for", "def check(a):\n    for i in range(len(a)):\n        for j in range(len(a[0])):\n            if a[i][j] == 0:\n                return False\n    return True\n\n\ndef check2(a):\n    for i in range(len(a)):\n        for j in range(len(a[0])):\n            if a[i][j] == 0:\n                return False\n    return True\n\n\ndef check3(a):\n    for i in range(len(a)):\n        for j in range(len(a[0])):\n            if a[i][j] == 0:\n                return False\n    return True\n\n\ndef check4(a):\n    for i in range(len(a)):\n        for j in range(len(a[0])):\n            if a[i][j] == 0:\n                return False\n    return True\n\n\ndef check5(a):\n    for i in range(len(a)):\n        for j in range(len(a[0])):\n            if a[i][j] == 0:\n                return False\n    return True\n\n\ndef check6(a):\n    for i in range(len(a)):\n        for j in range(len(a[0])):\n            if a[i][j] == 0:\n                return False\n    return True", "import numpy as np\n\nn, m = map(int, input().split())\na = np.array([list(map(int, input().split())) for _ in range(n)])\n\nfor i in range(n):\n    for j in range(m):\n        if a[i, j] == 0:\n            print(\"NIE\")\n            exit()\n\nprint(\"TAK\")\nfor i in range(n):\n    for j in range(m):\n        if a[i, j] == 1:\n            print(j + 1, end=\" \")", "\ndef check(a):\n    for i in range(len(a)):\n        for j in range(len(a[0])):\n            if a[i][j] == 0:\n                return False\n    return True\n\n\ndef check(a):\n    for i in range(len(a)):\n        for j in range(len(a[0])):\n            if a[i][j] == 0:\n                return False\n    return True\n\n\ndef check(a):\n    for i in range(len(a)):\n        for j in range(len(a[0])):\n            if a[i][j] == 0:\n                return False\n    return True\n\n\ndef check(a):\n    for i in range(len(a)):\n        for j in range(len(a[0])):\n            if a[i][j] == 0:\n                return False\n    return True"], "rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.13043478260869565, 0.0], "train rewards": [0.0, 0.0, 0.18181818181818182, 0.0, 0.0, 0.0, 0.18181818181818182, 0.0], "time": [14.190088033676147, 33.64678764343262, 53.197518825531006, 72.67235469818115, 92.12957620620728, 111.24698305130005, 130.7033178806305, 143.91542959213257], "sample times": 8}