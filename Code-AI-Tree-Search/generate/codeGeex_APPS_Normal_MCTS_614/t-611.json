{"codes": ["\nimport sys\nimport math\n\nn, m = map(int, sys.stdin.readline().split())\narr = list(map(int, sys.stdin.readline().split()))\nchanges = []\n\nfor i in range(m):\n    x, d = map(int, sys.stdin.readline().split())\n    changes.append((x, d))\n\nfor i in range(m):\n    x, d = changes[i]\n    for j in range(n):\n        arr[j] += x + d * abs(j - i)\n\nprint(sum(arr) / n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import sys\nimport math\n\nn, m = map(int, sys.stdin.readline().split())\narr = list(map(int, sys.stdin.readline().split()))\nchanges = []\n\nfor i in range(m):\n    x, d = map(int, sys.stdin.readline().split())\n    changes.append((x, d))\n\nfor i in range(m):\n    x, d = changes[i]\n    for j in range(n):\n        arr[j] += x + d * abs(j - i)\n\nprint(sum(arr) / n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "def mean(arr):\n    return sum(arr)/len(arr)\n\nn, m = list(map(int, input().split()))\narr = list(map(int, input().split()))\n\nfor i in range(m):\n    x, d = list(map(int, input().split()))\n    for j in range(n):\n        arr[j] += x + d*abs(j-i)\n\nprint(mean(arr))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\ndef mean(arr):\n    return sum(arr) / float(len(arr))\n\ndef median(arr):\n    n = len(arr)\n    if n % 2 == 1:\n        return sorted(arr)[n // 2]\n    else:\n        return sum(sorted(arr)[n // 2 - 1:n // 2 + 1]) / 2.0\n\ndef mode(arr):\n    counts = Counter(arr)\n    max_count = max(counts.values())\n    return [x_i for x_i, count in counts.iteritems()\n            if count == max_count]\n\ndef variance(arr):\n    n = len(arr)\n    mean_ = mean(arr)\n    return sum((x_i - mean_) ** 2 for x_i in arr) / float(n - 1)\n\ndef std_dev(arr):\n    return variance(arr) ** .5\n\ndef quartiles(arr):\n    sorted_arr = sorted(arr)\n    n = len(arr)\n    if n % 2 == 1:\n        lower = median(sorted_arr[n // 2:])\n        upper = median(sorted_arr[:n // 2])\n    else:\n        lower = median(sorted_arr[n // 2 - 1:n // 2 + 1])\n        upper = median(sorted_arr[n // 2:n // 2 + 1])\n    return lower, upper\n\ndef inter_quartile_range(", "import math\n\nn, m = [int(x) for x in input().split()]\narr = [int(x) for x in input().split()]\nchanges = []\n\nfor i in range(m):\n    x, d = [int(x) for x in input().split()]\n    changes.append((x, d))\n\nfor i in range(m):\n    x, d = changes[i]\n    for j in range(n):\n        arr[j] += x + d * abs(j - i)\n\nprint(sum(arr) / n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\n\ndef solve():\n    n, m = map(int, input().split())\n    arr = list(map(int, input().split()))\n    for _ in range(m):\n        x, d = map(int, input().split())\n        for i in range(n):\n            arr[i] += x + d * abs(i - (i + 1) // 2)\n    return sum(arr) / n\n\n\nif __name__ == '__main__':\n    print(\"%.6f\" % solve())", "\ndef get_input():\n    n, m = map(int, input().split())\n    arr = list(map(int, input().split()))\n    changes = []\n    for i in range(m):\n        x, d = map(int, input().split())\n        changes.append((x, d))\n    return n, m, arr, changes\n\n\ndef solve(n, m, arr, changes):\n    for x, d in changes:\n        for i in range(1, n + 1):\n            arr[i - 1] += x + d * (i - 1)\n    return sum(arr) / n\n\n\nif __name__ == '__main__':\n    n, m, arr, changes = get_input()\n    print(solve(n, m, arr, changes))", "def get_input():\n    n, m = map(int, input().split())\n    x = []\n    d = []\n    for i in range(m):\n        xi, di = map(int, input().split())\n        x.append(xi)\n        d.append(di)\n    return n, m, x, d\n\n\ndef get_answer(n, m, x, d):\n    arr = []\n    for i in range(n):\n        arr.append(0)\n    for i in range(m):\n        for j in range(n):\n            arr[j] += x[i] + d[i] * abs(j - i)\n    return sum(arr) / n\n\n\nif __name__ == '__main__':\n    n, m, x, d = get_input()\n    answer = get_answer(n, m, x, d)\n    print(answer)", "\nimport math\n\nn, m = [int(x) for x in input().split()]\n\narr = [int(x) for x in input().split()]\n\nchanges = []\n\nfor i in range(m):\n    x, d = [int(x) for x in input().split()]\n    changes.append((x, d))\n\nfor x, d in changes:\n    for i in range(n):\n        arr[i] += x + d * abs(i - n // 2)\n\nprint(sum(arr) / len(arr))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"], "rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "train rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "time": [21.40482449531555, 42.19414782524109, 63.08332967758179, 83.96254301071167, 104.80303478240967, 126.04431509971619, 147.03238463401794, 163.95445132255554, 184.83344149589539, 205.70041608810425], "sample times": 10}