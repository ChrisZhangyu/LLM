{"codes": ["\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nlong long a,b,p,x;\nint main()\n{\n    cin>>a>>b>>p>>x;\n    long long ans=0;\n    for(long long i=1;i<=x;i++)\n    {\n        if(i*pow(a,i)%p==b)\n        ans++;\n    }\n    cout<<ans;\n    return 0;\n}\n```", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```", "import gmpy2\nimport sys\n\na, b, p, x = map(int, sys.stdin.readline().split())\nans = 0\nfor n in range(1, x + 1):\n    if gmpy2.powmod(n, n, p) == b % p:\n        ans += 1\nprint(ans)", "```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nlong long a,b,p,x;\nint main()\n{\n    cin>>a>>b>>p>>x;\n    long long ans=0;\n    for(long long i=1;i<=x;i++)\n    {\n        if(i*pow(a,i)%p==b)\n        {\n            ans++;\n        }\n    }\n    cout<<ans;\n    return 0;\n}\n```", "\nimport gmpy2\nimport sys\n\na, b, p, x = map(int, sys.stdin.readline().split())\n\nans = 0\nfor n in range(1, x + 1):\n    if gmpy2.powmod(n, n, p) == b % p:\n        ans += 1\n\nprint(ans)", "import math\n\na, b, p, x = map(int, input().split())\n\nans = 0\n\nfor n in range(1, x + 1):\n    if n * pow(a, n, p) % p == b % p:\n        ans += 1\n\nprint(ans)", "\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nlong long a,b,p,x;\nint main()\n{\n    cin>>a>>b>>p>>x;\n    long long ans=0;\n    for(long long i=1;i<=x;i++)\n    {\n        if(i*pow(a,i)%p==b)\n        {\n            ans++;\n        }\n    }\n    cout<<ans;\n    return 0;\n}\n```", "\nimport math\nfrom math import gcd\nfrom fractions import gcd\nfrom fractions import Fraction as frac\nfrom functools import reduce\nfrom operator import mul\nfrom collections import Counter\nfrom collections import defaultdict\nfrom collections import deque\nfrom collections import OrderedDict\nfrom collections import namedtuple\nfrom itertools import permutations\nfrom itertools import combinations\nfrom itertools import combinations_with_replacement\nfrom itertools import product\nfrom bisect import bisect_left\nfrom bisect import bisect_right\nfrom bisect import bisect\nfrom heapq import heappop\nfrom heapq import heappush\nfrom heapq import heapify\nfrom bisect import bisect_left\nfrom bisect import bisect_right\nfrom bisect import insort_left\nfrom bisect import insort_right\nfrom random import randint\nfrom random import random\nfrom random import randrange\nfrom random import choice\nfrom random import shuffle\nfrom random import sample\nfrom string import ascii_lowercase\nfrom string import ascii_uppercase\nfrom string import digits\nfrom string import hexdigits\nfrom string import octdigits\nfrom string import punctuation\nfrom string import ascii_letters\nfrom string import printable\nfrom string import whitespace\nfrom string import lowercase\nfrom string import uppercase\nfrom string import digits\nfrom string import hexdigits\nfrom string import octdigits\nfrom string import punctuation\nfrom string import ascii_letters\nfrom string import printable\nfrom string import whitespace\nfrom string import lowercase\nfrom string import uppercase\nfrom string import digits\nfrom string import hexdigits\nfrom string import octdigits\nfrom string import punctuation\nfrom string import ascii_letters\nfrom string import printable\nfrom string import whitespace\nfrom string import lowercase\nfrom string import uppercase\nfrom string import digits\nfrom string import hexdigits\nfrom string import octdigits\nfrom string import punctuation\nfrom string import ascii_letters\nfrom string import printable\nfrom string import whitespace\nfrom string import lowercase\nfrom string import uppercase\nfrom string import digits\nfrom string import hexdigits\nfrom string import octdigits\nfrom string import punctuation\nfrom string import ascii_letters\nfrom string import printable\nfrom string import whitespace\nfrom string import lowercase\nfrom string import uppercase\nfrom string import digits"], "rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "train rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "time": [7.256304025650024, 11.78575849533081, 18.6259548664093, 35.99832057952881, 42.45322227478027, 57.78984761238098, 75.23750376701355, 105.09827613830566], "sample times": 8}