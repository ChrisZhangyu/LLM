{"codes": ["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```", "import sys\n\nn = int(sys.stdin.readline().strip())\npawns = sys.stdin.readline().strip()\nboard = sys.stdin.readline().strip()\n\npawns = [int(i) for i in pawns]\nboard = [int(i) for i in board]\n\npawns_x = [i for i in range(n) if pawns[i] == 1]\npawns_y = [i for i in range(n) if pawns[i] == 1]\n\nboard_x = [i for i in range(n) if board[i] == 1]\nboard_y = [i for i in range(n) if board[i] == 1]\n\n# print(pawns_x)\n# print(pawns_y)\n# print(board_x)\n# print(board_y)\n\ndef check(x, y):\n    if x in pawns_x and y in pawns_y:\n        return False\n    if x in board_x and y in board_y:\n        return False\n    if x + 1 in board_x and y in board_y:\n        return False\n    if x - 1 in board_x and y in board_y:\n        return False\n    if y + 1 in board_x and x in board_y:\n        return False\n    if y - 1 in board_x and x in board_y:\n        return False\n    return True\n\ncount = 0\nfor i in range(n):\n    for j in range(n):\n        if check(i, j):\n            count += 1\n\nprint(count)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "def bishwocks(board):\n    n = len(board)\n    bishwocks = 0\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 'X':\n                continue\n            if board[i][j] == '0':\n                bishwocks += 1\n                board[i][j] = 'B'\n                if i + 1 < n and board[i + 1][j] == '0':\n                    board[i + 1][j] = 'B'\n                if i - 1 >= 0 and board[i - 1][j] == '0':\n                    board[i - 1][j] = 'B'\n                if j + 1 < n and board[i][j + 1] == '0':\n                    board[i][j + 1] = 'B'\n                if j - 1 >= 0 and board[i][j - 1] == '0':\n                    board[i][j - 1] = 'B'\n    print(bishwocks)\n    return bishwocks", "\ndef bishwocks():\n    board = []\n    for i in range(2):\n        board.append(list(input()))\n    pawns = []\n    for i in range(2):\n        for j in range(len(board[i])):\n            if board[i][j] == 'X':\n                pawns.append((i, j))\n    bishwocks = []\n    for i in range(2):\n        for j in range(len(board[i])):\n            if board[i][j] == '0':\n                bishwocks.append((i, j))\n    bishwocks_count = 0\n    for bishwock in bishwocks:\n        for pawn in pawns:\n            if bishwock[0] == pawn[0] or bishwock[1] == pawn[1]:\n                break\n        else:\n            bishwocks_count += 1\n    print(bishwocks_count)\n\nbishwocks()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\nimport sys\n\nn = int(sys.stdin.readline().strip())\n\nboard = sys.stdin.readline().strip()\n\npawns = sys.stdin.readline().strip()\n\npawns = [int(i) for i in pawns]\n\nboard = [list(board[i:i+n]) for i in range(0, len(board), n)]\n\npawns = [list(pawns[i:i+n]) for i in range(0, len(pawns), n)]\n\n#print(board)\n#print(pawns)\n\ndef check(board, pawns):\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == 'X' and pawns[i][j] == 1:\n                return False\n            if board[i][j] == '.' and pawns[i][j] == 0:\n                return False\n            if board[i][j] == 'X' and pawns[i][j] == 0:\n                return False\n            if board[i][j] == '.' and pawns[i][j] == 1:\n                return False\n            if board[i][j] == 'X' and pawns[i][j] == 1:\n                return False\n            if board[i][j] == '.' and pawns[i][j] == 0:\n                return False\n            if board[i][j] == 'X' and pawns[i][j] == 0:\n                return False\n            if board[i][j] == '.' and pawns[i][j] == 1:\n                return False\n            if board[i][j] == 'X' and pawns[i][j] == 1:\n                return False\n            if board[i][j] == '.' and pawns[i][j] == 0:\n                return False\n            if board[i][j] == 'X' and pawns[i][j] == 0:\n                return False\n            if board[i][j] == '.' and pawns[i][j] == 1:\n                return False\n            if board[i][j] == 'X' and pawns[i][j", "\ndef check_bishwock(bishwock):\n    if bishwock[0] == bishwock[1] and bishwock[1] == bishwock[2]:\n        return True\n    elif bishwock[0] == bishwock[2] and bishwock[2] == bishwock[1]:\n        return True\n    elif bishwock[1] == bishwock[2] and bishwock[2] == bishwock[0]:\n        return True\n    else:\n        return False\n\ndef check_bishwocks(bishwocks):\n    for bishwock in bishwocks:\n        if check_bishwock(bishwock):\n            return True\n    return False\n\ndef check_pawns(pawns):\n    for pawn in pawns:\n        if pawn[0] == pawn[1] and pawn[1] == pawn[2]:\n            return True\n        elif pawn[0] == pawn[2] and pawn[2] == pawn[1]:\n            return True\n        elif pawn[1] == pawn[2] and pawn[2] == pawn[0]:\n            return True\n    return False\n\ndef check_bishwocks_and_pawns(bishwocks, pawns):\n    for bishwock in bishwocks:\n        for pawn in pawns:\n            if bishwock[0] == pawn[0] and bishwock[1] == pawn[1] and bishwock[2] == pawn[2]:\n                return True\n            elif bishwock[0] == pawn[2] and bishwock[1] == pawn[1] and bishwock[2] == pawn[0]:\n                return True\n            elif bishwock[0] == pawn[1] and bishwock[1] == pawn[0] and bishwock[2] == pawn[2]:\n                return True\n            elif bishwock[0] == pawn[2] and bishwock[1] == pawn[0] and bishwock[2] == pawn[1]:\n                return True\n            elif bishwock[0] ==", "\ndef get_bishwocks(board):\n    bishwocks = []\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == 'X':\n                continue\n            if board[i][j] == '.':\n                bishwocks.append((i, j))\n    return bishwocks\n\ndef get_pawns(board):\n    pawns = []\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == '0':\n                continue\n            if board[i][j] == 'X':\n                pawns.append((i, j))\n    return pawns\n\ndef check_bishwocks(bishwocks, pawns):\n    for i in range(len(bishwocks)):\n        for j in range(len(pawns)):\n            if bishwocks[i][0] == pawns[j][0] and bishwocks[i][1] == pawns[j][1]:\n                return False\n            if bishwocks[i][0] == pawns[j][0] + 1 and bishwocks[i][1] == pawns[j][1]:\n                return False\n            if bishwocks[i][0] == pawns[j][0] - 1 and bishwocks[i][1] == pawns[j][1]:\n                return False\n            if bishwocks[i][0] == pawns[j][0] and bishwocks[i][1] == pawns[j][1] + 1:\n                return False\n            if bishwocks[i][0] == pawns[j][0] and bishwocks[i][1] == pawns[j][1] - 1:\n                return False\n            if bishwocks[i][0] == pawns[j][0] + 1 and bishwocks[i][1] == pawns[j][1] + 1:\n                return False\n            if bishwocks[i][0] == pawns[j][0] + 1 and bishwocks[i][1] == pawns[j]["], "rewards": [0.0, 0.0, 0.0, 0.16666666666666666, 0.0, 0.0, 0.0], "train rewards": [0.0, 0.027777777777777776, 0.0, 0.3888888888888889, 0.0, 0.0, 0.0], "time": [3.754115581512451, 34.33599233627319, 54.41734480857849, 84.57908320426941, 114.76711654663086, 145.11798071861267, 175.51098704338074], "sample times": 7}