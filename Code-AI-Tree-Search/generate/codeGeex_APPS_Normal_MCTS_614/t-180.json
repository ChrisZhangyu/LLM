{"codes": ["\nimport sys\n\ndef main():\n    s = sys.stdin.readline().strip()\n    k = int(sys.stdin.readline().strip())\n\n    if k > len(s):\n        print(\"Impossible\")\n        return\n\n    for i in range(len(s) - k + 1):\n        if s[i:i + k] == s[i:i + k][::-1]:\n            print(s[i:i + k])\n            return\n\n    print(\"Impossible\")\n\nif __name__ == '__main__':\n    main()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import sys\n\ndef main():\n    s = sys.stdin.readline().strip()\n    k = int(sys.stdin.readline().strip())\n\n    if k > len(s):\n        print(\"Impossible\")\n        return\n\n    for i in range(len(s) - k + 1):\n        if s[i:i + k] == s[i:i + k][::-1]:\n            print(s[i:i + k])\n            return\n\n    print(\"Impossible\")\n\nif __name__ == '__main__':\n    main()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "def decode(s, k):\n    if len(s) < k:\n        return 'Impossible'\n    if len(s) == k:\n        return s\n    snowflakes = 0\n    candies = 0\n    for i in range(len(s)):\n        if s[i] == '*':\n            snowflakes += 1\n        elif s[i] == '?':\n            candies += 1\n    if k < snowflakes or k < candies:\n        return 'Impossible'\n    for i in range(len(s)):\n        if s[i] == '*':\n            snowflakes -= 1\n        elif s[i] == '?':\n            candies -= 1\n        if candies < 0 or snowflakes < 0:\n            return 'Impossible'\n        if candies == 0 and snowflakes == 0 and i == len(s) - 1:\n            return s[i + 1:]\n    return 'Impossible'\n\nprint(decode(input(), int(input())))\n\"\"\"\n\n\ndef decode(s, k):\n    if len(s) < k:\n        return \"Impossible\"\n    if len(s) == k:\n        return s\n    snowflakes = 0\n    candies = 0\n    for i in range(len(s)):\n        if s[i] == \"*\":\n            snowflakes += 1\n        elif s[i] == \"?\":\n            candies += 1\n    if k < snowflakes or k < candies:\n        return \"Impossible\"\n    for i in range(len(s)):\n        if s[i] == \"*\":\n            snowflakes -= 1\n        elif s[", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\ndef decode(s, k):\n    if len(s) < k:\n        return 'Impossible'\n    if len(s) == k:\n        return s\n    snowflakes = 0\n    candies = 0\n    for i in range(len(s)):\n        if s[i] == '*':\n            snowflakes += 1\n        elif s[i] == '?':\n            candies += 1\n    if k < snowflakes or k < candies:\n        return 'Impossible'\n    for i in range(len(s)):\n        if s[i] == '*':\n            snowflakes -= 1\n        elif s[i] == '?':\n            candies -= 1\n        if candies < 0 or snowflakes < 0:\n            return 'Impossible'\n        if candies == 0 and snowflakes == 0 and i == len(s) - 1:\n            return s[i + 1:]\n    return 'Impossible'\n\nprint(decode('hw?ap*yn?eww*ye*ar', 12))\nprint(decode('ab?a', 2))\nprint(decode('ab?a', 3))\nprint(decode('ababb', 5))\nprint(decode('ab?a', 1))", "def is_possible(s, k):\n    if len(s) < k:\n        return False\n    if len(s) == k:\n        return True\n    if s[k] == '?':\n        return is_possible(s[:k-1], k-1) or is_possible(s[:k], k-1) or is_possible(s[:k+1], k-1)\n    elif s[k] == '*':\n        return is_possible(s[:k-1], k-1) or is_possible(s[:k], k-1) or is_possible(s[:k+1], k-1) or is_possible(s[:k-1], k) or is_possible(s[:k], k) or is_possible(s[:k+1], k) or is_possible(s[:k-1], k+1) or is_possible(s[:k], k+1) or is_possible(s[:k+1], k+1)\n    else:\n        return is_possible(s[:k-1], k-1) or is_possible(s[:k], k-1) or is_possible(s[:k-1], k) or is_possible(s[:k], k) or is_possible(s[:k-1], k+1) or is_possible(s[:k], k+1)\n\ns = input()\nk = int(input())\nif is_possible(s, k):\n    print(s[:k])\nelse:\n    print('Impossible')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "def check(string, k):\n    if len(string) < k:\n        return False\n    for i in range(k):\n        if string[i] == '*' or string[i] == '?':\n            continue\n        if string[i] != string[i + k - 1]:\n            return False\n    return True\n\nstring = input()\nk = int(input())\nif check(string, k):\n    print(string[:k])\nelse:\n    print('Impossible')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"], "rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.075, 0.075], "train rewards": [0.0, 0.0, 0.0, 0.0, 0.02564102564102564, 0.3333333333333333, 0.358974358974359], "time": [27.478729248046875, 52.87246608734131, 78.09044933319092, 103.2926185131073, 128.569482088089, 154.20292830467224, 179.8028106689453], "sample times": 7}