{"codes": ["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import sys\n\nn, t = map(int, sys.stdin.readline().split())\ns1 = sys.stdin.readline().strip()\ns2 = sys.stdin.readline().strip()\n\nif t == 0:\n    if s1 == s2:\n        sys.stdout.write(\"-1\")\n    else:\n        sys.stdout.write(s1 if len(s1) < len(s2) else s2)\nelse:\n    for i in range(len(s1)):\n        if s1[i] != s2[i]:\n            if t == 1:\n                sys.stdout.write(s1[:i] + s1[i + 1:])\n            else:\n                sys.stdout.write(s1[:i] + s2[i] + s1[i + 1:])\n            break\n    else:\n        sys.stdout.write(\"-1\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "def find_third_string(s1, s2, t):\n    n = len(s1)\n    if n != len(s2):\n        return -1\n    if t > n:\n        return -1\n    for i in range(n):\n        if s1[i] != s2[i]:\n            t -= 1\n            if t == 0:\n                return s1[:i] + s2[i] + s1[i + 1:]\n    return -1", "\ndef find_third_string(s1, s2, t):\n    n = len(s1)\n    if n != len(s2):\n        return -1\n    if t > n:\n        return -1\n    for i in range(n):\n        if s1[i] != s2[i]:\n            t -= 1\n            if t == 0:\n                return s1[:i] + s2[i] + s1[i + 1:]\n    return -1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\nimport sys\n\nn, t = map(int, sys.stdin.readline().split())\ns1 = sys.stdin.readline().strip()\ns2 = sys.stdin.readline().strip()\n\nif t == 0:\n    if s1 == s2:\n        print(-1)\n    else:\n        print(s1)\nelse:\n    for i in range(len(s1)):\n        if s1[i] != s2[i]:\n            if t == 1:\n                print(s1[:i] + s2[i] + s1[i + 1:])\n            else:\n                print(s1[:i] + s2[i] + s1[i + 1:])\n                print(s1[:i] + s1[i] + s1[i + 1:])\n                print(s1[:i] + s2[i] + s2[i + 1:])\n                print(s1[:i] + s1[i] + s2[i + 1:])\n                print(s1[:i] + s2[i] + s2[i + 1:])\n                print(s1[:i] + s1[i] + s2[i + 1:])\n                print(s1[:i] + s2[i] + s1[i + 1:])\n                print(s1[:i] + s1[i] + s1[i + 1:])\n                print(s1[:i] + s2[i] + s2[i + 1:])\n                print(s1[:i] + s1[i] + s2[i + 1:])\n                print(s1[:i] + s2[i] + s1[i + 1:])\n                print(s1[:i] + s1[i] + s1[i + 1:])", "def get_third_string(s1, s2, t):\n    n = len(s1)\n    if n != len(s2):\n        return -1\n    if t > n:\n        return -1\n    for i in range(n):\n        if s1[i] == s2[i]:\n            continue\n        if s1[i] != s2[i]:\n            t -= 1\n        if t == 0:\n            return s1[:i] + s2[i] + s1[i + 1:]\n    return -1\n\nprint(get_third_string(input(), input(), int(input())))", "\n\ndef find_third_string(s1, s2, t):\n    if len(s1) != len(s2):\n        return -1\n    if t > len(s1) or t > len(s2):\n        return -1\n    if t == 0:\n        if s1 == s2:\n            return -1\n        else:\n            return s1 if len(s1) > len(s2) else s2\n    if s1 == s2:\n        return -1\n    for i in range(len(s1)):\n        if s1[i] == s2[i]:\n            continue\n        if s1[i] != s2[i] and s1[i + 1 :] == s2[i + 1 :]:\n            return s1[0:i] + chr(ord(s1[i]) + 1) + s1[i + 1 :]\n        if s1[i] != s2[i] and s2[i + 1 :] == s1[i + 1 :]:\n            return s2[0:i] + chr(ord(s2[i]) + 1) + s2[i + 1 :]\n        if s1[i] != s2[i] and s1[i + 1 :] != s2[i + 1 :]:\n            return s1[0:i] + chr(ord(s1[i]) + 1) + s1[i + 1 :]\n        if s1[i] != s2[i] and s2[i + 1 :] != s1[i + 1 :]:\n            return s2[0:i] + chr(ord(s2[i]) + 1) + s2[i + 1 :]\n    return -1\n\n\ndef find_third_string(s1, s2, t):\n    if len(s1) != len(s2):\n        return -1\n    if t > len(s1) or t > len(s2):\n        return -1\n    if t == 0:\n        if s1 == s2:\n            return -1\n        else:\n            return s1 if len(s1) > len(s2) else s2\n    if s1 == s2:\n        return -1\n    for i in range(len(s1)):\n        if s1[i] == s2[i]:\n            continue\n        if s1[i] != s2[i] and s1[i + 1 :] == s2[i + 1 :]:\n            return s1[0:i] + chr(ord(s1[i]) + 1) + s1[i + 1 :]\n        if s1[i] != s2[i] and s2[i + 1 :] == s1[i + 1 :]:\n", "def is_third_string(s1, s2, t):\n    if len(s1) != len(s2):\n        return False\n    for i in range(len(s1)):\n        if abs(ord(s1[i]) - ord(s2[i])) == t:\n            return True\n    return False\n\n\ndef find_third_string(s1, s2, t):\n    if is_third_string(s1, s2, t):\n        return s1\n    if is_third_string(s2, s1, t):\n        return s2\n    return -1\n\n\nif __name__ == '__main__':\n    n, t = map(int, input().split())\n    s1 = input()\n    s2 = input()\n    print(find_third_string(s1, s2, t))"], "rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "train rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "time": [35.42327642440796, 71.94596195220947, 81.85339999198914, 118.47360301017761, 143.85753178596497, 156.79989528656006, 193.41006517410278, 209.4094738960266], "sample times": 8}