{"codes": ["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nint main()\n{\n    int n;\n    cin >> n;\n    vector<vector<int>> edges(n);\n    for (int i = 0; i < n - 1; i++)\n    {\n        int a, b;\n        cin >> a >> b;\n        edges[a - 1].push_back(b - 1);\n        edges[b - 1].push_back(a - 1);\n    }\n\n    vector<int> visited(n, 0);\n    visited[0] = 1;\n    int ans = 0;\n    for (int i = 0; i < n; i++)\n    {\n        if (visited[i])\n            continue;\n        visited[i] = 1;\n        ans += 1;\n        for (int j = 0; j < edges[i].size(); j++)\n        {\n            if (visited[edges[i][j]])\n                continue;\n            visited[edges[i][j]] = 1;\n            ans += 1;\n            for (int k = 0; k < edges[edges[i][j]].size(); k++)\n            {\n                if (visited[edges[edges[i][j]][k]])\n                    continue;\n                visited[edges[edges[i][j]][k]] = 1;\n                ans += 1;\n                for (int l = 0; l < edges[edges[edges[i][j]][k]].size(); l++)\n                {\n                    if (visited[edges[edges[edges[i][j]][k]][l]])\n                        continue;\n                    visited[edges[edges[edges[i][j]][k]][l]] = 1;\n                    ans += 1;\n                }\n            }\n        }\n    }\n\n    cout << ans << endl;\n    for (int i = 0; i < n - 1; i++)\n    {\n        for (int j = 0; j < edges[i].size(); j++)\n", "\nimport sys\n\nn = int(sys.stdin.readline().strip())\nedges = []\nfor i in range(n - 1):\n    edges.append(list(map(int, sys.stdin.readline().strip().split())))\n\n\ndef dfs(node, parent):\n    for i in range(len(edges)):\n        if edges[i][0] == node:\n            edges[i][0] = parent\n            dfs(edges[i][1], edges[i][0])\n        elif edges[i][1] == node:\n            edges[i][1] = parent\n            dfs(edges[i][0], edges[i][1])\n\n\ndfs(1, -1)\n\nans = 0\n\n\ndef dfs2(node, parent):\n    global ans\n    for i in range(len(edges)):\n        if edges[i][0] == node:\n            edges[i][0] = parent\n            dfs2(edges[i][1], edges[i][0])\n            ans += edges[i][2]\n        elif edges[i][1] == node:\n            edges[i][1] = parent\n            dfs2(edges[i][0], edges[i][1])\n            ans += edges[i][2]\n\n\ndfs2(1, -1)\n\nprint(ans)\nfor i in range(len(edges)):\n    if edges[i][0] == 1:\n        print(edges[i][1], edges[i][0], edges[i][2])\n    else:\n        print(edges[i][0], edges[i][1], edges[i][2])", "#include<bits/stdc++.h>\nusing namespace std;\nint n,a[200005],b[200005],c[200005];\nint main()\n{\n    cin>>n;\n    for(int i=1;i<n;i++)\n    {\n        cin>>a[i]>>b[i];\n    }\n    for(int i=1;i<n-1;i++)\n    {\n        for(int j=1;j<n;j++)\n        {\n            for(int k=1;k<n;k++)\n            {\n                if(j==a[i]&&k==b[i])\n                {\n                    c[i]=j;\n                }\n                if(j==b[i]&&k==a[i])\n                {\n                    c[i]=k;\n                }\n            }\n        }\n        cout<<a[i]<<\" \"<<b[i]<<\" \"<<c[i]<<endl;\n        for(int j=1;j<n;j++)\n        {\n            if(j!=a[i]&&j!=b[i]&&j!=c[i])\n            {\n                a[i+1]=j;\n                break;\n            }\n        }\n    }\n    cout<<a[n-1]<<endl;\n    return 0;\n}\n```", "import sys\n\nn = int(sys.stdin.readline().strip())\n\nedges = []\nfor i in range(n - 1):\n    edges.append(list(map(int, sys.stdin.readline().strip().split())))\n\nans = 0\nvisited = [False] * (n + 1)\n\n\ndef dfs(node):\n    visited[node] = True\n    for i in range(len(edges)):\n        if edges[i][0] == node and not visited[edges[i][1]]:\n            ans += dfs(edges[i][1])\n        elif edges[i][1] == node and not visited[edges[i][0]]:\n            ans += dfs(edges[i][0])\n    return 1\n\n\ndfs(1)\n\nprint(ans)\n\nfor i in range(len(edges)):\n    if edges[i][0] == 1:\n        print(edges[i][1], edges[i][2], edges[i][2])\n    elif edges[i][1] == 1:\n        print(edges[i][0], edges[i][2], edges[i][2])\n    else:\n        print(edges[i][0], edges[i][1], edges[i][2])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\n\n-----Input-----\n\n5\n1 2\n1 3\n2 4\n2 5\n\n-----Output-----\n\n9\n3 5 5\n4 3 3\n4 1 1\n4 2 2\n\n-----Constraints-----\n\n1 \u2264 n \u2264 2\u00b710^5\n\n-----Input-----\n\n5\n1 2\n1 3\n2 4\n2 5\n\n-----Output-----\n\n9\n3 5 5\n4 3 3\n4 1 1\n4 2 2\n\n-----Constraints-----\n\n1 \u2264 n \u2264 2\u00b710^5", "\n\n\"\"\""], "rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "train rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "time": [28.238096237182617, 57.5896577835083, 80.20357942581177, 99.594881772995, 128.350435256958, 140.95111727714539, 162.74001502990723], "sample times": 7}