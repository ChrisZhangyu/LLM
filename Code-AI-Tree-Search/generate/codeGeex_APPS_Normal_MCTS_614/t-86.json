{"codes": ["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "class Solution(object):\n    def firstWillWin(self, xp, yp, xv, yv):\n        \"\"\"\n        :type xp: int\n        :type yp: int\n        :type xv: int\n        :type yv: int\n        :rtype: str\n        \"\"\"\n        return \"Polycarp\" if xp + yp > xv + yv else \"Vasiliy\"", "import sys\n\nx_p, y_p, x_v, y_v = map(int, sys.stdin.readline().split())\n\nif x_p > x_v:\n    print(\"Polycarp\")\nelif x_p < x_v:\n    print(\"Vasiliy\")\nelif y_p > y_v:\n    print(\"Polycarp\")\nelif y_p < y_v:\n    print(\"Vasiliy\")", "\nimport sys\n\nx_p, y_p, x_v, y_v = map(int, sys.stdin.readline().split())\n\nif x_p > x_v:\n    print(\"Polycarp\")\nelif x_p < x_v:\n    print(\"Vasiliy\")\nelif y_p > y_v:\n    print(\"Polycarp\")\nelif y_p < y_v:\n    print(\"Vasiliy\")", "\nclass Pawn:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return f\"Pawn(x={self.x}, y={self.y})\"\n\n    def __str__(self):\n        return f\"Pawn(x={self.x}, y={self.y})\"\n\n    def __eq__(self, other):\n        return self.x == other.x and self.y == other.y\n\n    def __ne__(self, other):\n        return not self.__eq__(other)\n\n    def __hash__(self):\n        return hash((self.x, self.y))\n\n    def __lt__(self, other):\n        return (self.x, self.y) < (other.x, other.y)\n\n    def __le__(self, other):\n        return (self.x, self.y) <= (other.x, other.y)\n\n    def __gt__(self, other):\n        return (self.x, self.y) > (other.x, other.y)\n\n    def __ge__(self, other):\n        return (self.x, self.y) >= (other.x, other.y)\n\n    def __add__(self, other):\n        return Pawn(self.x + other.x, self.y + other.y)\n\n    def __sub__(self, other):\n        return Pawn(self.x - other.x, self.y - other.y)\n\n    def __mul__(self, other):\n        return Pawn(self.x * other.x, self.y * other.y)\n\n    def __truediv__(self, other):\n        return Pawn(self.x / other.x, self.y / other.y)\n\n    def __floordiv__(self, other):\n        return Pawn(self.x // other.x, self.y // other.y)\n\n    def __mod__(self, other):\n        return Pawn(self.x % other.x, self.y % other.y)\n\n    def __pow__(self, other):\n        return Pawn", "class Pawn(object):\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def move(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return \"Pawn(%d, %d)\" % (self.x, self.y)\n\n\nclass Game(object):\n    def __init__(self, pawn1, pawn2):\n        self.pawn1 = pawn1\n        self.pawn2 = pawn2\n\n    def play(self):\n        while True:\n            if self.pawn1.x == 0 and self.pawn1.y == 0:\n                return \"Polycarp\"\n            if self.pawn2.x == 0 and self.pawn2.y == 0:\n                return \"Vasiliy\"\n            self.pawn1.move(self.pawn1.x - 1, self.pawn1.y)\n            self.pawn2.move(self.pawn2.x - 1, self.pawn2.y)\n            self.pawn1.move(self.pawn1.x, self.pawn1.y - 1)\n            self.pawn2.move(self.pawn2.x, self.pawn2.y - 1)\n\n\nif __name__ == \"__main__\":\n    pawn1 = Pawn(int(input()), int(input()))\n    pawn2 = Pawn(int(input()), int(input()))\n    game = Game(pawn1, pawn2)\n    print(game.play())\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"], "rewards": [0.0, 0.0, 0.18867924528301888, 0.18867924528301888, 0.0, 0.0], "train rewards": [0.0, 0.0, 0.25, 0.25, 0.0, 0.0], "time": [27.57593035697937, 35.22910761833191, 49.22362279891968, 63.42409539222717, 91.78065180778503, 120.15353608131409], "sample times": 6}