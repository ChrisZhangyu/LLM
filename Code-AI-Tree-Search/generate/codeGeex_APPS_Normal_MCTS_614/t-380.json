{"codes": ["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```", "import sys\n\nx1, y1 = map(int, sys.stdin.readline().split())\nx2, y2 = map(int, sys.stdin.readline().split())\nx3, y3 = map(int, sys.stdin.readline().split())\n\nx1, y1, x2, y2, x3, y3 = sorted([x1, y1, x2, y2, x3, y3])\n\nif x1 == x2 == x3:\n    print(1)\nelif x1 == x2:\n    print(2)\nelif x1 == x3:\n    print(2)\nelif y1 == y2 == y3:\n    print(1)\nelif y1 == y2:\n    print(2)\nelif y1 == y3:\n    print(2)\nelse:\n    print(3)", "import math\nimport sys\n\nx1, y1 = map(int, sys.stdin.readline().split())\nx2, y2 = map(int, sys.stdin.readline().split())\nx3, y3 = map(int, sys.stdin.readline().split())\n\nx1, x2, x3 = sorted([x1, x2, x3])\ny1, y2, y3 = sorted([y1, y2, y3])\n\nif x1 == x2 == x3:\n    if y1 == y2 == y3:\n        print(0)\n    else:\n        print(1)\nelif y1 == y2 == y3:\n    print(1)\nelse:\n    print(2)", "\nimport sys\n\nx1, y1 = map(int, sys.stdin.readline().split())\nx2, y2 = map(int, sys.stdin.readline().split())\nx3, y3 = map(int, sys.stdin.readline().split())\n\nx1, y1, x2, y2, x3, y3 = sorted([x1, y1, x2, y2, x3, y3])\n\nif x1 == x2 and y1 == y2:\n    print(1)\n    sys.exit(0)\n\nif x1 == x3 and y1 == y3:\n    print(1)\n    sys.exit(0)\n\nif x2 == x3 and y2 == y3:\n    print(1)\n    sys.exit(0)\n\nif x1 == x2:\n    print(2)\n    sys.exit(0)\n\nif x1 == x3:\n    print(2)\n    sys.exit(0)\n\nif x2 == x3:\n    print(2)\n    sys.exit(0)\n\nif y1 == y2:\n    print(2)\n    sys.exit(0)\n\nif y1 == y3:\n    print(2)\n    sys.exit(0)\n\nif y2 == y3:\n    print(2)\n    sys.exit(0)\n\nif x1 == x2 and y1 == y3:\n    print(3)\n    sys.exit(0)\n\nif x1 == x3 and y1 == y2:\n    print(3)\n    sys.exit(0)\n\nif x2 == x1 and y2 == y3:\n    print(3)\n    sys.exit(0)\n\nif x2 == x3 and y2 == y1:\n    print(3)\n    sys.exit(0)\n\nif x3 == x1 and y3 == y2:\n    print(3)\n    sys.exit(0)\n\nif x3 == x2 and y3 == y1:\n    print(3)\n    sys.exit(0)\n\nif y1 == y2 and x1 == x3:\n    print(4)\n    sys.exit(0)\n\nif y1 == y3 and x1 == x2:\n    print(4)\n    sys.exit(0)\n\nif y2 == y1 and x2 == x3:\n    print(4)\n    sys.exit(0)\n\nif y2 == y3 and x2 == x1:\n    print(4)\n    sys.exit(0)\n\nif y3 == y1 and x3 == x2:\n    print(4)\n    sys.exit(0)\n\nif y3 == y2 and x3 == x1:\n    print(4)\n    sys.exit(0)", "#include<bits/stdc++.h>\nusing namespace std;\nint main()\n{\n    int x1,y1,x2,y2,x3,y3;\n    cin>>x1>>y1;\n    cin>>x2>>y2;\n    cin>>x3>>y3;\n    if(x1==x2&&y1==y2)\n    {\n        cout<<1;\n        return 0;\n    }\n    if(x1==x3&&y1==y3)\n    {\n        cout<<1;\n        return 0;\n    }\n    if(x2==x3&&y2==y3)\n    {\n        cout<<1;\n        return 0;\n    }\n    if(x1==x2&&y1==y3)\n    {\n        cout<<2;\n        return 0;\n    }\n    if(x1==x3&&y1==y2)\n    {\n        cout<<2;\n        return 0;\n    }\n    if(x2==x3&&y2==y1)\n    {\n        cout<<2;\n        return 0;\n    }\n    if(x1==x2&&y1==y2)\n    {\n        cout<<3;\n        return 0;\n    }\n    if(x1==x3&&y1==y3)\n    {\n        cout<<3;\n        return 0;\n    }\n    if(x2==x3&&y2==y3)\n    {\n        cout<<3;\n        return 0;\n    }\n    if(x1==x2&&y1==y3)\n    {\n        cout<<4;\n        return 0;\n    }\n    if(x1==x3&&y1==y2)\n    {\n        cout<<4;\n        return 0;\n    }\n    if(x2==x3&&y2==y1)\n    {\n        cout<<4;\n        return 0;\n    }\n    cout<<5;\n    return 0;\n}", "import sys\n\n\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __str__(self):\n        return \"(\" + str(self.x) + \", \" + str(self.y) + \")\"\n\n    def __repr__(self):\n        return \"(\" + str(self.x) + \", \" + str(self.y) + \")\"\n\n    def __eq__(self, other):\n        return self.x == other.x and self.y == other.y\n\n    def __hash__(self):\n        return hash((self.x, self.y))\n\n\nclass Line:\n    def __init__(self, p1, p2):\n        self.p1 = p1\n        self.p2 = p2\n\n    def __str__(self):\n        return \"(\" + str(self.p1) + \", \" + str(self.p2) + \")\"\n\n    def __repr__(self):\n        return \"(\" + str(self.p1) + \", \" + str(self.p2) + \")\"\n\n    def __eq__(self, other):\n        return self.p1 == other.p1 and self.p2 == other.p2\n\n    def __hash__(self):\n        return hash((self.p1, self.p2))\n\n\nclass Polyline:\n    def __init__(self, points):\n        self.points = points\n\n    def __str__(self):\n        return str(self.points)\n\n    def __repr__(self):\n        return str(self.points)\n\n    def __eq__(self, other):\n        return set(self.points) == set(other.points)\n\n    def __hash__(self):\n        return hash(tuple(self.points))\n\n\ndef get_line(p1, p2):\n    if p1.x == p2.x:\n        return Line(Point(p1.x, 0), Point(p2.x, 0))\n    elif p1.y == p2.y:\n        return Line(Point(0, p1.y), Point(0, p2.y))\n    else:\n        k = (p2.y - p1.y) / (p2.x - p1.x)\n        b = p1.y - k * p1.x\n        return Line(Point(0, b), Point(1, k + b))\n\n\ndef get_intersection(l1, l2):\n    if l1.p1.x == l1.p2.x:\n        return Point(l1.p1.x, l2.p1.y)\n    elif l2.p1.x == l2.p2.x:\n        return Point(l2.p1.x, l1.p1.y)\n    else:\n        k1 = (l1.p2.y - l1", "import sys\nimport numpy as np\nimport math\n\n\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n\nclass Line:\n    def __init__(self, a, b, c):\n        self.a = a\n        self.b = b\n        self.c = c\n\n\nclass Polyline:\n    def __init__(self):\n        self.points = []\n        self.lines = []\n\n    def add_point(self, x, y):\n        self.points.append(Point(x, y))\n\n    def add_line(self, a, b, c):\n        self.lines.append(Line(a, b, c))\n\n    def get_line(self, i):\n        return self.lines[i]\n\n    def get_points(self):\n        return self.points\n\n    def get_lines(self):\n        return self.lines\n\n    def get_length(self):\n        return len(self.lines)\n\n    def get_point(self, i):\n        return self.points[i]\n\n    def get_point_x(self, i):\n        return self.points[i].x\n\n    def get_point_y(self, i):\n        return self.points[i].y\n\n    def get_points_x(self):\n        return [self.points[i].x for i in range(len(self.points))]\n\n    def get_points_y(self):\n        return [self.points[i].y for i in range(len(self.points))]\n\n    def get_points_x_y(self):\n        return [(self.points[i].x, self.points[i].y) for i in range(len(self.points))]\n\n    def get_points_y_x(self):\n        return [(self.points[i].y, self.points[i].x) for i in range(len(self.points))]\n\n    def get_points_x_x(self):\n        return [(self.points[i].x, self.points[i].x) for i in range(len(self.points))]\n\n    def get_points_y_y(self):\n        return [(self.points[i].y, self.points[i].y) for i in range(len(self.points))]\n\n    def get_points_x_y_x(self):\n        return [(self.points[i].x, self.points[i].y, self.points[i].x) for i in range(len(self.points))]\n\n    def get_points_x_y_y(self):\n        return [(self.points[i].x, self.points[i].y, self.points[i].y) for i in range(len(self.points))]\n\n    def get_points_x_x_x(", "import math\n\nx1, y1 = map(int, input().split())\nx2, y2 = map(int, input().split())\nx3, y3 = map(int, input().split())\n\nx1, x2, x3 = sorted([x1, x2, x3])\ny1, y2, y3 = sorted([y1, y2, y3])\n\nif x1 == x2 == x3:\n    if y1 == y2 == y3:\n        print(0)\n    else:\n        print(1)\nelif y1 == y2 == y3:\n    print(1)\nelse:\n    print(2)"], "rewards": [0.0, 0.07407407407407407, 0.9259259259259259, 0.0, 0.0, 0.0, 0.0, 0.9259259259259259], "train rewards": [0.0, 0.7407407407407407, 0.3333333333333333, 0.07407407407407407, 0.0, 0.0, 0.0, 0.3333333333333333], "time": [6.966374397277832, 20.33409833908081, 35.10973525047302, 71.49854826927185, 98.66405034065247, 136.06285953521729, 173.2500011920929, 185.98002290725708], "sample times": 8}