{"codes": ["\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\ncorrect = list(map(int, sys.stdin.readline().split()))\nwrong = list(map(int, sys.stdin.readline().split()))\n\ncorrect.sort()\nwrong.sort(reverse=True)\n\nfor i in range(1, 100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "import sys\n\nn, m = map(int, sys.stdin.readline().split())\na = list(map(int, sys.stdin.readline().split()))\nb = list(map(int, sys.stdin.readline().split()))\n\na.sort(reverse=True)\nb.sort(reverse=True)\n\nif a[0] > b[0]:\n    print(a[0])\nelif a[0] == b[0]:\n    print(-1)\nelse:\n    print(b[0])\n\n-----Input-----\n\nThe first line contains two integers n, m (1 \u2264 n, m \u2264 100). The second line contains n space-separated positive integers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 100) \u2014 the running time of each of the n correct solutions in seconds. The third line contains m space-separated positive integers b_1, b_2, ..., b_{m} (1 \u2264 b_{i} \u2264 100) \u2014 the running time of each of m wrong solutions in seconds. \n\n\n-----Output-----\n\nIf there is a valid TL value, print it. Otherwise, print -1.\n\n\n-----Examples-----\nInput\n3 6\n4 5 2\n8 9 6 10 7 11\n\nOutput\n5\nInput\n3 1\n3 4 5\n6\n\nOutput\n-1\nUse Standard Input format\n\"\"\"", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nint main() {\n    int n, m;\n    cin >> n >> m;\n    vector<int> correct(n), wrong(m);\n    for (int i = 0; i < n; ++i) {\n        cin >> correct[i];\n    }\n    for (int i = 0; i < m; ++i) {\n        cin >> wrong[i];\n    }\n    sort(correct.begin(), correct.end());\n    sort(wrong.begin(), wrong.end());\n    for (int i = 0; i < m; ++i) {\n        if (wrong[i] > correct[n - 1]) {\n            cout << -1 << endl;\n            return 0;\n        }\n    }\n    for (int i = 0; i < n; ++i) {\n        if (correct[i] > wrong[m - 1]) {\n            cout << correct[i] << endl;\n            return 0;\n        }\n    }\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < m; ++j) {\n            if (correct[i] <= wrong[j]) {\n                break;\n            }\n            if (j == m - 1) {\n                cout << correct[i] << endl;\n                return 0;\n            }\n        }\n    }\n    cout << -1 << endl;\n    return 0;\n}\n\n\"\"\"", "\ndef solution(n, m, a, b):\n    a.sort()\n    b.sort(reverse=True)\n    for i in range(m):\n        if b[i] > a[0]:\n            return -1\n    for i in range(n):\n        if a[i] > b[m-1]:\n            return a[i]\n    return a[n-1]\n\nn, m = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nprint(solution(n, m, a, b))\n\n\"\"\"\n\n\ndef solution(n, m, a, b):\n    a.sort()\n    b.sort(reverse=True)\n    for i in range(m):\n        if b[i] > a[0]:\n            return -1\n    for i in range(n):\n        if a[i] > b[m - 1]:\n            return a[i]\n    return a[n - 1]\n\n\nn, m = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nprint(solution(n, m, a, b))", "import math\n\nn, m = [int(x) for x in input().split()]\ncorrect = [int(x) for x in input().split()]\nwrong = [int(x) for x in input().split()]\n\ncorrect.sort(reverse=True)\nwrong.sort(reverse=True)\n\nfor i in range(len(correct)):\n    correct[i] = correct[i] - 1\n\nfor i in range(len(wrong)):\n    wrong[i] = wrong[i] - 1\n\nfor i in range(len(correct)):\n    correct[i] = math.ceil(correct[i] / 2)\n\nfor i in range(len(wrong)):\n    wrong[i] = math.ceil(wrong[i] / 2)\n\ncorrect.sort(reverse=True)\nwrong.sort(reverse=True)\n\nfor i in range(len(correct)):\n    correct[i] = correct[i] * 2\n\nfor i in range(len(wrong)):\n    wrong[i] = wrong[i] * 2\n\nfor i in range(len(correct)):\n    correct[i] = correct[i] + 1\n\nfor i in range(len(wrong)):\n    wrong[i] = wrong[i] + 1\n\ncorrect.sort(reverse=True)\nwrong.sort(reverse=True)\n\nfor i in range(len(correct)):\n    correct[i] = correct[i] - 1\n\nfor i in range(len(wrong)):\n    wrong[i] = wrong[i] - 1\n\nfor i in range(len(correct)):\n    correct[i] = math.ceil(correct[i] / 2)\n\nfor i in range(len(wrong)):\n    wrong[i] = math.ceil(wrong[i] / 2)\n\ncorrect.sort(reverse=True)\nwrong.sort(reverse=True)\n\nfor i in range(len(correct)):\n    correct[i]", "#!/usr/bin/env python3\n\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\na = list(map(int, sys.stdin.readline().split()))\nb = list(map(int, sys.stdin.readline().split()))\n\na.sort()\nb.sort(reverse=True)\n\nif a[0] > b[0]:\n    print(-1)\nelse:\n    for i in range(1, n):\n        if a[i] > b[i]:\n            print(a[i-1])\n            break\n    else:\n        print(a[n-1])\n\n\n-----Input-----\n\nThe first line contains two integers n, m (1 \u2264 n, m \u2264 100). The second line contains n space-separated positive integers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 100) \u2014 the running time of each of the n correct solutions in seconds. The third line contains m space-separated positive integers b_1, b_2, ..., b_{m} (1 \u2264 b_{i} \u2264 100) \u2014 the running time of each of m wrong solutions in seconds. \n\n\n-----Output-----\n\nIf there is a valid TL value, print it. Otherwise, print -1.\n\n\n-----Examples-----\nInput\n3 6\n4 5 2\n8 9 6 10 7 11\n\nOutput\n5\nInput\n3 1\n3 4 5\n6\n\nOutput\n-1\nUse Standard Input format", "\ndef get_min_tl(correct, wrong):\n    correct.sort()\n    wrong.sort()\n    min_tl = 0\n    for i in range(len(correct)):\n        if correct[i] > min_tl:\n            min_tl = correct[i]\n    for i in range(len(wrong)):\n        if wrong[i] > min_tl:\n            min_tl = wrong[i]\n    return min_tl\n\n\ndef get_max_tl(correct, wrong):\n    correct.sort(reverse=True)\n    wrong.sort(reverse=True)\n    max_tl = 0\n    for i in range(len(correct)):\n        if correct[i] < max_tl:\n            max_tl = correct[i]\n    for i in range(len(wrong)):\n        if wrong[i] < max_tl:\n            max_tl = wrong[i]\n    return max_tl\n\n\nn, m = map(int, input().split())\ncorrect = list(map(int, input().split()))\nwrong = list(map(int, input().split()))\n\nmin_tl = get_min_tl(correct, wrong)\nmax_tl = get_max_tl(correct, wrong)\n\nwhile min_tl < max_tl:\n    mid_tl = (min_tl + max_tl) // 2\n    if check_tl(correct, wrong, mid_tl):\n        max_tl = mid_tl\n    else:\n        min_tl = mid_tl + 1\n\nif check_tl(correct, wrong, max_tl):\n    print(max_tl)\nelse:\n    print(-1)\n\n\ndef check_tl(correct, wrong, tl):\n    for i in range(len(correct)):\n        if correct[i] > tl:\n            return False\n    for i in range(len(wrong)):\n        if wrong[i] < tl:\n            "], "rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "train rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "time": [26.49548101425171, 47.13784098625183, 73.75258326530457, 100.09962058067322, 117.23063254356384, 144.0421268939972, 166.35173273086548, 192.91871690750122], "sample times": 8}