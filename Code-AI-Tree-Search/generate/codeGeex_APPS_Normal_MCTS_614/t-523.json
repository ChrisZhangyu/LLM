{"codes": ["\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\n\nstrings = []\n\nfor i in range(n):\n    strings.append(sys.stdin.readline().strip())\n\n\ndef is_palindrome(s):\n    return s == s[::-1]\n\n\ndef get_longest_palindrome(strings):\n    max_length = 0\n    max_palindrome = \"\"\n\n    for i in range(len(strings)):\n        for j in range(i + 1, len(strings) + 1):\n            s = \"\".join(strings[i:j])\n            if is_palindrome(s) and len(s) > max_length:\n                max_length = len(s)\n                max_palindrome = s\n\n    return max_length, max_palindrome\n\n\nlength, palindrome = get_longest_palindrome(strings)\n\nprint(length)\nprint(palindrome)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import sys\n\nn, m = map(int, sys.stdin.readline().split())\n\nstrings = []\nfor i in range(n):\n    strings.append(sys.stdin.readline().strip())\n\n\ndef is_palindrome(s):\n    return s == s[::-1]\n\n\ndef get_longest_palindrome(strings):\n    longest_palindrome = \"\"\n    for string in strings:\n        if is_palindrome(string):\n            if len(string) > len(longest_palindrome):\n                longest_palindrome = string\n        else:\n            for i in range(1, len(string)):\n                if is_palindrome(string[:i]):\n                    if len(string[:i]) > len(longest_palindrome):\n                        longest_palindrome = string[:i]\n                if is_palindrome(string[i:]):\n                    if len(string[i:]) > len(longest_palindrome):\n                        longest_palindrome = string[i:]\n    return longest_palindrome\n\n\nlongest_palindrome = get_longest_palindrome(strings)\n\nprint(len(longest_palindrome))\nprint(longest_palindrome)", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "def isPalindrome(s):\n    return s == s[::-1]\n\nn, m = map(int, input().split())\ns = []\nfor i in range(n):\n    s.append(input())\n\nfor i in range(n):\n    for j in range(n):\n        if isPalindrome(s[i] + s[j]):\n            print(len(s[i] + s[j]))\n            print(s[i] + s[j])", "\ndef is_palindrome(s):\n    return s == s[::-1]\n\ndef longest_palindrome(strings):\n    max_length = 0\n    max_palindrome = \"\"\n    for s in strings:\n        if is_palindrome(s):\n            if len(s) > max_length:\n                max_length = len(s)\n                max_palindrome = s\n    return max_length, max_palindrome\n\nn, m = map(int, input().split())\nstrings = []\nfor _ in range(n):\n    strings.append(input())\n\nprint(longest_palindrome(strings)[1])\nprint(longest_palindrome(strings)[0])\n\"\"\"\n\n\ndef is_palindrome(s):\n    return s == s[::-1]\n\n\ndef longest_palindrome(strings):\n    max_length = 0\n    max_palindrome = \"\"\n    for s in strings:\n        if is_palindrome(s):\n            if len(s) > max_length:\n                max_length = len(s)\n                max_palindrome = s\n    return max_length, max_palindrome\n\n\nn, m = map(int, input().split())\nstrings = []\nfor _ in range(n):\n    strings.append(input())\n\nprint(longest_palindrome(strings)[1])\nprint(longest_palindrome(strings)[0])", "def solution(strings):\n    n = len(strings)\n    m = len(strings[0])\n    for i in range(n):\n        strings[i] = list(strings[i])\n        for j in range(m//2):\n            if strings[i][j] != strings[i][m-j-1]:\n                strings[i][j], strings[i][m-j-1] = strings[i][m-j-1], strings[i][j]\n        strings[i] = ''.join(strings[i])\n    strings.sort(key=len, reverse=True)\n    for i in range(n):\n        if strings[i] == strings[i][::-1]:\n            return len(strings[i]), strings[i]\n    return 0, ''", "\n\ndef is_palindrome(s):\n    return s == s[::-1]\n\n\ndef longest_palindrome(s):\n    n = len(s)\n    if n == 0:\n        return 0, ''\n    if n == 1:\n        return 1, s\n    if n == 2:\n        if s[0] == s[1]:\n            return 2, s\n        else:\n            return 1, s[0]\n    if n == 3:\n        if s[0] == s[1] and s[1] == s[2]:\n            return 3, s\n        elif s[0] == s[1]:\n            return 2, s[0] + s[1]\n        elif s[1] == s[2]:\n            return 2, s[1] + s[2]\n        else:\n            return 1, s[0]\n    if n == 4:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3]:\n            return 4, s\n        elif s[0] == s[1] and s[1] == s[2]:\n            return 3, s[0] + s[1] + s[2]\n        elif s[1] == s[2] and s[2] == s[3]:\n            return 3, s[1] + s[2] + s[3]\n        elif s[0] == s[1]:\n            return 2, s[0] + s[1] + s[2]\n        elif s[1] == s[2]:\n            return 2, s[1] + s[2] + s[3]\n        elif s[2] == s[3]:\n            return 2, s[2] + s[3]\n        else:\n            return 1, s["], "rewards": [0.13043478260869565, 0.08695652173913043, 0.0, 0.0, 0.0, 0.0, 0.0], "train rewards": [0.22727272727272727, 0.045454545454545456, 0.0, 0.0, 0.0, 0.0, 0.0], "time": [24.71053910255432, 47.50461173057556, 72.86785411834717, 82.02769374847412, 102.61343193054199, 118.60751843452454, 143.90016555786133], "sample times": 7}