{"codes": ["\nclass Solution(object):\n    def findSolution(self, n, a, b):\n        \"\"\"\n        :type n: int\n        :type a: int\n        :type b: int\n        :rtype: List[List[int]]\n        \"\"\"\n        if n == 1:\n            if a == 1 and b == 1:\n                return [[1]]\n            else:\n                return []\n        if a == 1 and b == 1:\n            return [[0] * n for _ in range(n)]\n        if a == n and b == 1:\n            return [[1] * n for _ in range(n)]\n        if a == 1 and b == n:\n            return [[0] * n for _ in range(n)]\n        if a == n and b == n:\n            return [[1] * n for _ in range(n)]\n        if a == n - 1 and b == 1:\n            return [[0] * n for _ in range(n)]\n        if a == 1 and b == n - 1:\n            return [[0] * n for _ in range(n)]\n        if a == n - 1 and b == n:\n            return [[1] * n for _ in range(n)]\n        if a == n and b == n - 1:\n            return [[1] * n for _ in range(n)]\n        if a == n - 2 and b == 1:\n            return [[0] * n for _ in range(n)]\n        if a == 1 and b == n - 2:\n            return [[0] * n for _ in range(n)]\n        if a == n - 2 and b == n:\n            return [[1] * n for _ in range(n)]", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```", "import numpy as np\nn,a,b=map(int,input().split())\nif a+b!=n:\n    print(\"NO\")\nelse:\n    print(\"YES\")\n    arr=np.zeros((n,n),dtype=int)\n    for i in range(n):\n        for j in range(n):\n            if i==j:\n                arr[i][j]=0\n            else:\n                arr[i][j]=1\n    print(arr)", "\nimport math\nimport os\nimport random\nimport re\nimport sys\n\ndef isSymmetric(a):\n    n = len(a)\n    for i in range(n):\n        for j in range(n):\n            if a[i][j] != a[j][i]:\n                return False\n    return True\n\ndef isConnected(a):\n    n = len(a)\n    for i in range(n):\n        for j in range(n):\n            if a[i][j] == 1:\n                for k in range(n):\n                    if a[i][k] == 1 and a[k][j] == 0:\n                        return False\n    return True\n\ndef isComplement(a, b):\n    n = len(a)\n    for i in range(n):\n        for j in range(n):\n            if a[i][j] != b[i][j]:\n                return False\n    return True\n\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input().strip())\n\n    a = []\n\n    for _ in range(n):\n        a.append(list(map(int, input().rstrip().split())))\n\n    b = []\n\n    for _ in range(n):\n        b.append(list(map(int, input().rstrip().split())))\n\n    if isSymmetric(a) and isConnected(a) and isComplement(a, b):\n        fptr.write('YES\\n')\n        for i in range(n):\n            for j in range(n):\n                if a[i][j] ==", "#include<bits/stdc++.h>\nusing namespace std;\nint main()\n{\n\tint n,a,b;\n\tcin>>n>>a>>b;\n\tif(a+b!=n)\n\t{\n\t\tcout<<\"NO\";\n\t\treturn 0;\n\t}\n\tif(a==b)\n\t{\n\t\tfor(int i=0;i<n;i++)\n\t\t{\n\t\t\tfor(int j=0;j<n;j++)\n\t\t\t{\n\t\t\t\tif(i==j)\n\t\t\t\t{\n\t\t\t\t\tcout<<0;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tcout<<1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcout<<endl;\n\t\t}\n\t\treturn 0;\n\t}\n\tif(a>b)\n\t{\n\t\tfor(int i=0;i<n;i++)\n\t\t{\n\t\t\tfor(int j=0;j<n;j++)\n\t\t\t{\n\t\t\t\tif(i==j)\n\t\t\t\t{\n\t\t\t\t\tcout<<0;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tcout<<1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcout<<endl;\n\t\t}\n\t\treturn 0;\n\t}\n\tfor(int i=0;i<n;i++)\n\t{\n\t\tfor(int j=0;j<n;j++)\n\t\t{\n\t\t\tif(i==j)\n\t\t\t{\n\t", "import math\nimport sys\n\nn, a, b = map(int, input().split())\nmatrix = [[0 for i in range(n)] for j in range(n)]\nfor i in range(n):\n    for j in range(n):\n        if i == j:\n            matrix[i][j] = 0\n        elif i > j:\n            matrix[i][j] = matrix[j][i]\n        else:\n            matrix[i][j] = 1\n\nfor i in range(n):\n    for j in range(n):\n        sys.stdout.write(str(matrix[i][j]))\n    print()", "import sys\n\nn, a, b = map(int, sys.stdin.readline().split())\n\nmatrix = [[0 for i in range(n)] for j in range(n)]\n\nfor i in range(n):\n    for j in range(n):\n        if i == j:\n            matrix[i][j] = 0\n        elif i > j:\n            matrix[i][j] = matrix[j][i]\n        else:\n            matrix[i][j] = 1\n\nfor i in range(n):\n    for j in range(n):\n        print(matrix[i][j], end=\"\")\n    print()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\nimport sys\n\nn, a, b = map(int, sys.stdin.readline().split())\nmatrix = [[0 for i in range(n)] for j in range(n)]\n\nfor i in range(n):\n    for j in range(n):\n        if i == j:\n            matrix[i][j] = 0\n        elif i > j:\n            matrix[i][j] = matrix[j][i]\n        else:\n            matrix[i][j] = 1\n\nfor i in range(n):\n    for j in range(n):\n        print(matrix[i][j], end=\"\")\n    print()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"], "rewards": [0.0, 0.0, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0], "train rewards": [0.0, 0.0, 0.25, 0.0, 0.0, 0.0, 0.0, 0.0], "time": [22.03470253944397, 28.05554461479187, 51.212239265441895, 74.13224959373474, 97.44846224784851, 111.38931632041931, 134.05035185813904, 156.78444838523865], "sample times": 8}