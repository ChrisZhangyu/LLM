{"codes": ["\nimport sys\n\nn = int(sys.stdin.readline().strip())\na = list(map(int, sys.stdin.readline().strip().split()))\n\nd = 0\n\nfor i in range(n):\n    if a[i] > 0:\n        d += 1\n\nif d >= n // 2:\n    print(d)\nelse:\n    print(0)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import math\nn = int(input())\na = list(map(int, input().split()))\ncnt = 0\nfor i in range(n):\n    if a[i] > 0:\n        cnt += 1\nif cnt >= math.ceil(n/2):\n    for i in range(n):\n        if a[i] > 0:\n            print(a[i])\nelse:\n    print(0)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import sys\n\nn = int(sys.stdin.readline().strip())\na = list(map(int, sys.stdin.readline().strip().split()))\n\nd = 0\n\nfor i in range(n):\n    if a[i] > 0:\n        d += 1\n\nif d >= n // 2:\n    print(d)\nelse:\n    print(0)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\ndef lcm(a, b):\n    return (a * b) / gcd(a, b)\n\nn = int(input())\na = list(map(int, input().split()))\nd = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        if a[i] > 0 and a[j] > 0:\n            d = lcm(d, abs(a[i] - a[j]))\nprint(d)", "#include<bits/stdc++.h>\nusing namespace std;\nint main()\n{\n    int n;\n    cin>>n;\n    int a[n];\n    for(int i=0;i<n;i++)\n    {\n        cin>>a[i];\n    }\n    int sum=0;\n    for(int i=0;i<n;i++)\n    {\n        if(a[i]>0)\n        {\n            sum++;\n        }\n    }\n    if(sum>=n/2)\n    {\n        cout<<0;\n    }\n    else\n    {\n        for(int i=0;i<n;i++)\n        {\n            if(a[i]>0)\n            {\n                a[i]=a[i]/2;\n            }\n        }\n        int sum1=0;\n        for(int i=0;i<n;i++)\n        {\n            if(a[i]>0)\n            {\n                sum1++;\n            }\n        }\n        if(sum1>=n/2)\n        {\n            cout<<2;\n        }\n        else\n        {\n            for(int i=0;i<n;i++)\n            {\n                if(a[i]>0)\n                {\n                    a[i]=a[i]/3;\n                }\n            }\n            int sum2=0;\n            for(int i=0;i<n;i++)\n            {\n                if(a[i]>0)\n                {\n                    sum2++;\n                }\n            }\n            if(sum2>=n/2)\n            {\n                cout<<3;\n            }\n            else\n            {\n                for(int i", "\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n\nif __name__ == '__main__':\n    n = int(input())\n\n    arr = list(map(int, input().rstrip().split()))\n\n    count = 0\n\n    for i in range(n):\n        if arr[i] > 0:\n            count += 1\n\n    if count >= math.ceil(n/2):\n        print(0)\n    else:\n        for i in range(n):\n            if arr[i] > 0:\n                arr[i] = math.ceil(arr[i]/2)\n\n        for i in range(n):\n            if arr[i] > 0:\n                count += 1\n\n        if count >= math.ceil(n/2):\n            print(2)\n        else:\n            for i in range(n):\n                if arr[i] > 0:\n                    arr[i] = math.ceil(arr[i]/3)\n\n            for i in range(n):\n                if arr[i] > 0:\n                    count += 1\n\n            if count >= math.ceil(n/2):\n                print(3)\n            else:\n                for i in range(n):\n                    if arr[i] > 0:\n                        arr[i] = math.ceil(arr[i]/4)\n\n                for i in range(n):\n                    if arr[i] > 0:\n                        count += 1\n\n                if count >= math.ceil(n/2):\n                    print(4)\n                else:\n                    for i in range(n):\n                        if arr[i] > 0:\n                            arr", "\ndef check(a):\n    n = len(a)\n    pos = 0\n    for i in range(n):\n        if a[i] > 0:\n            pos += 1\n    if pos >= n/2:\n        return True\n    else:\n        return False\n\n\ndef find_d(a):\n    n = len(a)\n    for i in range(n):\n        if check(a):\n            return a[i]\n    return 0\n\n\nif __name__ == '__main__':\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(find_d(a))"], "rewards": [0.37735849056603776, 0.0, 0.6415094339622641, 0.37735849056603776, 0.32075471698113206, 0.0, 0.0, 0.0], "train rewards": [0.2641509433962264, 0.0, 0.3018867924528302, 0.2641509433962264, 0.1509433962264151, 0.0, 0.0, 0.0], "time": [23.056442737579346, 27.92211079597473, 51.6196346282959, 75.6324827671051, 88.87917995452881, 112.90052199363708, 136.7261667251587, 147.63644528388977], "sample times": 8}