{"codes": ["\n#!/usr/bin/env python3\n\nimport sys\n\nn = int(sys.stdin.readline())\ncosts = []\nfor i in range(n):\n    s, c = sys.stdin.readline().split()\n    costs.append((s, int(c)))\ncosts.sort(key=lambda x: x[1], reverse=True)\n\ndp = [0] * (n + 1)\nfor i in range(n):\n    for j in range(i + 1, n + 1):\n        dp[j] = min(dp[j], dp[i] + costs[i][1] * (j - i) + costs[j - 1][1] * (j - i))\n\nprint(dp[n])", "#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nconst int maxn=100005;\nll n,a[maxn],b[maxn],c[maxn];\nll dp[maxn][maxn];\nint main()\n{\n    cin>>n;\n    for(int i=1;i<=n;i++)\n    {\n        cin>>a[i]>>c[i];\n        b[i]=c[i];\n    }\n    for(int i=1;i<=n;i++)\n    {\n        for(int j=1;j<=n;j++)\n        {\n            dp[i][j]=1e18;\n        }\n    }\n    for(int i=1;i<=n;i++)\n    {\n        dp[i][i]=c[i];\n    }\n    for(int i=1;i<=n;i++)\n    {\n        for(int j=i+1;j<=n;j++)\n        {\n            for(int k=i;k<j;k++)\n            {\n                dp[i][j]=min(dp[i][j],dp[i][k]+dp[k+1][j]+b[i]*(k-i+1)*(j-k));\n            }\n        }\n    }\n    if(dp[1][n]==1e18)\n    {\n        cout<<-1;\n    }\n    else\n    {\n        cout<<dp[1][n];\n    }\n    return 0;\n}\n```", "import sys\n\nn = int(sys.stdin.readline().strip())\n\nstrings = []\ncosts = []\n\nfor i in range(n):\n    strings.append(sys.stdin.readline().strip().split()[0])\n    costs.append(int(sys.stdin.readline().strip().split()[1]))\n\nstrings.sort(key=lambda x: len(x), reverse=True)\ncosts.sort(key=lambda x: x, reverse=True)\n\ndp = [0] * (n + 1)\n\nfor i in range(1, n + 1):\n    for j in range(i):\n        if strings[j] == strings[i - 1][::-1]:\n            dp[i] = max(dp[i], dp[j] + costs[i - 1] * (i - j))\n\nif dp[n] == 0:\n    print(-1)\nelse:\n    print(dp[n])", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\nimport sys\n\nn = int(sys.stdin.readline().strip())\n\nstrings = []\ncosts = []\n\nfor i in range(n):\n    strings.append(sys.stdin.readline().strip().split()[0])\n    costs.append(int(sys.stdin.readline().strip().split()[1]))\n\ndp = [0] * (n + 1)\n\nfor i in range(1, n + 1):\n    for j in range(i):\n        if strings[j] == strings[i - 1][::-1]:\n            dp[i] = max(dp[i], dp[j] + costs[i - 1] * (i - j))\n\nif dp[n] == 0:\n    print(-1)\nelse:\n    print(dp[n])", "\n\"\"\"", "#!/usr/bin/env python3\nimport sys\n\nn = int(sys.stdin.readline())\ncosts = []\nfor i in range(n):\n    s, c = sys.stdin.readline().split()\n    costs.append((s, int(c)))\ncosts = sorted(costs, key=lambda x: x[1], reverse=True)\n\ndp = [0] * (n + 1)\nfor i in range(1, n + 1):\n    dp[i] = dp[i - 1] + costs[i - 1][1]\n    for j in range(1, i):\n        dp[i] = min(dp[i], dp[j] + dp[i - j] + costs[i - 1][1] * (i - j))\n\nprint(dp[n] if dp[n] != dp[0] else -1)", "#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nint main()\n{\n    int n;\n    cin >> n;\n    vector<pair<string, int>> v;\n    for (int i = 0; i < n; i++)\n    {\n        string s;\n        int c;\n        cin >> s >> c;\n        v.push_back(make_pair(s, c));\n    }\n    sort(v.begin(), v.end(), [](const pair<string, int> &a, const pair<string, int> &b)\n         {\n             return a.second < b.second;\n         });\n    long long ans = 0;\n    for (int i = 0; i < n; i++)\n    {\n        if (v[i].first == string(v[i].first.rbegin(), v[i].first.rend()))\n        {\n            ans += v[i].second;\n            break;\n        }\n    }\n    for (int i = 0; i < n; i++)\n    {\n        for (int j = i + 1; j < n; j++)\n        {\n            if (v[i].first + v[j].first == string(v[i].first.rbegin(), v[i].first.rend()) + string(v[j].first.rbegin(), v[j].first.rend()))\n            {\n                ans += v[i].second + v[j].second;\n                break;\n            }\n        }\n    }\n    if (ans == 0)\n    {\n        cout << -1;\n    }\n    else\n    {\n        cout << ans;\n    }\n    return 0;\n}\n\n\"\"\"", "\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline\n\nn = int(input())\n\nstrings = []\ncosts = []\n\nfor i in range(n):\n    s, c = input().split()\n    strings.append(s)\n    costs.append(int(c))\n\nstrings.sort(key=lambda x: len(x), reverse=True)\ncosts.sort(reverse=True)\n\ndp = [0] * (n + 1)\n\nfor i in range(n):\n    for j in range(i + 1, n + 1):\n        dp[j] = min(dp[j], dp[j - 1] + costs[i])\n        for k in range(i, j):\n            dp[j] = min(dp[j], dp[k] + costs[i] * (j - k))\n\nprint(dp[n])"], "rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.13333333333333333, 0.0, 0.0], "train rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "time": [10.885016202926636, 32.513185262680054, 49.63444375991821, 79.48574137687683, 95.53311514854431, 108.76245188713074, 122.36731100082397, 146.31946420669556, 159.7701292037964], "sample times": 9}