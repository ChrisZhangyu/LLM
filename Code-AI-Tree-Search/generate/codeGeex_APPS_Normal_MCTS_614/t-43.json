{"codes": ["\nimport math\n\ndef get_angle(v1, v2):\n    x1, y1 = v1\n    x2, y2 = v2\n    angle = math.atan2(y2 - y1, x2 - x1)\n    if angle < 0:\n        angle += 2 * math.pi\n    return angle\n\ndef get_min_angle(v1, v2):\n    angle1 = get_angle(v1, v2)\n    angle2 = get_angle(v2, v1)\n    if angle1 < angle2:\n        return angle1\n    else:\n        return angle2\n\nn = int(input())\nvectors = []\nfor i in range(n):\n    x, y = map(int, input().split())\n    vectors.append((x, y))\n\nmin_angle = math.inf\nmin_indices = None\nfor i in range(n):\n    for j in range(i + 1, n):\n        angle = get_min_angle(vectors[i], vectors[j])\n        if angle < min_angle:\n            min_angle = angle\n            min_indices = (i + 1, j + 1)\n\nprint(*min_indices)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import math\n\ndef get_angle(v1, v2):\n    x1, y1 = v1\n    x2, y2 = v2\n    return math.degrees(math.atan2(y2 - y1, x2 - x1)) % 360\n\nn = int(input())\nvectors = []\nfor i in range(n):\n    x, y = map(int, input().split())\n    vectors.append((x, y))\n\nvectors.sort(key=lambda v: get_angle((0, 0), v))\n\nfor i in range(n - 1):\n    for j in range(i + 1, n):\n        if get_angle(vectors[i], vectors[j]) < 180:\n            print(i + 1, j + 1)\n            break", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "from math import atan2, pi\n\ndef get_angle(v1, v2):\n    x1, y1 = v1\n    x2, y2 = v2\n    dx = x2 - x1\n    dy = y2 - y1\n    if dx == 0:\n        if dy > 0:\n            return pi / 2\n        elif dy < 0:\n            return 3 * pi / 2\n        else:\n            return 0\n    elif dy == 0:\n        if dx > 0:\n            return 0\n        elif dx < 0:\n            return pi\n        else:\n            return 0\n    elif dx > 0 and dy > 0:\n        return atan2(dy, dx)\n    elif dx > 0 and dy < 0:\n        return atan2(dy, dx) + pi\n    elif dx < 0 and dy < 0:\n        return atan2(dy, dx) + 2 * pi\n    elif dx < 0 and dy > 0:\n        return atan2(dy, dx) + 2 * pi\n    else:\n        return 0\n\n\nn = int(input())\nvectors = []\nfor i in range(n):\n    x, y = map(int, input().split())\n    vectors.append((x, y))\n\nmin_angle = float('inf')\nfor i in range(n):\n    for j in range(i + 1, n):\n        angle = get_angle(vectors[i], vectors[j])\n        if angle < min_angle:\n            min_angle = angle\n            min_i = i\n            min_j = j\n\nprint(min_i + 1, min_j + 1)\n\"\"\"\n\n\ndef get_angle(v1, v2):\n    x1, y1 = v1\n    x2, y2 = v2\n    dx = x2 - x1\n    dy = y2 - y1\n    if dx == 0:\n        if dy > 0:\n            return pi / 2\n        elif dy < 0:\n            return 3 * pi / 2\n        else:\n            return 0\n    elif dy == 0:\n        if dx > 0:\n            return 0\n        elif dx < 0:\n            return pi\n        else:\n            return 0\n    elif dx > 0 and dy > 0:\n        return atan2(dy, dx)\n    elif dx > 0 and dy < 0:\n        return atan2(dy, dx) + pi\n    elif dx < 0 and dy < 0:\n        return atan2(dy, dx) + 2 * pi\n    elif dx <", "\nfrom math import atan2, pi\n\nn = int(input())\nvectors = []\nfor i in range(n):\n    x, y = map(int, input().split())\n    vectors.append((x, y))\n\nvectors.sort(key=lambda x: atan2(x[1], x[0]))\nprint(vectors[0][0], vectors[0][1])\nprint(vectors[1][0], vectors[1][1])\nprint(vectors[2][0], vectors[2][1])", "\nimport sys\nimport math\n\ndef get_angle(v1, v2):\n    x1, y1 = v1\n    x2, y2 = v2\n    angle = math.atan2(y2, x2) - math.atan2(y1, x1)\n    if angle < 0:\n        angle += 2 * math.pi\n    return angle\n\nn = int(sys.stdin.readline())\nvectors = []\nfor i in range(n):\n    x, y = map(int, sys.stdin.readline().split())\n    vectors.append((x, y))\n\nmin_angle = 2 * math.pi\nfor i in range(n):\n    for j in range(i + 1, n):\n        angle = get_angle(vectors[i], vectors[j])\n        if angle < min_angle:\n            min_angle = angle\n            min_i = i\n            min_j = j\n\nprint(min_i + 1, min_j + 1)\n\n\"\"\"\n\n\ndef get_angle(v1, v2):\n    x1, y1 = v1\n    x2, y2 = v2\n    angle = math.atan2(y2, x2) - math.atan2(y1, x1)\n    if angle < 0:\n        angle += 2 * math.pi\n    return angle\n\n\nn = int(input())\nvectors = []\nfor i in range(n):\n    x, y = map(int, input().split())\n    vectors.append((x, y))\n\nmin_angle = 2 * math.pi\nfor i in range(n):\n    for j in range(i + 1, n):\n        angle = get_angle(vectors[i], vectors[j])\n        if angle < min_angle:\n            min_angle = angle\n            min_i = i\n            min_j = j\n\nprint(min_i + 1, min_j + 1)", "\n\nimport sys\nimport math\n\nn = int(sys.stdin.readline().strip())\nvectors = []\nfor i in range(n):\n    x, y = map(int, sys.stdin.readline().strip().split())\n    vectors.append((x, y))\n\n\ndef get_angle(v1, v2):\n    x1, y1 = v1\n    x2, y2 = v2\n    angle = math.atan2(y2 - y1, x2 - x1)\n    if angle < 0:\n        angle += 2 * math.pi\n    return angle\n\n\nangles = []\nfor i in range(n - 1):\n    for j in range(i + 1, n):\n        angle = get_angle(vectors[i], vectors[j])\n        angles.append(angle)\n\nmin_angle = min(angles)\n\nfor i in range(n - 1):\n    for j in range(i + 1, n):\n        if get_angle(vectors[i], vectors[j]) == min_angle:\n            print(i + 1, j + 1)"], "rewards": [0.3076923076923077, 0.3384615384615385, 0.0, 0.0, 0.0, 0.0, 0.3230769230769231], "train rewards": [0.24615384615384617, 0.07692307692307693, 0.0, 0.0, 0.0, 0.0, 0.1076923076923077], "time": [35.36910700798035, 48.31997895240784, 83.10071349143982, 117.87353372573853, 128.95638275146484, 155.68629121780396, 172.1055064201355], "sample times": 7}