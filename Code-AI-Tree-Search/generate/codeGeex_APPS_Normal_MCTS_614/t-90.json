{"codes": ["\nimport sys\n\nn, k, S = map(int, sys.stdin.readline().split())\na = list(map(int, sys.stdin.readline().split()))\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\ndef solve(n, k, S):\n    if k == 0:\n        if S == 0:\n            return 1\n        else:\n            return 0\n    if n == 0:\n        if S == 0:\n            return 1\n        else:\n            return 0\n    if n == 1:\n        if S == a[0]:\n            return 1\n        else:\n            return 0\n    if n == 2:\n        if S == a[0] + a[1]:\n            return 1\n        else:\n            return 0\n    if n == 3:\n        if S == a[0] + a[1] + a[2]:\n            return 1\n        else:\n            return 0\n    if n == 4:\n        if S == a[0] + a[1] + a[2] + a[3]:\n            return 1\n        else:\n            return 0\n    if n == 5:\n        if S == a[0] + a[1] + a[2] + a[3] + a[4]:\n            return 1\n        else:\n            return 0\n    if n == 6:\n        if S == a[0] + a[1]", "import sys\n\nn, k, S = map(int, sys.stdin.readline().split())\na = list(map(int, sys.stdin.readline().split()))\ndp = [[0] * (k + 1) for _ in range(n + 1)]\ndp[0][0] = 1\n\nfor i in range(1, n + 1):\n    for j in range(k + 1):\n        dp[i][j] = dp[i - 1][j]\n        if j >= a[i - 1]:\n            dp[i][j] += dp[i - 1][j - a[i - 1]]\n\nprint(dp[n][k])", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nll n,k,s;\nll a[30];\nll dp[30][30];\nint main()\n{\n\tcin>>n>>k>>s;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tcin>>a[i];\n\t}\n\tdp[0][0]=1;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tfor(int j=0;j<=k;j++)\n\t\t{\n\t\t\tdp[i][j]=dp[i-1][j];\n\t\t\tif(j>=1)\n\t\t\t{\n\t\t\t\tdp[i][j]+=dp[i-1][j-1];\n\t\t\t}\n\t\t\tdp[i][j]%=1000000007;\n\t\t}\n\t}\n\tcout<<dp[n][k];\n\treturn 0;\n}\n```", "import math\nn,k,s=map(int,input().split())\na=list(map(int,input().split()))\nd={}\nfor i in range(n):\n    d[a[i]]=d.get(a[i],0)+1\nfor i in d:\n    d[i]=math.factorial(i)\nans=0\nfor i in range(n):\n    for j in range(k+1):\n        ans+=d.get(s-a[i]*j,0)\nprint(ans)", "\ndef factorial(n):\n    if n == 1 or n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nn, k, S = list(map(int, input().split()))\na = list(map(int, input().split()))\ndp = [[0] * (k + 1) for _ in range(n + 1)]\ndp[0][0] = 1\nfor i in range(1, n + 1):\n    for j in range(k + 1):\n        if j == 0:\n            dp[i][j] = dp[i - 1][j]\n        else:\n            dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1] * factorial(a[i - 1])\nprint(dp[n][k])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\ndef get_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * get_factorial(n - 1)\n\n\ndef get_ways(n, k, s):\n    if s == 0:\n        return 1\n    elif n == 0:\n        return 0\n    elif k == 0:\n        return 0\n    elif s < 0:\n        return 0\n    else:\n        return get_ways(n - 1, k, s) + get_ways(n - 1, k - 1, s - get_factorial(n))\n\n\nif __name__ == '__main__':\n    n, k, s = map(int, input().split())\n    print(get_ways(n, k, s))\n\"\"\"\n\n\ndef get_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * get_factorial(n - 1)\n\n\ndef get_ways(n, k, s):\n    if s == 0:\n        return 1\n    elif n == 0:\n        return 0\n    elif k == 0:\n        return 0\n    elif s < 0:\n        return 0\n    else:\n        return get_ways(n - 1, k, s) + get_ways(n - 1, k - 1, s - get_factorial(n))\n\n\nif __name__ == \"__main__\":\n    n, k, s = map(int, input().split())\n    print", "\nimport math\n\nn, k, S = map(int, input().split())\na = list(map(int, input().split()))\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nans = 0\nfor i in range(n):\n    for j in range(k + 1):\n        if factorial(a[i]) * j == S:\n            ans += 1\n\nprint(ans)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"], "rewards": [0.0, 0.29411764705882354, 0.0, 0.0, 0.0, 0.11764705882352941, 0.0, 0.0392156862745098], "train rewards": [0.0, 0.0392156862745098, 0.0, 0.0, 0.0, 0.0196078431372549, 0.0, 0.058823529411764705], "time": [21.166316747665405, 42.8035089969635, 64.95021104812622, 80.96418786048889, 98.66933512687683, 129.52832293510437, 151.65964937210083, 173.54412984848022], "sample times": 8}