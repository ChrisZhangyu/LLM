{"codes": ["\nclass Solution(object):\n    def wallsAndGates(self, rooms):\n        \"\"\"\n        :type rooms: List[List[int]]\n        :rtype: None Do not return anything, modify rooms in-place instead.\n        \"\"\"\n        if not rooms or not rooms[0]:\n            return\n        m, n = len(rooms), len(rooms[0])\n        q = collections.deque()\n        for i in range(m):\n            for j in range(n):\n                if rooms[i][j] == 0:\n                    q.append((i, j))\n        while q:\n            i, j = q.popleft()\n            for x, y in [(i - 1, j), (i + 1, j), (i, j - 1), (i, j + 1)]:\n                if 0 <= x < m and 0 <= y < n and rooms[x][y] == 2147483647:\n                    rooms[x][y] = rooms[i][j] + 1\n                    q.append((x, y))\n\n\nclass Solution(object):\n    def wallsAndGates(self, rooms):\n        \"\"\"\n        :type rooms: List[List[int]]\n        :rtype: None Do not return anything, modify rooms in-place instead.\n        \"\"\"\n        if not rooms or not rooms[0]:\n            return\n        m, n = len(rooms), len(rooms[0])\n        q = collections.deque()\n        for i in range(m):\n            for j in range(n):\n                if rooms[i][j] == 0:\n                    q.append((i, j))\n        while q:\n            i, j = q.popleft()\n            for x, y in [(i - 1, j), (i + 1, j), (i, j - 1), (i, j + 1)]:\n                if 0 <= x < m and 0 <= y < n and rooms[x][y] == 2147483647:\n                    rooms[x][y] = rooms[i][j] + 1\n                    q.append((x, y))", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import sys\n\nn, m = map(int, sys.stdin.readline().split())\ngrid = []\nfor i in range(n):\n    grid.append(list(sys.stdin.readline().strip()))\n\n\ndef check(x, y):\n    for i in range(x, n):\n        if grid[i][y] == \"*\":\n            return False\n    for i in range(y, m):\n        if grid[x][i] == \"*\":\n            return False\n    return True\n\n\nfor i in range(n):\n    for j in range(m):\n        if grid[i][j] == \"*\":\n            if check(i, j):\n                print(\"YES\")\n                print(i + 1, j + 1)\n                sys.exit(0)\nprint(\"NO\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\nfield = []\nfor i in range(n):\n    field.append(list(sys.stdin.readline().strip()))\n\n\ndef check(x, y):\n    for i in range(x, n):\n        if field[i][y] == \"*\":\n            return False\n    for i in range(y, m):\n        if field[x][i] == \"*\":\n            return False\n    return True\n\n\nfor i in range(n):\n    for j in range(m):\n        if field[i][j] == \"*\":\n            if check(i, j):\n                print(\"YES\")\n                print(i + 1, j + 1)\n                sys.exit(0)\nprint(\"NO\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "def bomb(x,y):\n    for i in range(n):\n        for j in range(m):\n            if(i==x and j==y):\n                continue\n            if(board[i][j]=='*'):\n                board[i][j]='.'\n    return\n\nn,m=map(int,input().split())\nboard=[]\nfor i in range(n):\n    board.append(list(input()))\n\ndef bomb(x,y):\n    for i in range(n):\n        for j in range(m):\n            if(i==x and j==y):\n                continue\n            if(board[i][j]=='*'):\n                board[i][j]='.'\n    return\n\nfor i in range(n):\n    for j in range(m):\n        if(board[i][j]=='*'):\n            board[i][j]='.'\n\nfor i in range(n):\n    for j in range(m):\n        if(board[i][j]=='*'):\n            board[i][j]='.'\n\nfor i in range(n):\n    for j in range(m):\n        if(board[i][j]=='*'):\n            board[i][j]='.'\n\nfor i in range(n):\n    for j in range(m):\n        if(board[i][j]=='*'):\n            board[i][j]='.'\n\nfor i in range(n):\n    for j in range(m):\n        if(board[i][j]=='*'):\n            board[i][j]='.'\n\nfor i in range(n):\n    for j in range(m):\n        if(board[i][j]=='*'):\n            board[i][j]='.'\n\nfor i in range(n):\n    for j in range(m):\n        if(board[i][j]=='*'):\n            board[i][j]='.'\n\nfor i in range(n):\n    for j in range(m):\n        if(board[i][j]=='*'):\n            board[i][j]='.'\n\nfor i in range(n):\n    for j in range(m):\n        if(board[i][j]=='*'):\n            board[i][j]='.'\n\nfor", "\n\ndef check(x, y):\n    for i in range(x, n):\n        if grid[i][y] == \"*\":\n            return False\n    for i in range(y, m):\n        if grid[x][i] == \"*\":\n            return False\n    return True\n\n\nn, m = map(int, input().split())\ngrid = [input() for _ in range(n)]\n\nfor i in range(n):\n    for j in range(m):\n        if grid[i][j] == \"*\":\n            if check(i, j):\n                print(\"YES\")\n                print(i + 1, j + 1)\n                exit(0)\nprint(\"NO\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\n\n\"\"\""], "rewards": [0.0, 0.0, 0.12280701754385964, 0.12280701754385964, 0.0, 0.12280701754385964, 0.0], "train rewards": [0.0, 0.0, 0.12280701754385964, 0.12280701754385964, 0.0, 0.12280701754385964, 0.0], "time": [30.169212818145752, 60.87419033050537, 91.922123670578, 123.29401421546936, 154.34124636650085, 185.14187860488892, 198.8012614250183], "sample times": 7}