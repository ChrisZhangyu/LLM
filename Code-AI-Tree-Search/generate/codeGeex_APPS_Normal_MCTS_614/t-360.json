{"codes": ["\n#include<bits/stdc++.h>\nusing namespace std;\nint main()\n{\n    int n;\n    cin>>n;\n    int l[n+1],r[n+1];\n    for(int i=1;i<=n;i++)\n    {\n        cin>>l[i]>>r[i];\n    }\n    int k;\n    cin>>k;\n    int ans=0;\n    for(int i=1;i<=n;i++)\n    {\n        if(l[i]<=k&&r[i]>=k)\n        {\n            ans++;\n        }\n    }\n    cout<<ans;\n    return 0;\n}\n```", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```", "import sys\n\nn = int(sys.stdin.readline().strip())\nchapters = []\nfor i in range(n):\n    chapters.append([int(x) for x in sys.stdin.readline().strip().split()])\nk = int(sys.stdin.readline().strip())\n\nchapters.append([k, k])\nchapters.sort()\n\ncount = 0\nfor i in range(len(chapters)):\n    if chapters[i][0] <= k <= chapters[i][1]:\n        count += 1\n    else:\n        break\nprint(len(chapters) - count)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "#include<bits/stdc++.h>\nusing namespace std;\nint main()\n{\n\tint n,l,r,k;\n\tcin>>n;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tcin>>l>>r;\n\t}\n\tcin>>k;\n\tint ans=0;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tif(r<k)\n\t\t{\n\t\t\tans++;\n\t\t}\n\t}\n\tcout<<ans;\n\treturn 0;\n}\n```\n", "\ndef main():\n    n = int(input())\n    l = []\n    for i in range(n):\n        l.append(list(map(int, input().split())))\n    k = int(input())\n    cnt = 0\n    for i in range(n):\n        if l[i][0] <= k <= l[i][1]:\n            cnt += 1\n    print(n - cnt)\n\n\nif __name__ == '__main__':\n    main()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\ndef read_input():\n    n = int(input())\n    chapters = []\n    for i in range(n):\n        l, r = map(int, input().split())\n        chapters.append((l, r))\n    k = int(input())\n    return n, chapters, k\n\n\ndef solve(n, chapters, k):\n    for i in range(n):\n        if chapters[i][0] <= k <= chapters[i][1]:\n            return n - i - 1\n    return n\n\n\nn, chapters, k = read_input()\nprint(solve(n, chapters, k))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "#include <bits/stdc++.h>\nusing namespace std;\nint main()\n{\n    int n,l,r,k;\n    cin>>n;\n    for(int i=1;i<=n;i++)\n    {\n        cin>>l>>r;\n    }\n    cin>>k;\n    int ans=0;\n    for(int i=1;i<=n;i++)\n    {\n        if(l<=k&&r>=k)\n        {\n            ans++;\n        }\n    }\n    cout<<ans;\n    return 0;\n}\n```", "\n\ndef main():\n    n = int(input())\n    l = []\n    for i in range(n):\n        l.append(list(map(int, input().split())))\n    k = int(input())\n    count = 0\n    for i in range(n):\n        if l[i][0] <= k <= l[i][1]:\n            count += 1\n    print(n - count)\n\n\nif __name__ == '__main__':\n    main()"], "rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "train rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "time": [20.772812604904175, 26.259556770324707, 48.24472641944885, 58.07871913909912, 80.09799242019653, 101.8837354183197, 112.36392736434937, 134.14696288108826], "sample times": 8}