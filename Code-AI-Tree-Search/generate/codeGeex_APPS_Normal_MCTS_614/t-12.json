{"codes": ["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import sys\n\nn = int(sys.stdin.readline().strip())\ntrophies = sys.stdin.readline().strip()\n\ngolden_trophies = []\n\nfor i in range(n):\n    if trophies[i] == 'G':\n        golden_trophies.append(i)\n\nif len(golden_trophies) == 0:\n    print(0)\n    sys.exit(0)\n\nif len(golden_trophies) == 1:\n    print(n)\n    sys.exit(0)\n\nmax_length = 0\n\nfor i in range(len(golden_trophies) - 1):\n    for j in range(i + 1, len(golden_trophies)):\n        if golden_trophies[j] - golden_trophies[i] > max_length:\n            max_length = golden_trophies[j] - golden_trophies[i]\n\nprint(max_length)", "\nimport sys\n\nn = int(sys.stdin.readline().strip())\ntrophies = sys.stdin.readline().strip()\n\ngolden_trophies = []\n\nfor i in range(n):\n    if trophies[i] == 'G':\n        golden_trophies.append(i)\n\nif len(golden_trophies) == 0:\n    print(0)\n    sys.exit(0)\n\nif len(golden_trophies) == 1:\n    print(n)\n    sys.exit(0)\n\nmax_length = 0\n\nfor i in range(len(golden_trophies) - 1):\n    for j in range(i + 1, len(golden_trophies)):\n        if golden_trophies[j] - golden_trophies[i] > max_length:\n            max_length = golden_trophies[j] - golden_trophies[i]\n\nprint(max_length)", "#include<bits/stdc++.h>\nusing namespace std;\nint main()\n{\n\tint n;\n\tcin>>n;\n\tstring s;\n\tcin>>s;\n\tint ans=0;\n\tfor(int i=0;i<n;i++)\n\t{\n\t\tif(s[i]=='G')\n\t\t\tans++;\n\t}\n\tcout<<ans<<endl;\n\treturn 0;\n}\n```", "\ndef swap(a,b):\n    a[b],a[b+1]=a[b+1],a[b]\n    return a\n\nn=int(input())\na=list(input())\nb=[]\nfor i in range(n):\n    if a[i]=='G':\n        b.append(i)\nif len(b)==0:\n    print(0)\nelif len(b)==1:\n    print(n)\nelif len(b)==2:\n    print(n-1)\nelif len(b)==3:\n    print(n-2)\nelif len(b)==4:\n    print(n-3)\nelif len(b)==5:\n    print(n-4)\nelif len(b)==6:\n    print(n-5)\nelif len(b)==7:\n    print(n-6)\nelif len(b)==8:\n    print(n-7)\nelif len(b)==9:\n    print(n-8)\nelif len(b)==10:\n    print(n-9)", "\n\ndef swap(a,b):\n    temp = a\n    a = b\n    b = temp\n    return a,b\n\ndef max_subsegment(arr):\n    n = len(arr)\n    if n == 1:\n        return 0\n    if n == 2:\n        if arr[0] == 'G' and arr[1] == 'G':\n            return 2\n        else:\n            return 0\n    if n == 3:\n        if arr[0] == 'G' and arr[1] == 'G' and arr[2] == 'G':\n            return 3\n        elif arr[0] == 'G' and arr[1] == 'G' and arr[2] == 'S':\n            return 2\n        elif arr[0] == 'G' and arr[1] == 'S' and arr[2] == 'G':\n            return 2\n        elif arr[0] == 'G' and arr[1] == 'S' and arr[2] == 'S':\n            return 1\n        elif arr[0] == 'S' and arr[1] == 'G' and arr[2] == 'G':\n            return 2\n        elif arr[0] == 'S' and arr[1] == 'G' and arr[2] == 'S':\n            return 1\n        elif arr[0] == 'S' and arr[1] == 'S' and arr[2] == 'G':\n            return 1\n        elif arr[0] == 'S' and arr[1] == 'S' and arr[2] == 'S':\n            return 0\n    if n == 4:\n        if arr[0] == 'G' and arr[1] == 'G' and arr[2] == 'G' and arr[3] == 'G':\n            return 4\n        elif arr[0] == 'G' and arr[1] == 'G' and arr[2] == 'G' and arr[3] == 'S':\n            return 3\n        elif arr[0] == 'G' and arr[1] == 'G' and arr[2] == 'S' and arr[3] == 'G':\n            return 3\n        elif arr[0] == 'G' and arr[1] == 'G' and arr[2] == 'S' and arr[3] == 'S':\n            return 2\n        elif arr[0", "\ndef get_max_golden_trophies(trophies):\n    golden_trophies = [i for i, trophy in enumerate(trophies) if trophy == 'G']\n    if len(golden_trophies) == 0:\n        return 0\n    elif len(golden_trophies) == 1:\n        return len(trophies)\n    else:\n        golden_trophies.append(len(trophies))\n        golden_trophies.sort()\n        max_golden_trophies = golden_trophies[1] - golden_trophies[0]\n        for i in range(1, len(golden_trophies) - 1):\n            max_golden_trophies = max(max_golden_trophies, golden_trophies[i + 1] - golden_trophies[i - 1])\n        return max_golden_trophies"], "rewards": [0.0, 0.14285714285714285, 0.14285714285714285, 0.0, 0.07692307692307693, 0.0, 0.0], "train rewards": [0.0, 0.12087912087912088, 0.12087912087912088, 0.0, 0.17582417582417584, 0.0, 0.0], "time": [31.45505142211914, 46.33310008049011, 61.382065534591675, 69.45979046821594, 86.04121780395508, 117.07722449302673, 133.1556158065796], "sample times": 7}