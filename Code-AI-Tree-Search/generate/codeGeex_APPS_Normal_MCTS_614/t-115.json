{"codes": ["0.333333333333 0.333333333333 0.333333333333\n0.150000000000 0.300000000000 0.550000000000\n0.057142857143 0.657142857143 0.285714285714\n\"\"\"\n\nimport random\n\nr, s, p = map(int, input().split())\n\n\ndef rock():\n    if random.randint(1, 3) == 1:\n        return 1\n    else:\n        return 0\n\n\ndef scissors():\n    if random.randint(1, 3) == 2:\n        return 1\n    else:\n        return 0\n\n\ndef paper():\n    if random.randint(1, 3) == 3:\n        return 1\n    else:\n        return 0\n\n\ndef rock_scissors():\n    if random.randint(1, 2) == 1:\n        return 1\n    else:\n        return 0\n\n\ndef scissors_paper():\n    if random.randint(1, 2) == 2:\n        return 1\n    else:\n        return 0\n\n\ndef paper_rock():\n    if random.randint(1, 2) == 1:\n        return 1\n    else:\n        return 0\n\n\ndef rock_paper():\n    if random.randint(1, 3) == 3:\n        return 1\n    else:\n        return 0\n\n\ndef scissors_rock():\n    if random.randint(1, 3) == 1:\n        return 1\n    else:\n        return 0\n\n\ndef paper_scissors():\n    if random.randint(1, 3) == 2:\n        return 1\n    else:\n        return 0\n\n\ndef rock_scissors_paper():\n    if random.randint(1, 3) == 3:\n        return 1\n    else:\n        return 0\n\n\ndef scissors_paper_rock():\n    if random.randint(1, 3) == 1:\n        return ", "\n#include <iostream>\n#include <cstdio>\n#include <cmath>\n#include <cstring>\n#include <cstdlib>\n#include <cctype>\n#include <algorithm>\n#include <vector>\n#include <stack>\n#include <queue>\n#include <set>\n#include <map>\n#include <string>\n#include <ctime>\n#include <cassert>\n#include <cmath>\n#include <cstdlib>\n#include <cctype>\n#include <algorithm>\n#include <vector>\n#include <stack>\n#include <queue>\n#include <set>\n#include <map>\n#include <string>\n#include <ctime>\n#include <cassert>\n#include <cmath>\n#include <cstdlib>\n#include <cctype>\n#include <algorithm>\n#include <vector>\n#include <stack>\n#include <queue>\n#include <set>\n#include <map>\n#include <string>\n#include <ctime>\n#include <cassert>\n#include <cmath>\n#include <cstdlib>\n#include <cctype>\n#include <algorithm>\n#include <vector>\n#include <stack>\n#include <queue>\n#include <set>\n#include <map>\n#include <string>\n#include <ctime>\n#include <cassert>\n#include <cmath>\n#include <cstdlib>\n#include <cctype>\n#include <algorithm>\n#include <vector>\n#include <stack>\n#include <queue>\n#include <set>\n#include <map>\n#include <string>\n#include <ctime>\n#include <cassert>\n#include <cmath>\n#include <cstdlib>\n#include <cctype>\n#include <algorithm>\n#include <vector>\n#include <stack>\n#include <queue>\n#include <set>\n#include <map>\n#include <string>\n#include <ctime>\n#include <cassert>\n#include <cmath>\n#include <cstdlib>\n#include <cctype>\n#include <algorithm>\n#include <vector>\n#include <stack>\n#include <queue>\n#include <set>\n#include <map>\n#include <string>\n#include <ctime>\n#include <cassert>\n#include <", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <algorithm>\n#include <vector>\n#include <map>\n#include <set>\n#include <list>\n#include <queue>\n#include <stack>\n#include <bitset>\n#include <deque>\n#include <ctime>\n#include <climits>\n#include <cctype>\n#include <cassert>\n#include <complex>\n#include <iomanip>\n#include <ext/pb_ds/assoc_container.hpp>\n#include <ext/pb_ds/tree_policy.hpp>\n#include <ext/pb_ds/hash_policy.hpp>\n#include <ext/pb_ds/priority_queue.hpp>\n#include <ext/pb_ds/trie.hpp>\n#include <tr1/unordered_map>\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef vector<int> vi;\ntypedef pair<int, int> pii;\ntypedef pair<ll, ll> pll;\ntypedef pair<double, double> pdd;\ntypedef vector<pii> vii;\ntypedef vector<ll> vll;\ntypedef vector<pdd> vpdd;\ntypedef vector<double> vd;\ntypedef vector<char> vc;\ntypedef vector<string> vs;\ntypedef map<int, int> mii;\ntypedef map<ll, ll> mll;\ntypedef map<pii, int> mpii;\ntypedef map<pdd, int> mppdd;\ntypedef map<double, int> mdii;\ntypedef map<string, int> msi;\ntypedef map<char, int> mci;\ntypedef set<int> si;\ntypedef set<char> sc;\ntypedef set<string> ss;\ntypedef stack<int> sti;\ntypedef stack<char> stc;\ntypedef stack<string> sts;\ntypedef queue<int> qi;\ntypedef queue<char> qc;\ntypedef priority_queue<int> pqi;\ntypedef priority_queue<pii> pqii;\n", "\nimport random\n\nr = int(input())\ns = int(input())\np = int(input())\n\ndef rock():\n    return 1\n\ndef scissors():\n    return 2\n\ndef paper():\n    return 3\n\ndef fight(a, b):\n    if a == 1 and b == 2:\n        return 2\n    elif a == 2 and b == 3:\n        return 3\n    elif a == 3 and b == 1:\n        return 1\n    else:\n        return 0\n\ndef simulate(r, s, p):\n    n = 1000000\n    wins_r = 0\n    wins_s = 0\n    wins_p = 0\n    for i in range(n):\n        a = random.randint(1, 3)\n        b = random.randint(1, 3)\n        if fight(a, b) == 1:\n            wins_r += 1\n        elif fight(a, b) == 2:\n            wins_s += 1\n        elif fight(a, b) == 3:\n            wins_p += 1\n    return wins_r / n, wins_s / n, wins_p / n\n\nprint(simulate(r, s, p)[0])\nprint(simulate(r, s, p)[1])\nprint(simulate(r, s, p)[2])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"], "rewards": [0.0, 0.0, 0.0, 0.0, 0.0], "train rewards": [0.0, 0.0, 0.0, 0.0, 0.0], "time": [31.874547958374023, 65.59567046165466, 98.76060628890991, 132.01699376106262, 165.1689465045929], "sample times": 5}