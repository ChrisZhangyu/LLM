{"codes": ["\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nconst ll mod = 998244353;\nll n, m, k;\nll dp[200005][200005];\nint main()\n{\n    cin >> n >> m >> k;\n    dp[0][0] = 1;\n    for (ll i = 1; i <= n; i++)\n    {\n        for (ll j = 0; j <= m; j++)\n        {\n            dp[i][j] = dp[i - 1][j];\n            if (j > 0)\n                dp[i][j] = (dp[i][j] + dp[i - 1][j - 1]) % mod;\n            if (j < m)\n                dp[i][j] = (dp[i][j] + dp[i - 1][j + 1]) % mod;\n        }\n    }\n    ll ans = 0;\n    for (ll i = 1; i <= m; i++)\n    {\n        ans = (ans + dp[n][i]) % mod;\n    }\n    cout << ans << endl;\n    return 0;\n}", "#include<bits/stdc++.h>\nusing namespace std;\nint main()\n{\n    int n,m,k;\n    cin>>n>>m>>k;\n    long long ans=1;\n    for(int i=1;i<=m;i++)\n    {\n        ans*=(n-k);\n        ans%=998244353;\n    }\n    cout<<ans%998244353;\n    return 0;\n}\n```", "import sys\nfrom collections import defaultdict\nfrom itertools import permutations\n\ninput = sys.stdin.readline\nMOD = 998244353\n\ndef main():\n    n, m, k = [int(x) for x in input().split()]\n    colors = [i for i in range(1, m + 1)]\n    blocks = defaultdict(list)\n    for i in range(1, n + 1):\n        blocks[i] = [int(x) for x in input().split()]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            blocks[i].append(j)\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            blocks[i].append(j)\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            blocks[i].append(j)\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            blocks[i].append(j)\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            blocks[i].append(j)\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            blocks[i].append(j)\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            blocks[i].append(j)\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            blocks[i].append(j)\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            blocks[i].append(j)\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            blocks[i].append(j)\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            blocks[i].append(j)\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            blocks[i].append(j)\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            blocks[i].append(j)\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            blocks[i].append(j)\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            ", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\nimport sys\nfrom collections import defaultdict\n\ninput = sys.stdin.readline\nMOD = 998244353\n\ndef main():\n    n, m, k = map(int, input().split())\n    dp = defaultdict(int)\n    dp[(1, 1)] = 1\n    for i in range(2, n + 1):\n        dp[(i, 1)] = (dp[(i - 1, 1)] + dp[(i - 1, m)]) % MOD\n        dp[(i, m)] = (dp[(i - 1, 1)] + dp[(i - 1, m)]) % MOD\n        for j in range(2, m + 1):\n            dp[(i, j)] = (dp[(i - 1, j)] + dp[(i - 1, j - 1)] + dp[(i - 1, j + 1)]) % MOD\n        for j in range(1, m):\n            dp[(i, j)] = (dp[(i, j)] + dp[(i, j + 1)]) % MOD\n    print((dp[(n, 1)] + dp[(n, m)]) % MOD)\n\nif __name__ == '__main__':\n    main()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\nclass Solution(object):\n    def colorTheBlocks(self, n, m, k):\n        \"\"\"\n        :type n: int\n        :type m: int\n        :type k: int\n        :rtype: int\n        \"\"\"", "#include <bits/stdc++.h>\nusing namespace std;\n\nconst int mod = 998244353;\n\nint main() {\n    int n, m, k;\n    cin >> n >> m >> k;\n    long long ans = 1;\n    for (int i = 1; i <= n; i++) {\n        ans = ans * m % mod;\n    }\n    for (int i = 1; i <= k; i++) {\n        ans = ans * (m - 1) % mod;\n    }\n    cout << ans << endl;\n    return 0;\n}\n```", "#!/usr/bin/env python3\n\nimport sys\n\ninput = sys.stdin.readline\n\nN, M, K = map(int, input().split())\n\nMOD = 998244353\n\ndp = [[0] * (M + 1) for _ in range(N + 1)]\ndp[0][1] = 1\n\nfor i in range(1, N + 1):\n    for j in range(1, M + 1):\n        dp[i][j] = dp[i - 1][j]\n        for k in range(1, M + 1):\n            if j != k:\n                dp[i][j] += dp[i - 1][k]\n        dp[i][j] %= MOD\n\nfor i in range(1, N + 1):\n    for j in range(1, M + 1):\n        for k in range(1, M + 1):\n            if j != k:\n                dp[i][j] += dp[i - 1][k]\n        dp[i][j] %= MOD\n\nprint(dp[N][1])", "import math\nimport os\nimport random\nimport re\nimport sys\nfrom collections import Counter\n\ndef paintBlocks(n, m, k):\n    mod = 998244353\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    for i in range(1, m + 1):\n        dp[1][i] = 1\n    for i in range(2, n + 1):\n        for j in range(1, m + 1):\n            for l in range(1, m + 1):\n                if j != l:\n                    dp[i][j] += dp[i - 1][l]\n            dp[i][j] %= mod\n    res = 0\n    for i in range(1, m + 1):\n        res += dp[n][i]\n    return res % mod\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nMk = input().split()\n\n    n = int(nMk[0])\n\n    m = int(nMk[1])\n\n    k = int(nMk[2])\n\n    result = paintBlocks(n, m, k)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()"], "rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "train rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "time": [19.024831295013428, 27.23732089996338, 65.12951350212097, 103.00101709365845, 140.63622164726257, 160.0200126171112, 169.56186437606812, 186.75494813919067, 215.178879737854], "sample times": 9}