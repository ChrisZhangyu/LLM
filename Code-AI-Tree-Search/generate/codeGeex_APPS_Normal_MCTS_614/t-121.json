{"codes": ["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import itertools\n\ndef check_win(board):\n    for row in board:\n        if len(set(row)) == 1 and row[0] != '.':\n            return True\n    for i in range(4):\n        if len(set([board[j][i] for j in range(4) if board[j][i] != '.'])) == 1 and board[0][i] != '.':\n            return True\n    if len(set([board[i][i] for i in range(4) if board[i][i] != '.'])) == 1 and board[0][0] != '.':\n        return True\n    if len(set([board[i][3 - i] for i in range(4) if board[i][3 - i] != '.'])) == 1 and board[0][3] != '.':\n        return True\n    return False\n\ndef check_draw(board):\n    for row in board:\n        for cell in row:\n            if cell == '.':\n                return False\n    return True\n\ndef check_illegal(board):\n    for row in board:\n        if len(set(row)) > 1:\n            return True\n    for i in range(4):\n        if len(set([board[j][i] for j in range(4) if board[j][i] != '.'])) > 1:\n            return True\n    if len(set([board[i][i] for i in range(4) if board[i][i] != '.'])) > 1:\n        return True\n    if len(set([board[i][3 - i] for i in range(4) if board[i][3 - i] != '.'])) > 1:\n        return True\n    return False\n\nboard = []\nfor i in range(4):\n    board.", "\nimport sys\n\ndef check_win(board):\n    for i in range(4):\n        if board[i][0] == board[i][1] == board[i][2] == board[i][3] != '.':\n            return True\n        if board[0][i] == board[1][i] == board[2][i] == board[3][i] != '.':\n            return True\n    if board[0][0] == board[1][1] == board[2][2] == board[3][3] != '.':\n        return True\n    if board[3][0] == board[2][1] == board[1][2] == board[0][3] != '.':\n        return True\n    return False\n\ndef check_draw(board):\n    for i in range(4):\n        for j in range(4):\n            if board[i][j] == '.':\n                return False\n    return True\n\ndef print_board(board):\n    for i in range(4):\n        for j in range(4):\n            sys.stdout.write(board[i][j])\n        sys.stdout.write('\\n')\n    sys.stdout.write('\\n')\n\nboard = []\nfor i in range(4):\n    board.append(list(sys.stdin.readline().strip()))\n\nif check_win(board):\n    print('YES')\nelif check_draw(board):\n    print('NO')\nelse:\n    print('NO')", "\ndef tic_tac_toe():\n    board = []\n    for i in range(4):\n        board.append(input())\n    for i in range(4):\n        for j in range(4):\n            if board[i][j] == 'x':\n                board[i][j] = 1\n            elif board[i][j] == 'o':\n                board[i][j] = 2\n            else:\n                board[i][j] = 0\n    for i in range(4):\n        if board[i][0] == board[i][1] == board[i][2] == board[i][3] != 0:\n            return board[i][0]\n    for i in range(4):\n        if board[0][i] == board[1][i] == board[2][i] == board[3][i] != 0:\n            return board[0][i]\n    if board[0][0] == board[1][1] == board[2][2] == board[3][3] != 0:\n        return board[0][0]\n    if board[0][3] == board[1][2] == board[2][1] == board[3][0] != 0:\n        return board[0][3]\n    for i in range(4):\n        for j in range(4):\n            if board[i][j] == 0:\n                return 0\n    return 3\n\ntic_tac_toe()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "def tic_tac_toe():\n    board = []\n    for i in range(4):\n        board.append(list(input()))\n    for i in range(4):\n        for j in range(4):\n            if board[i][j] == \".\":\n                board[i][j] = \"x\"\n                if win(board, \"x\"):\n                    print(\"YES\")\n                    return\n                board[i][j] = \"o\"\n                if win(board, \"o\"):\n                    print(\"YES\")\n                    return\n                board[i][j] = \".\"\n    print(\"NO\")\n\n\ndef win(board, player):\n    for i in range(4):\n        if board[i][0] == board[i][1] == board[i][2] == board[i][3] == player:\n            return True\n        if board[0][i] == board[1][i] == board[2][i] == board[3][i] == player:\n            return True\n    if board[0][0] == board[1][1] == board[2][2] == board[3][3] == player:\n        return True\n    if board[0][3] == board[1][2] == board[2][1] == board[3][0] == player:\n        return True\n    return False\n\n\ntic_tac_toe()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import sys\n\nn = int(sys.stdin.readline().strip())\n\nfor i in range(n):\n    line = sys.stdin.readline().strip()\n    if line.count('x') == 3:\n        print('YES')\n        break\n    elif line.count('o') == 3:\n        print('NO')\n        break\n    else:\n        continue", "def check_win(board):\n    for i in range(4):\n        if board[i][0] == board[i][1] == board[i][2] == board[i][3]:\n            return board[i][0]\n    for i in range(4):\n        if board[0][i] == board[1][i] == board[2][i] == board[3][i]:\n            return board[0][i]\n    if board[0][0] == board[1][1] == board[2][2] == board[3][3]:\n        return board[0][0]\n    if board[3][0] == board[2][1] == board[1][2] == board[0][3]:\n        return board[3][0]\n    return None\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "def check(a,b,c,d):\n    if a=='x' and b=='x' and c=='x' and d=='x':\n        return True\n    if a=='o' and b=='o' and c=='o' and d=='o':\n        return True\n    if a=='x' and b=='o' and c=='o' and d=='x':\n        return True\n    if a=='o' and b=='x' and c=='x' and d=='o':\n        return True\n    if a=='x' and b=='x' and c=='o' and d=='o':\n        return True\n    if a=='o' and b=='o' and c=='x' and d=='x':\n        return True\n    if a=='x' and b=='o' and c=='x' and d=='o':\n        return True\n    if a=='o' and b=='x' and c=='o' and d=='x':\n        return True\n    if a=='x' and b=='x' and c=='x' and d=='o':\n        return True\n    if a=='o' and b=='o' and c=='o' and d=='x':\n        return True\n    if a=='x' and b=='o' and c=='o' and d=='x':\n        return True\n    if a=='o' and b=='x' and c=='x' and d=='o':\n        return True\n    if a=='x' and b=='x' and c=='o' and d=='o':\n        return True\n    if a=='o' and b=='o' and c=='x' and d=='x':\n        return True\n    ", "\ndef check_win(board):\n    for i in range(4):\n        if board[i][0] == board[i][1] == board[i][2] == board[i][3]:\n            return board[i][0]\n    for i in range(4):\n        if board[0][i] == board[1][i] == board[2][i] == board[3][i]:\n            return board[0][i]\n    if board[0][0] == board[1][1] == board[2][2] == board[3][3]:\n        return board[0][0]\n    if board[3][0] == board[2][1] == board[1][2] == board[0][3]:\n        return board[3][0]\n    return None\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "def is_win(board):\n    for i in range(4):\n        if board[i][0] == board[i][1] == board[i][2] == board[i][3]:\n            return True\n        if board[0][i] == board[1][i] == board[2][i] == board[3][i]:\n            return True\n    if board[0][0] == board[1][1] == board[2][2] == board[3][3]:\n        return True\n    if board[0][3] == board[1][2] == board[2][1] == board[3][0]:\n        return True\n    return False\n\n\ndef is_draw(board):\n    for i in range(4):\n        for j in range(4):\n            if board[i][j] == '.':\n                return False\n    return True\n\n\ndef is_win_or_draw(board):\n    for i in range(4):\n        if board[i][0] == board[i][1] == board[i][2] == board[i][3]:\n            return True\n        if board[0][i] == board[1][i] == board[2][i] == board[3][i]:\n            return True\n    if board[0][0] == board[1][1] == board[2][2] == board[3][3]:\n        return True\n    if board[0][3] == board[1][2] == board[2][1] == board[3][0]:\n        return True\n    for i in range(4):\n        for j in range(4):\n            if board[i][j] == '.':\n                return False\n    return True\n\n\ndef print_board(board):\n    for i in range(4):\n        for j in range(4):\n            "], "rewards": [0.0, 0.0, 0.22916666666666666, 0.0, 0.3125, 0.0, 0.0, 0.0, 0.0, 0.0], "train rewards": [0.0, 0.0, 0.425531914893617, 0.0, 0.5319148936170213, 0.0, 0.0, 0.0, 0.0, 0.0], "time": [24.673147678375244, 50.313714265823364, 75.74876618385315, 101.87599468231201, 127.90678429603577, 135.84577870368958, 161.56896257400513, 187.26239681243896, 212.51776695251465, 238.4354145526886], "sample times": 10}