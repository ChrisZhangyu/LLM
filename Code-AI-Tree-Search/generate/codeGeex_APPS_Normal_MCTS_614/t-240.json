{"codes": ["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "import sys\n\nn = sys.stdin.readline().strip()\ns = sys.stdin.readline().strip()\n\nn = int(n)\ns = int(s)\n\nn = str(n)\ns = str(s)\n\nn = n[0:len(n)-s]\n\nprint(n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "def main():\n    n = int(input())\n    k = int(input())\n    s = input()\n    print(int(s) * 10 ** k + n)\n\n\nif __name__ == '__main__':\n    main()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\ndef main():\n    n = int(input())\n    k = int(input())\n    s = input()\n\n    for i in range(k):\n        n = n * 10 + int(s[i])\n\n    print(n)\n\n\nif __name__ == '__main__':\n    main()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "def get_int(s):\n    return int(s)\n\ndef get_str(s):\n    return str(s)\n\ndef get_int_list(s):\n    return list(map(get_int, s.split()))\n\ndef get_str_list(s):\n    return list(map(get_str, s.split()))\n\ndef get_int_tuple(s):\n    return tuple(map(get_int, s.split()))\n\ndef get_str_tuple(s):\n    return tuple(map(get_str, s.split()))\n\ndef get_int_set(s):\n    return set(map(get_int, s.split()))\n\ndef get_str_set(s):\n    return set(map(get_str, s.split()))\n\ndef get_int_frozenset(s):\n    return frozenset(map(get_int, s.split()))\n\ndef get_str_frozenset(s):\n    return frozenset(map(get_str, s.split()))\n\ndef get_int_dict(s):\n    return dict((i, get_int(s)) for i, s in enumerate(s.split()))\n\ndef get_str_dict(s):\n    return dict((i, get_str(s)) for i, s in enumerate(s.split()))\n\ndef get_int_list_dict(s):\n    return dict((i, get_int_list(s)) for i, s in enumerate(s.split()))\n\ndef get_str_list_dict(s):\n    return dict((i, get_str_list(s)) for i, s in enumerate(s.split()))\n\ndef get_int_tuple_dict(s):\n    return dict((i, get_int_tuple(s)) for i, s in enumerate(s.split()))\n\ndef get_str_tuple_dict(s):\n    return dict((i, get_str_tuple(s)) for i, s in enumerate(s.split()))\n\ndef get_int_set_dict(s):\n    return dict((i, get_int_set(s)) for i, s in enumerate(s.split()))\n\ndef get_str_set_dict(s):\n    return dict((i, get_str_set(s)) for i, s in enumerate(s.split()))\n\ndef get_int_frozenset_dict(s):\n    return dict((i, get_int_frozenset(s)) for i, s in enumerate(s.split()))\n\ndef get_str_frozenset_dict(s):\n    return dict((i, get_str_frozenset(s)) for i, s in enumerate(s.split()))\n\ndef get_int_dict_dict(s", "\nimport sys\n\nn = sys.stdin.readline().strip()\ns = sys.stdin.readline().strip()\n\nn = int(n)\ns = int(s)\n\nn = str(n)\ns = str(s)\n\nn = n[0:len(n)-s]\n\nprint(n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "\ndef get_int(s):\n    return int(s)\n\ndef get_str(s):\n    return str(s)\n\ndef get_int_list(s):\n    return list(map(get_int, s.split()))\n\ndef get_str_list(s):\n    return list(map(get_str, s.split()))\n\ndef get_int_tuple(s):\n    return tuple(map(get_int, s.split()))\n\ndef get_str_tuple(s):\n    return tuple(map(get_str, s.split()))\n\ndef get_int_set(s):\n    return set(map(get_int, s.split()))\n\ndef get_str_set(s):\n    return set(map(get_str, s.split()))\n\ndef get_int_frozenset(s):\n    return frozenset(map(get_int, s.split()))\n\ndef get_str_frozenset(s):\n    return frozenset(map(get_str, s.split()))\n\ndef get_int_dict(s):\n    return dict((i, get_int(s)) for i, s in enumerate(s.split()))\n\ndef get_str_dict(s):\n    return dict((i, get_str(s)) for i, s in enumerate(s.split()))\n\ndef get_int_list_dict(s):\n    return dict((i, get_int_list(s)) for i, s in enumerate(s.split()))\n\ndef get_str_list_dict(s):\n    return dict((i, get_str_list(s)) for i, s in enumerate(s.split()))\n\ndef get_int_tuple_dict(s):\n    return dict((i, get_int_tuple(s)) for i, s in enumerate(s.split()))\n\ndef get_str_tuple_dict(s):\n    return dict((i, get_str_tuple(s)) for i, s in enumerate(s.split()))\n\ndef get_int_set_dict(s):\n    return dict((i, get_int_set(s)) for i, s in enumerate(s.split()))\n\ndef get_str_set_dict(s):\n    return dict((i, get_str_set(s)) for i, s in enumerate(s.split()))\n\ndef get_int_frozenset_dict(s):\n    return dict((i, get_int_frozenset(s)) for i, s in enumerate(s.split()))\n\ndef get_str_frozenset_dict(s):\n    return dict((i, get_str_frozenset(s)) for i, s in enumerate(s.split()))\n\ndef get_int_dict_dict(", "def is_int(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False\n\n\ndef get_int(s):\n    if is_int(s):\n        return int(s)\n    else:\n        return 0\n\n\ndef get_int_from_str(s):\n    if is_int(s):\n        return int(s)\n    else:\n        return 0\n\n\ndef get_str_from_int(s):\n    if is_int(s):\n        return str(s)\n    else:\n        return ''\n\n\ndef get_str_from_str(s):\n    if is_int(s):\n        return str(s)\n    else:\n        return ''\n\n\ndef get_int_from_str(s):\n    if is_int(s):\n        return int(s)\n    else:\n        return 0\n\n\ndef get_str_from_int(s):\n    if is_int(s):\n        return str(s)\n    else:\n        return ''\n\n\ndef get_str_from_str(s):\n    if is_int(s):\n        return str(s)\n    else:\n        return ''\n\n\ndef get_int_from_str(s):\n    if is_int(s):\n        return int(s)\n    else:\n        return 0\n\n\ndef get_str_from_int(s):\n    if is_int(s):\n        return str(s)\n    else:\n        return ''\n\n\ndef get_str_from_str(s):\n    if is_int(s):\n        return str(s)\n    else:\n        return ''\n\n\ndef get_int_from_str(s):\n    if is_int(s):\n        return int(s)\n    else:\n        return 0\n\n\ndef get_str_from_int(s):\n    if is_int(s):\n        return str(s)\n    else:\n        return ''\n\n\ndef get_str_from_str(s):\n    if is_int(s):\n        return str(s)\n    else:\n        return ''\n\n\ndef get_int_from_str(s):\n    if is_int(s):\n        return int(s)\n    else:\n        return 0\n\n\ndef get_str_from_int(s):\n    if is_int(s):\n        return str(s)\n    else:\n        return ''\n\n\ndef get_str_from_str(s):\n    if is_int(s):\n        return str(s)\n    else:\n        return ''\n\n\ndef get_int_from_str(s):\n    if is_int(s", "import math\n\nn = int(input())\nk = int(input())\ns = int(input())\n\nn = str(n)\nk = str(k)\ns = str(s)\n\nn = list(n)\nk = list(k)\ns = list(s)\n\nn.sort()\nk.sort()\ns.sort()\n\nn = ''.join(n)\nk = ''.join(k)\ns = ''.join(s)\n\nn = int(n)\nk = int(k)\ns = int(s)\n\nn = str(n)\nk = str(k)\ns = str(s)\n\nn = list(n)\nk = list(k)\ns = list(s)\n\nn.sort()\nk.sort()\ns.sort()\n\nn = ''.join(n)\nk = ''.join(k)\ns = ''.join(s)\n\nn = int(n)\nk = int(k)\ns = int(s)\n\nn = str(n)\nk = str(k)\ns = str(s)\n\nn = list(n)\nk = list(k)\ns = list(s)\n\nn.sort()\nk.sort()\ns.sort()\n\nn = ''.join(n)\nk = ''.join(k)\ns = ''.join(s)\n\nn = int(n)\nk = int(k)\ns = int(s)\n\nn = str(n)\nk = str(k)\ns = str(s)\n\nn = list(n)\nk = list(k)\ns = list(s)\n\nn.sort()\nk.sort()\ns.sort()\n\nn = ''.join(n)\nk = ''.join(k)\ns = ''.join(s)\n\nn = int(n)\nk = int(k)\ns = int(s)\n\nn = str(n)\nk = str(k)\ns = str(s)\n\nn = list(n)\nk = list(k)\ns = list(s)\n\nn.sort()\nk.sort()\ns.sort()\n\nn = ''.join(n)\nk = ''.join(k)\ns = ''.join(s)\n\nn = int(n)\nk = int(k)\ns = int(s)\n\nn = str(n)\nk = str(k)\ns = str(s)\n\nn = list(n)\nk = list(k)\ns = list(s)\n\nn.sort()\nk.sort()\ns.sort()\n\nn = ''.join(n)\nk = ''.join(k)\ns = ''.join(s)"], "rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "train rewards": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "time": [34.02100610733032, 68.89036345481873, 103.42708611488342, 138.46455240249634, 174.22971844673157, 208.89138841629028, 243.4166615009308, 278.51609802246094, 312.9829728603363], "sample times": 9}